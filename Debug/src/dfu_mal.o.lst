   1              		.syntax unified
   2              		.cpu cortex-m3
   3              		.fpu softvfp
   4              		.eabi_attribute 20, 1
   5              		.eabi_attribute 21, 1
   6              		.eabi_attribute 23, 3
   7              		.eabi_attribute 24, 1
   8              		.eabi_attribute 25, 1
   9              		.eabi_attribute 26, 1
  10              		.eabi_attribute 30, 4
  11              		.eabi_attribute 34, 1
  12              		.eabi_attribute 18, 4
  13              		.thumb
  14              		.file	"dfu_mal.c"
  15              		.text
  16              	.Ltext0:
  17              		.cfi_sections	.debug_frame
  18              		.section	.text.MAL_Init,"ax",%progbits
  19              		.align	1
  20              		.global	MAL_Init
  21              		.thumb
  22              		.thumb_func
  24              	MAL_Init:
  25              	.LFB56:
  26              		.file 1 "../src/dfu_mal.c"
   1:../src/dfu_mal.c **** /**
   2:../src/dfu_mal.c ****   ******************************************************************************
   3:../src/dfu_mal.c ****   * @file    dfu_mal.c
   4:../src/dfu_mal.c ****   * @author  Spark Application Team
   5:../src/dfu_mal.c ****   * @version V1.0.0
   6:../src/dfu_mal.c ****   * @date    30-April-2013
   7:../src/dfu_mal.c ****   * @brief   Generic media access Layer
   8:../src/dfu_mal.c ****   ******************************************************************************
   9:../src/dfu_mal.c ****   */
  10:../src/dfu_mal.c **** 
  11:../src/dfu_mal.c **** /* Includes ------------------------------------------------------------------*/
  12:../src/dfu_mal.c **** #include "hw_config.h"
  13:../src/dfu_mal.c **** #include "dfu_mal.h"
  14:../src/dfu_mal.c **** #include "usb_lib.h"
  15:../src/dfu_mal.c **** #include "usb_type.h"
  16:../src/dfu_mal.c **** #include "usb_desc.h"
  17:../src/dfu_mal.c **** #include "flash_if.h"
  18:../src/dfu_mal.c **** #include "spi_if.h"
  19:../src/dfu_mal.c **** 
  20:../src/dfu_mal.c **** /* Private typedef -----------------------------------------------------------*/
  21:../src/dfu_mal.c **** /* Private define ------------------------------------------------------------*/
  22:../src/dfu_mal.c **** /* Private macro -------------------------------------------------------------*/
  23:../src/dfu_mal.c **** /* Private variables ---------------------------------------------------------*/
  24:../src/dfu_mal.c **** uint16_t (*pMAL_Init) (void);
  25:../src/dfu_mal.c **** uint16_t (*pMAL_Erase) (uint32_t SectorAddress);
  26:../src/dfu_mal.c **** uint16_t (*pMAL_Write) (uint32_t SectorAddress, uint32_t DataLength);
  27:../src/dfu_mal.c **** uint8_t  *(*pMAL_Read)  (uint32_t SectorAddress, uint32_t DataLength);
  28:../src/dfu_mal.c **** uint8_t  MAL_Buffer[wTransferSize]; /* RAM Buffer for Downloaded Data */
  29:../src/dfu_mal.c **** 
  30:../src/dfu_mal.c **** /* This table holds the Typical Sector Erase and 1024 Bytes Write timings.
  31:../src/dfu_mal.c ****    These timings will be returned to the host when it checks the device
  32:../src/dfu_mal.c ****    status during a write or erase operation to know how much time the host
  33:../src/dfu_mal.c ****    should wait before issuing the next get status request. 
  34:../src/dfu_mal.c ****    These defines are set in usb_conf.h file.
  35:../src/dfu_mal.c ****    The values of this table should be extracted from relative memories 
  36:../src/dfu_mal.c ****    datasheet (Typical or Maximum timming value for Sector Erase and for 
  37:../src/dfu_mal.c ****    1024 bytes Write). All timings are expressed in millisecond unit (ms).
  38:../src/dfu_mal.c ****    Note that "Sector" refers here to the memory unit used for Erase/Write 
  39:../src/dfu_mal.c ****    operations. It could be a sector, a page, a block, a word ...
  40:../src/dfu_mal.c ****    If the erase operation is not supported, it is advised to set the erase
  41:../src/dfu_mal.c ****    timing to 1 (which means 1ms: one USB frame). */
  42:../src/dfu_mal.c **** static const uint16_t  TimingTable[2][2] =
  43:../src/dfu_mal.c ****   { /*       Sector Erase time,            Sector Program time*/
  44:../src/dfu_mal.c ****     { INTERN_FLASH_SECTOR_ERASE_TIME, INTERN_FLASH_SECTOR_WRITE_TIME },	/* Internal Flash */
  45:../src/dfu_mal.c ****     { SPI_FLASH_SECTOR_ERASE_TIME,    SPI_FLASH_SECTOR_WRITE_TIME    }	/* SPI Flash */
  46:../src/dfu_mal.c ****   };
  47:../src/dfu_mal.c **** 
  48:../src/dfu_mal.c **** /* Private function prototypes -----------------------------------------------*/
  49:../src/dfu_mal.c **** /* Private functions ---------------------------------------------------------*/
  50:../src/dfu_mal.c **** 
  51:../src/dfu_mal.c **** /*******************************************************************************
  52:../src/dfu_mal.c **** * Function Name  : MAL_Init
  53:../src/dfu_mal.c **** * Description    : Initializes the Media on the STM32
  54:../src/dfu_mal.c **** * Input          : None
  55:../src/dfu_mal.c **** * Output         : None
  56:../src/dfu_mal.c **** * Return         : None
  57:../src/dfu_mal.c **** *******************************************************************************/
  58:../src/dfu_mal.c **** uint16_t MAL_Init(void)
  59:../src/dfu_mal.c **** {
  27              		.loc 1 59 0
  28              		.cfi_startproc
  29              		@ args = 0, pretend = 0, frame = 0
  30              		@ frame_needed = 0, uses_anonymous_args = 0
  31 0000 08B5     		push	{r3, lr}
  32              	.LCFI0:
  33              		.cfi_def_cfa_offset 8
  34              		.cfi_offset 3, -8
  35              		.cfi_offset 14, -4
  60:../src/dfu_mal.c ****   FLASH_If_Init(); /* Internal Flash */
  36              		.loc 1 60 0
  37 0002 FFF7FEFF 		bl	FLASH_If_Init
  38              	.LVL0:
  61:../src/dfu_mal.c **** 
  62:../src/dfu_mal.c **** #ifdef SPARK_SFLASH_ENABLE
  63:../src/dfu_mal.c ****   SPI_If_Init();   /* SPI Flash */
  39              		.loc 1 63 0
  40 0006 FFF7FEFF 		bl	SPI_If_Init
  41              	.LVL1:
  64:../src/dfu_mal.c **** #endif
  65:../src/dfu_mal.c **** 
  66:../src/dfu_mal.c ****   return MAL_OK;
  67:../src/dfu_mal.c **** }
  42              		.loc 1 67 0
  43 000a 0020     		movs	r0, #0
  44 000c 08BD     		pop	{r3, pc}
  45              		.cfi_endproc
  46              	.LFE56:
  48              		.section	.text.MAL_Erase,"ax",%progbits
  49              		.align	1
  50              		.global	MAL_Erase
  51              		.thumb
  52              		.thumb_func
  54              	MAL_Erase:
  55              	.LFB57:
  68:../src/dfu_mal.c **** 
  69:../src/dfu_mal.c **** /*******************************************************************************
  70:../src/dfu_mal.c **** * Function Name  : MAL_Erase
  71:../src/dfu_mal.c **** * Description    : Erase sector
  72:../src/dfu_mal.c **** * Input          : None
  73:../src/dfu_mal.c **** * Output         : None
  74:../src/dfu_mal.c **** * Return         : None
  75:../src/dfu_mal.c **** *******************************************************************************/
  76:../src/dfu_mal.c **** uint16_t MAL_Erase(uint32_t SectorAddress)
  77:../src/dfu_mal.c **** {
  56              		.loc 1 77 0
  57              		.cfi_startproc
  58              		@ args = 0, pretend = 0, frame = 0
  59              		@ frame_needed = 0, uses_anonymous_args = 0
  60              	.LVL2:
  61 0000 08B5     		push	{r3, lr}
  62              	.LCFI1:
  63              		.cfi_def_cfa_offset 8
  64              		.cfi_offset 3, -8
  65              		.cfi_offset 14, -4
  78:../src/dfu_mal.c ****   switch (SectorAddress & MAL_MASK)
  66              		.loc 1 78 0
  67 0002 10F07C43 		ands	r3, r0, #-67108864
  68 0006 04D0     		beq	.L4
  69 0008 B3F1006F 		cmp	r3, #134217728
  70 000c 08D1     		bne	.L8
  79:../src/dfu_mal.c ****   {
  80:../src/dfu_mal.c ****     case INTERNAL_FLASH_BASE:
  81:../src/dfu_mal.c ****       pMAL_Erase = FLASH_If_Erase;
  71              		.loc 1 81 0
  72 000e 054A     		ldr	r2, .L11
  73 0010 00E0     		b	.L9
  74              	.L4:
  82:../src/dfu_mal.c ****       break;
  83:../src/dfu_mal.c ****       
  84:../src/dfu_mal.c **** #ifdef SPARK_SFLASH_ENABLE
  85:../src/dfu_mal.c ****     case SPI_FLASH_BASE:
  86:../src/dfu_mal.c ****       pMAL_Erase = SPI_If_Erase;
  75              		.loc 1 86 0
  76 0012 054A     		ldr	r2, .L11+4
  77              	.L9:
  78 0014 0549     		ldr	r1, .L11+8
  87:../src/dfu_mal.c ****       break;
  88:../src/dfu_mal.c **** #endif
  89:../src/dfu_mal.c **** 
  90:../src/dfu_mal.c ****     default:
  91:../src/dfu_mal.c ****       return MAL_FAIL;
  92:../src/dfu_mal.c ****   }
  93:../src/dfu_mal.c ****   return pMAL_Erase(SectorAddress);
  79              		.loc 1 93 0
  80 0016 054B     		ldr	r3, .L11+8
  86:../src/dfu_mal.c ****       pMAL_Erase = SPI_If_Erase;
  81              		.loc 1 86 0
  82 0018 0A60     		str	r2, [r1, #0]
  83              		.loc 1 93 0
  84 001a 1A68     		ldr	r2, [r3, #0]
  85 001c 9047     		blx	r2
  86              	.LVL3:
  87 001e 08BD     		pop	{r3, pc}
  88              	.LVL4:
  89              	.L8:
  91:../src/dfu_mal.c ****       return MAL_FAIL;
  90              		.loc 1 91 0
  91 0020 0120     		movs	r0, #1
  92              	.LVL5:
  94:../src/dfu_mal.c **** }
  93              		.loc 1 94 0
  94 0022 08BD     		pop	{r3, pc}
  95              	.L12:
  96              		.align	2
  97              	.L11:
  98 0024 00000000 		.word	FLASH_If_Erase
  99 0028 00000000 		.word	SPI_If_Erase
 100 002c 00000000 		.word	pMAL_Erase
 101              		.cfi_endproc
 102              	.LFE57:
 104              		.section	.text.MAL_Write,"ax",%progbits
 105              		.align	1
 106              		.global	MAL_Write
 107              		.thumb
 108              		.thumb_func
 110              	MAL_Write:
 111              	.LFB58:
  95:../src/dfu_mal.c **** 
  96:../src/dfu_mal.c **** /*******************************************************************************
  97:../src/dfu_mal.c **** * Function Name  : MAL_Write
  98:../src/dfu_mal.c **** * Description    : Write sectors
  99:../src/dfu_mal.c **** * Input          : None
 100:../src/dfu_mal.c **** * Output         : None
 101:../src/dfu_mal.c **** * Return         : None
 102:../src/dfu_mal.c **** *******************************************************************************/
 103:../src/dfu_mal.c **** uint16_t MAL_Write (uint32_t SectorAddress, uint32_t DataLength)
 104:../src/dfu_mal.c **** {
 112              		.loc 1 104 0
 113              		.cfi_startproc
 114              		@ args = 0, pretend = 0, frame = 0
 115              		@ frame_needed = 0, uses_anonymous_args = 0
 116              	.LVL6:
 117 0000 08B5     		push	{r3, lr}
 118              	.LCFI2:
 119              		.cfi_def_cfa_offset 8
 120              		.cfi_offset 3, -8
 121              		.cfi_offset 14, -4
 105:../src/dfu_mal.c ****   switch (SectorAddress & MAL_MASK)
 122              		.loc 1 105 0
 123 0002 10F07C43 		ands	r3, r0, #-67108864
 124 0006 04D0     		beq	.L15
 125 0008 B3F1006F 		cmp	r3, #134217728
 126 000c 08D1     		bne	.L19
 106:../src/dfu_mal.c ****   {
 107:../src/dfu_mal.c ****     case INTERNAL_FLASH_BASE:
 108:../src/dfu_mal.c ****       pMAL_Write = FLASH_If_Write;
 127              		.loc 1 108 0
 128 000e 054A     		ldr	r2, .L21
 129 0010 00E0     		b	.L20
 130              	.L15:
 109:../src/dfu_mal.c ****       break;
 110:../src/dfu_mal.c **** 
 111:../src/dfu_mal.c **** #ifdef SPARK_SFLASH_ENABLE
 112:../src/dfu_mal.c ****     case SPI_FLASH_BASE:
 113:../src/dfu_mal.c ****       pMAL_Write = SPI_If_Write;
 131              		.loc 1 113 0
 132 0012 054A     		ldr	r2, .L21+4
 133              	.L20:
 134 0014 054B     		ldr	r3, .L21+8
 135 0016 1A60     		str	r2, [r3, #0]
 114:../src/dfu_mal.c ****       break;
 115:../src/dfu_mal.c **** #endif
 116:../src/dfu_mal.c **** 
 117:../src/dfu_mal.c ****     default:
 118:../src/dfu_mal.c ****       return MAL_FAIL;
 119:../src/dfu_mal.c ****   }
 120:../src/dfu_mal.c ****   return pMAL_Write(SectorAddress, DataLength);
 136              		.loc 1 120 0
 137 0018 044A     		ldr	r2, .L21+8
 138 001a 1368     		ldr	r3, [r2, #0]
 139 001c 9847     		blx	r3
 140              	.LVL7:
 141 001e 08BD     		pop	{r3, pc}
 142              	.LVL8:
 143              	.L19:
 118:../src/dfu_mal.c ****       return MAL_FAIL;
 144              		.loc 1 118 0
 145 0020 0120     		movs	r0, #1
 146              	.LVL9:
 121:../src/dfu_mal.c **** }
 147              		.loc 1 121 0
 148 0022 08BD     		pop	{r3, pc}
 149              	.L22:
 150              		.align	2
 151              	.L21:
 152 0024 00000000 		.word	FLASH_If_Write
 153 0028 00000000 		.word	SPI_If_Write
 154 002c 00000000 		.word	pMAL_Write
 155              		.cfi_endproc
 156              	.LFE58:
 158              		.section	.text.MAL_Read,"ax",%progbits
 159              		.align	1
 160              		.global	MAL_Read
 161              		.thumb
 162              		.thumb_func
 164              	MAL_Read:
 165              	.LFB59:
 122:../src/dfu_mal.c **** 
 123:../src/dfu_mal.c **** /*******************************************************************************
 124:../src/dfu_mal.c **** * Function Name  : MAL_Read
 125:../src/dfu_mal.c **** * Description    : Read sectors
 126:../src/dfu_mal.c **** * Input          : None
 127:../src/dfu_mal.c **** * Output         : None
 128:../src/dfu_mal.c **** * Return         : Buffer pointer
 129:../src/dfu_mal.c **** *******************************************************************************/
 130:../src/dfu_mal.c **** uint8_t *MAL_Read (uint32_t SectorAddress, uint32_t DataLength)
 131:../src/dfu_mal.c **** {
 166              		.loc 1 131 0
 167              		.cfi_startproc
 168              		@ args = 0, pretend = 0, frame = 0
 169              		@ frame_needed = 0, uses_anonymous_args = 0
 170              	.LVL10:
 171 0000 08B5     		push	{r3, lr}
 172              	.LCFI3:
 173              		.cfi_def_cfa_offset 8
 174              		.cfi_offset 3, -8
 175              		.cfi_offset 14, -4
 132:../src/dfu_mal.c ****   switch (SectorAddress & MAL_MASK)
 176              		.loc 1 132 0
 177 0002 10F07C43 		ands	r3, r0, #-67108864
 178 0006 04D0     		beq	.L25
 179 0008 B3F1006F 		cmp	r3, #134217728
 180 000c 08D1     		bne	.L29
 133:../src/dfu_mal.c ****   {
 134:../src/dfu_mal.c ****     case INTERNAL_FLASH_BASE:
 135:../src/dfu_mal.c ****       pMAL_Read = FLASH_If_Read;
 181              		.loc 1 135 0
 182 000e 054A     		ldr	r2, .L31
 183 0010 00E0     		b	.L30
 184              	.L25:
 136:../src/dfu_mal.c ****       break;
 137:../src/dfu_mal.c ****       
 138:../src/dfu_mal.c **** #ifdef SPARK_SFLASH_ENABLE
 139:../src/dfu_mal.c ****     case SPI_FLASH_BASE:
 140:../src/dfu_mal.c ****       pMAL_Read = SPI_If_Read;
 185              		.loc 1 140 0
 186 0012 054A     		ldr	r2, .L31+4
 187              	.L30:
 188 0014 054B     		ldr	r3, .L31+8
 189 0016 1A60     		str	r2, [r3, #0]
 141:../src/dfu_mal.c ****       break;
 142:../src/dfu_mal.c **** #endif
 143:../src/dfu_mal.c **** 
 144:../src/dfu_mal.c ****     default:
 145:../src/dfu_mal.c ****       return 0;
 146:../src/dfu_mal.c ****   }
 147:../src/dfu_mal.c ****   return pMAL_Read (SectorAddress, DataLength);
 190              		.loc 1 147 0
 191 0018 044A     		ldr	r2, .L31+8
 192 001a 1368     		ldr	r3, [r2, #0]
 193 001c 9847     		blx	r3
 194              	.LVL11:
 195 001e 08BD     		pop	{r3, pc}
 196              	.LVL12:
 197              	.L29:
 145:../src/dfu_mal.c ****       return 0;
 198              		.loc 1 145 0
 199 0020 0020     		movs	r0, #0
 200              	.LVL13:
 148:../src/dfu_mal.c **** }
 201              		.loc 1 148 0
 202 0022 08BD     		pop	{r3, pc}
 203              	.L32:
 204              		.align	2
 205              	.L31:
 206 0024 00000000 		.word	FLASH_If_Read
 207 0028 00000000 		.word	SPI_If_Read
 208 002c 00000000 		.word	pMAL_Read
 209              		.cfi_endproc
 210              	.LFE59:
 212              		.section	.text.MAL_GetStatus,"ax",%progbits
 213              		.align	1
 214              		.global	MAL_GetStatus
 215              		.thumb
 216              		.thumb_func
 218              	MAL_GetStatus:
 219              	.LFB60:
 149:../src/dfu_mal.c **** 
 150:../src/dfu_mal.c **** /*******************************************************************************
 151:../src/dfu_mal.c **** * Function Name  : MAL_GetStatus
 152:../src/dfu_mal.c **** * Description    : Get status
 153:../src/dfu_mal.c **** * Input          : None
 154:../src/dfu_mal.c **** * Output         : None
 155:../src/dfu_mal.c **** * Return         : Buffer pointer
 156:../src/dfu_mal.c **** *******************************************************************************/
 157:../src/dfu_mal.c **** uint16_t MAL_GetStatus(uint32_t SectorAddress , uint8_t Cmd, uint8_t *buffer)
 158:../src/dfu_mal.c **** {
 220              		.loc 1 158 0
 221              		.cfi_startproc
 222              		@ args = 0, pretend = 0, frame = 0
 223              		@ frame_needed = 0, uses_anonymous_args = 0
 224              		@ link register save eliminated.
 225              	.LVL14:
 157:../src/dfu_mal.c **** uint16_t MAL_GetStatus(uint32_t SectorAddress , uint8_t Cmd, uint8_t *buffer)
 226              		.loc 1 157 0
 227 0000 10F07C4F 		tst	r0, #-67108864
 159:../src/dfu_mal.c ****   uint8_t x = 0;
 160:../src/dfu_mal.c **** 
 161:../src/dfu_mal.c ****   switch (SectorAddress & MAL_MASK)
 162:../src/dfu_mal.c ****   {
 163:../src/dfu_mal.c ****     case INTERNAL_FLASH_BASE:
 164:../src/dfu_mal.c ****       x = 0;
 165:../src/dfu_mal.c ****       break;
 166:../src/dfu_mal.c ****       
 167:../src/dfu_mal.c **** #ifdef SPARK_SFLASH_ENABLE
 168:../src/dfu_mal.c ****     case SPI_FLASH_BASE:
 169:../src/dfu_mal.c ****       x = 1;
 170:../src/dfu_mal.c ****       break;
 171:../src/dfu_mal.c **** #endif
 172:../src/dfu_mal.c ****   }
 173:../src/dfu_mal.c **** 
 174:../src/dfu_mal.c ****   uint8_t y = Cmd & 0x01;
 175:../src/dfu_mal.c ****   
 176:../src/dfu_mal.c ****   SET_POLLING_TIMING(TimingTable[x][y]);  /* Media Erase/Write Timing */
 228              		.loc 1 176 0
 229 0004 0CBF     		ite	eq
 230 0006 0223     		moveq	r3, #2
 231 0008 0023     		movne	r3, #0
 232 000a 01F00101 		and	r1, r1, #1
 233              	.LVL15:
 234 000e 5818     		adds	r0, r3, r1
 235              	.LVL16:
 236 0010 0449     		ldr	r1, .L34
 237 0012 31F81030 		ldrh	r3, [r1, r0, lsl #1]
 238 0016 180A     		lsrs	r0, r3, #8
 239 0018 9070     		strb	r0, [r2, #2]
 240 001a 0020     		movs	r0, #0
 241 001c 5370     		strb	r3, [r2, #1]
 242 001e D070     		strb	r0, [r2, #3]
 177:../src/dfu_mal.c **** 
 178:../src/dfu_mal.c ****   return MAL_OK;
 179:../src/dfu_mal.c **** }
 243              		.loc 1 179 0
 244 0020 7047     		bx	lr
 245              	.L35:
 246 0022 00BF     		.align	2
 247              	.L34:
 248 0024 00000000 		.word	.LANCHOR0
 249              		.cfi_endproc
 250              	.LFE60:
 252              		.comm	MAL_Buffer,1024,1
 253              		.comm	pMAL_Read,4,4
 254              		.comm	pMAL_Write,4,4
 255              		.comm	pMAL_Erase,4,4
 256              		.comm	pMAL_Init,4,4
 257              		.section	.rodata
 258              		.align	1
 259              		.set	.LANCHOR0,. + 0
 262              	TimingTable:
 263 0000 3200     		.short	50
 264 0002 3200     		.short	50
 265 0004 1400     		.short	20
 266 0006 1E00     		.short	30
 267              		.text
 268              	.Letext0:
 269              		.file 2 "/usr/local/gcc-arm-none-eabi-4_7-2013q1/bin/../lib/gcc/arm-none-eabi/4.7.3/../../../../ar
 270              		.file 3 "/Users/zac/code/spark/usb-dfu/libraries/CMSIS/Include/core_cm3.h"
 271              		.file 4 "/Users/zac/code/spark/usb-dfu/inc/flash_if.h"
 272              		.file 5 "/Users/zac/code/spark/usb-dfu/inc/spi_if.h"
DEFINED SYMBOLS
                            *ABS*:0000000000000000 dfu_mal.c
/var/folders/d1/846xqcps64v4wybnmd7kk8540000gn/T//ccjOvayb.s:19     .text.MAL_Init:0000000000000000 $t
/var/folders/d1/846xqcps64v4wybnmd7kk8540000gn/T//ccjOvayb.s:24     .text.MAL_Init:0000000000000000 MAL_Init
/var/folders/d1/846xqcps64v4wybnmd7kk8540000gn/T//ccjOvayb.s:49     .text.MAL_Erase:0000000000000000 $t
/var/folders/d1/846xqcps64v4wybnmd7kk8540000gn/T//ccjOvayb.s:54     .text.MAL_Erase:0000000000000000 MAL_Erase
/var/folders/d1/846xqcps64v4wybnmd7kk8540000gn/T//ccjOvayb.s:98     .text.MAL_Erase:0000000000000024 $d
                            *COM*:0000000000000004 pMAL_Erase
/var/folders/d1/846xqcps64v4wybnmd7kk8540000gn/T//ccjOvayb.s:105    .text.MAL_Write:0000000000000000 $t
/var/folders/d1/846xqcps64v4wybnmd7kk8540000gn/T//ccjOvayb.s:110    .text.MAL_Write:0000000000000000 MAL_Write
/var/folders/d1/846xqcps64v4wybnmd7kk8540000gn/T//ccjOvayb.s:152    .text.MAL_Write:0000000000000024 $d
                            *COM*:0000000000000004 pMAL_Write
/var/folders/d1/846xqcps64v4wybnmd7kk8540000gn/T//ccjOvayb.s:159    .text.MAL_Read:0000000000000000 $t
/var/folders/d1/846xqcps64v4wybnmd7kk8540000gn/T//ccjOvayb.s:164    .text.MAL_Read:0000000000000000 MAL_Read
/var/folders/d1/846xqcps64v4wybnmd7kk8540000gn/T//ccjOvayb.s:206    .text.MAL_Read:0000000000000024 $d
                            *COM*:0000000000000004 pMAL_Read
/var/folders/d1/846xqcps64v4wybnmd7kk8540000gn/T//ccjOvayb.s:213    .text.MAL_GetStatus:0000000000000000 $t
/var/folders/d1/846xqcps64v4wybnmd7kk8540000gn/T//ccjOvayb.s:218    .text.MAL_GetStatus:0000000000000000 MAL_GetStatus
/var/folders/d1/846xqcps64v4wybnmd7kk8540000gn/T//ccjOvayb.s:248    .text.MAL_GetStatus:0000000000000024 $d
                            *COM*:0000000000000400 MAL_Buffer
                            *COM*:0000000000000004 pMAL_Init
/var/folders/d1/846xqcps64v4wybnmd7kk8540000gn/T//ccjOvayb.s:258    .rodata:0000000000000000 $d
/var/folders/d1/846xqcps64v4wybnmd7kk8540000gn/T//ccjOvayb.s:262    .rodata:0000000000000000 TimingTable
                     .debug_frame:0000000000000010 $d
                           .group:0000000000000000 wm4.1.94ea818a60f77b04fe5add16507b1dca
                           .group:0000000000000000 wm4.platform_config.h.13.8c69bc765aea669af9d5d2fdc1149177
                           .group:0000000000000000 wm4.stm32f10x.h.57.69ab29c83f735418a543aa508b559235
                           .group:0000000000000000 wm4.core_cm3.h.32.8e21fbd14bb96c2b40e026c4d2c8fe1f
                           .group:0000000000000000 wm4.newlib.h.8.a9901dc52d1357e3e94003403d43f8b5
                           .group:0000000000000000 wm4.features.h.22.b72b3baab2bb2eab3661375590100b6b
                           .group:0000000000000000 wm4.config.h.193.5fb8ef056cdff92dec3dee9552839d8c
                           .group:0000000000000000 wm4._ansi.h.23.b5bb84d7ba97d82b5b1dc1826a7ae811
                           .group:0000000000000000 wm4.stdint.h.20.54ad762faa59e3c05491630641c8d8bf
                           .group:0000000000000000 wm4.core_cmInstr.h.25.d8165482ef3061013a2fc83e2d85f3d9
                           .group:0000000000000000 wm4.core_cm3.h.129.e08b7204181ea22e6a9fa84cb9ad0924
                           .group:0000000000000000 wm4.stm32f10x.h.532.91bd57525f6c583f00129a351847d405
                           .group:0000000000000000 wm4.stm32f10x_adc.h.89.9f2b285fa0070185d48a05b61a05798c
                           .group:0000000000000000 wm4.stm32f10x_bkp.h.31.74a586c036c8ee5d9205c6728cc8d6ab
                           .group:0000000000000000 wm4.stm32f10x_can.h.31.b14273b95de79d8fbb020ba042473fb1
                           .group:0000000000000000 wm4.stm32f10x_dac.h.31.116c27cadc3b4ee8aa44ed11b14b64ae
                           .group:0000000000000000 wm4.stm32f10x_dbgmcu.h.31.45f176e9b7a15051b8c69cb2700c78b8
                           .group:0000000000000000 wm4.stm32f10x_dma.h.31.ef16218235edc52b414c0353f44b4bf0
                           .group:0000000000000000 wm4.stm32f10x_exti.h.31.b25bcb4f1a2daad39d2d7dfa4e901646
                           .group:0000000000000000 wm4.stm32f10x_flash.h.31.0203bc95b65c5396b67991e07a675efb
                           .group:0000000000000000 wm4.stm32f10x_fsmc.h.31.a761d459aa046c2769a99b93e8763ba0
                           .group:0000000000000000 wm4.stm32f10x_gpio.h.31.0a32659dbac1fc1055c7cbdc248963be
                           .group:0000000000000000 wm4.stm32f10x_i2c.h.31.93d7dc2d477856f119d957730d4c6f1c
                           .group:0000000000000000 wm4.stm32f10x_iwdg.h.31.959ae9b7e1d603f1e5ae6468c0fc1624
                           .group:0000000000000000 wm4.stm32f10x_pwr.h.31.9168b6921e0cf03b467c7ed90861c701
                           .group:0000000000000000 wm4.stm32f10x_rcc.h.31.2ee3219a25ef4ced658f2fe9d8cd94aa
                           .group:0000000000000000 wm4.stm32f10x_rtc.h.31.00ba78fc0dbb06b6e6783a1e7fccf5a0
                           .group:0000000000000000 wm4.stm32f10x_sdio.h.31.37dab89d08b2364a3dfaace444dec7c3
                           .group:0000000000000000 wm4.stm32f10x_spi.h.31.d2f6e4626887cabe8c98f3a185590a36
                           .group:0000000000000000 wm4.stm32f10x_tim.h.31.6c06f7f26e0864f9cd59597f46ca2c7c
                           .group:0000000000000000 wm4.stm32f10x_usart.h.31.28d75d6af05cefbbfa00cf30a7c8a335
                           .group:0000000000000000 wm4.stm32f10x_wwdg.h.31.4504f930b88ade4f56d1e3f2a11c098b
                           .group:0000000000000000 wm4.misc.h.31.a89fba2040036f6f8c835a78a213e0cd
                           .group:0000000000000000 wm4.stm32f10x.h.8356.9fd2fa84655112ac7dfc5c88beeb383d
                           .group:0000000000000000 wm4.platform_config.h.39.39a4b3112cd0eabe7f19b3ecab0f4d96
                           .group:0000000000000000 wm4.sst25vf_spi.h.20.51b3171b29f6f7af7f6cc75ed7f465bf
                           .group:0000000000000000 wm4.hw_config.h.41.83f4dd94a29b2227d9beb55b68615b4b
                           .group:0000000000000000 wm4.usb_desc.h.13.f4564814ac51230da7429e2f3b1463ed
                           .group:0000000000000000 wm4.dfu_mal.h.22.8960227c42ae735d4e74722cbac11c6c
                           .group:0000000000000000 wm4.usb_conf.h.13.2fc8b739597ce501ebf3c1632025270a
                           .group:0000000000000000 wm4.usb_regs.h.31.d9533108f8ac5724467880baa9cb0f26
                           .group:0000000000000000 wm4.usb_def.h.30.73e1a84be93039018a594bacb815cb88
                           .group:0000000000000000 wm4.usb_core.h.31.114a1d0e1de4beb01afdcd243bde9471

UNDEFINED SYMBOLS
FLASH_If_Init
SPI_If_Init
FLASH_If_Erase
SPI_If_Erase
FLASH_If_Write
SPI_If_Write
FLASH_If_Read
SPI_If_Read
