   1              		.syntax unified
   2              		.cpu cortex-m3
   3              		.fpu softvfp
   4              		.eabi_attribute 20, 1
   5              		.eabi_attribute 21, 1
   6              		.eabi_attribute 23, 3
   7              		.eabi_attribute 24, 1
   8              		.eabi_attribute 25, 1
   9              		.eabi_attribute 26, 1
  10              		.eabi_attribute 30, 4
  11              		.eabi_attribute 34, 1
  12              		.eabi_attribute 18, 4
  13              		.thumb
  14              		.file	"usb_prop.c"
  15              		.text
  16              	.Ltext0:
  17              		.cfi_sections	.debug_frame
  18              		.section	.text.DFU_SetConfiguration,"ax",%progbits
  19              		.align	1
  20              		.global	DFU_SetConfiguration
  21              		.thumb
  22              		.thumb_func
  24              	DFU_SetConfiguration:
  25              	.LFB58:
  26              		.file 1 "../src/usb_prop.c"
   1:../src/usb_prop.c **** /**
   2:../src/usb_prop.c ****   ******************************************************************************
   3:../src/usb_prop.c ****   * @file    usb_prop.c
   4:../src/usb_prop.c ****   * @author  Spark Application Team
   5:../src/usb_prop.c ****   * @version V1.0.0
   6:../src/usb_prop.c ****   * @date    30-April-2013
   7:../src/usb_prop.c ****   * @brief   All processings related to DFU
   8:../src/usb_prop.c ****   ******************************************************************************
   9:../src/usb_prop.c ****   */
  10:../src/usb_prop.c **** 
  11:../src/usb_prop.c **** /* Includes ------------------------------------------------------------------*/
  12:../src/usb_prop.c **** #include "usb_lib.h"
  13:../src/usb_prop.c **** #include "hw_config.h"
  14:../src/usb_prop.c **** #include "usb_conf.h"
  15:../src/usb_prop.c **** #include "usb_prop.h"
  16:../src/usb_prop.c **** #include "usb_desc.h"
  17:../src/usb_prop.c **** #include "usb_pwr.h"
  18:../src/usb_prop.c **** #include "dfu_mal.h"
  19:../src/usb_prop.c **** 
  20:../src/usb_prop.c **** /* Private typedef -----------------------------------------------------------*/
  21:../src/usb_prop.c **** /* Private define ------------------------------------------------------------*/
  22:../src/usb_prop.c **** /* Private macro -------------------------------------------------------------*/
  23:../src/usb_prop.c **** /* Private variables ---------------------------------------------------------*/
  24:../src/usb_prop.c **** uint32_t wBlockNum = 0, wlength = 0;
  25:../src/usb_prop.c **** uint32_t Manifest_State = Manifest_complete;
  26:../src/usb_prop.c **** uint32_t Pointer = DEFAULT_ADDRESS;  /* Base Address to Erase, Program or Read */
  27:../src/usb_prop.c **** 
  28:../src/usb_prop.c **** DEVICE Device_Table =
  29:../src/usb_prop.c ****   {
  30:../src/usb_prop.c ****     EP_NUM,
  31:../src/usb_prop.c ****     1
  32:../src/usb_prop.c ****   };
  33:../src/usb_prop.c **** 
  34:../src/usb_prop.c **** DEVICE_PROP Device_Property =
  35:../src/usb_prop.c ****   {
  36:../src/usb_prop.c ****     DFU_init,
  37:../src/usb_prop.c ****     DFU_Reset,
  38:../src/usb_prop.c ****     DFU_Status_In,
  39:../src/usb_prop.c ****     DFU_Status_Out,
  40:../src/usb_prop.c ****     DFU_Data_Setup,
  41:../src/usb_prop.c ****     DFU_NoData_Setup,
  42:../src/usb_prop.c ****     DFU_Get_Interface_Setting,
  43:../src/usb_prop.c ****     DFU_GetDeviceDescriptor,
  44:../src/usb_prop.c ****     DFU_GetConfigDescriptor,
  45:../src/usb_prop.c ****     DFU_GetStringDescriptor,
  46:../src/usb_prop.c ****     0,                    /*DFU_EP0Buffer*/
  47:../src/usb_prop.c ****     bMaxPacketSize0       /*Max Packet size*/
  48:../src/usb_prop.c ****   };
  49:../src/usb_prop.c **** 
  50:../src/usb_prop.c **** USER_STANDARD_REQUESTS User_Standard_Requests =
  51:../src/usb_prop.c ****   {
  52:../src/usb_prop.c ****     DFU_GetConfiguration,
  53:../src/usb_prop.c ****     DFU_SetConfiguration,
  54:../src/usb_prop.c ****     DFU_GetInterface,
  55:../src/usb_prop.c ****     DFU_SetInterface,
  56:../src/usb_prop.c ****     DFU_GetStatus,
  57:../src/usb_prop.c ****     DFU_ClearFeature,
  58:../src/usb_prop.c ****     DFU_SetEndPointFeature,
  59:../src/usb_prop.c ****     DFU_SetDeviceFeature,
  60:../src/usb_prop.c ****     DFU_SetDeviceAddress
  61:../src/usb_prop.c ****   };
  62:../src/usb_prop.c **** 
  63:../src/usb_prop.c **** ONE_DESCRIPTOR Device_Descriptor =
  64:../src/usb_prop.c ****   {
  65:../src/usb_prop.c ****     (uint8_t*)DFU_DeviceDescriptor,
  66:../src/usb_prop.c ****     DFU_SIZ_DEVICE_DESC
  67:../src/usb_prop.c ****   };
  68:../src/usb_prop.c **** 
  69:../src/usb_prop.c **** ONE_DESCRIPTOR Config_Descriptor =
  70:../src/usb_prop.c ****   {
  71:../src/usb_prop.c ****     (uint8_t*)DFU_ConfigDescriptor,
  72:../src/usb_prop.c ****     DFU_SIZ_CONFIG_DESC
  73:../src/usb_prop.c ****   };
  74:../src/usb_prop.c **** 
  75:../src/usb_prop.c **** #ifdef SPARK_SFLASH_ENABLE
  76:../src/usb_prop.c ****  ONE_DESCRIPTOR DFU_String_Descriptor[6] =
  77:../src/usb_prop.c **** #else
  78:../src/usb_prop.c ****  ONE_DESCRIPTOR DFU_String_Descriptor[5] =
  79:../src/usb_prop.c **** #endif
  80:../src/usb_prop.c ****   {
  81:../src/usb_prop.c ****     {       (uint8_t*)DFU_StringLangId,          DFU_SIZ_STRING_LANGID       },
  82:../src/usb_prop.c ****     {       (uint8_t*)DFU_StringVendor,          DFU_SIZ_STRING_VENDOR       },
  83:../src/usb_prop.c ****     {       (uint8_t*)DFU_StringProduct,         DFU_SIZ_STRING_PRODUCT      },
  84:../src/usb_prop.c ****     {       (uint8_t*)DFU_StringSerial,          DFU_SIZ_STRING_SERIAL       },
  85:../src/usb_prop.c ****     {       (uint8_t*)DFU_StringInterface0,      DFU_SIZ_STRING_INTERFACE0   }
  86:../src/usb_prop.c **** #ifdef SPARK_SFLASH_ENABLE
  87:../src/usb_prop.c ****     ,
  88:../src/usb_prop.c ****     {       (uint8_t*)DFU_StringInterface1,      DFU_SIZ_STRING_INTERFACE1   }
  89:../src/usb_prop.c **** #endif
  90:../src/usb_prop.c ****   };
  91:../src/usb_prop.c **** 
  92:../src/usb_prop.c **** /* Extern variables ----------------------------------------------------------*/
  93:../src/usb_prop.c **** extern  uint8_t DeviceState ;
  94:../src/usb_prop.c **** extern  uint8_t DeviceStatus[6];
  95:../src/usb_prop.c **** 
  96:../src/usb_prop.c **** /* Private function prototypes -----------------------------------------------*/
  97:../src/usb_prop.c **** /* Private functions ---------------------------------------------------------*/
  98:../src/usb_prop.c **** 
  99:../src/usb_prop.c **** /*******************************************************************************
 100:../src/usb_prop.c **** * Function Name  : DFU_init.
 101:../src/usb_prop.c **** * Description    : DFU init routine.
 102:../src/usb_prop.c **** * Input          : None.
 103:../src/usb_prop.c **** * Output         : None.
 104:../src/usb_prop.c **** * Return         : None.
 105:../src/usb_prop.c **** *******************************************************************************/
 106:../src/usb_prop.c **** void DFU_init(void)
 107:../src/usb_prop.c **** {
 108:../src/usb_prop.c ****   DEVICE_INFO *pInfo = &Device_Info;
 109:../src/usb_prop.c **** 
 110:../src/usb_prop.c ****   /* Update the serial number string descriptor with the data from the unique ID*/
 111:../src/usb_prop.c ****   Get_SerialNum();
 112:../src/usb_prop.c **** 
 113:../src/usb_prop.c ****   pInfo->Current_Configuration = 0;
 114:../src/usb_prop.c **** 
 115:../src/usb_prop.c ****   /* Connect the device */
 116:../src/usb_prop.c ****   PowerOn();
 117:../src/usb_prop.c **** 
 118:../src/usb_prop.c ****   /* Perform basic device initialization operations */
 119:../src/usb_prop.c ****   USB_SIL_Init();
 120:../src/usb_prop.c **** 
 121:../src/usb_prop.c ****   /* Enable USB interrupts */
 122:../src/usb_prop.c ****   USB_Interrupts_Config();
 123:../src/usb_prop.c **** 
 124:../src/usb_prop.c ****   bDeviceState = UNCONNECTED;
 125:../src/usb_prop.c **** }
 126:../src/usb_prop.c **** 
 127:../src/usb_prop.c **** /*******************************************************************************
 128:../src/usb_prop.c **** * Function Name  : DFU_Reset.
 129:../src/usb_prop.c **** * Description    : DFU reset routine
 130:../src/usb_prop.c **** * Input          : None.
 131:../src/usb_prop.c **** * Output         : None.
 132:../src/usb_prop.c **** * Return         : None.
 133:../src/usb_prop.c **** *******************************************************************************/
 134:../src/usb_prop.c **** void DFU_Reset(void)
 135:../src/usb_prop.c **** {
 136:../src/usb_prop.c ****   /* Set DFU_DEVICE as not configured */
 137:../src/usb_prop.c ****   Device_Info.Current_Configuration = 0;
 138:../src/usb_prop.c **** 
 139:../src/usb_prop.c ****   /* Current Feature initialization */
 140:../src/usb_prop.c ****   pInformation->Current_Feature = DFU_ConfigDescriptor[7];
 141:../src/usb_prop.c **** 
 142:../src/usb_prop.c ****   _SetBTABLE(BTABLE_ADDRESS);
 143:../src/usb_prop.c **** 
 144:../src/usb_prop.c ****   /* Initialize Endpoint 0 */
 145:../src/usb_prop.c ****   _SetEPType(ENDP0, EP_CONTROL);
 146:../src/usb_prop.c ****   _SetEPTxStatus(ENDP0, EP_TX_NAK);
 147:../src/usb_prop.c ****   _SetEPRxAddr(ENDP0, ENDP0_RXADDR);
 148:../src/usb_prop.c ****   SetEPRxCount(ENDP0, Device_Property.MaxPacketSize);
 149:../src/usb_prop.c ****   _SetEPTxAddr(ENDP0, ENDP0_TXADDR);
 150:../src/usb_prop.c ****   SetEPTxCount(ENDP0, Device_Property.MaxPacketSize);
 151:../src/usb_prop.c ****   Clear_Status_Out(ENDP0);
 152:../src/usb_prop.c ****   SetEPRxValid(ENDP0);
 153:../src/usb_prop.c **** 
 154:../src/usb_prop.c ****   /* Set this device to response on default address */
 155:../src/usb_prop.c ****   SetDeviceAddress(0);
 156:../src/usb_prop.c **** 
 157:../src/usb_prop.c ****   /* Set the new control state of the device to Attached */
 158:../src/usb_prop.c ****   bDeviceState = ATTACHED;
 159:../src/usb_prop.c **** }
 160:../src/usb_prop.c **** /*******************************************************************************
 161:../src/usb_prop.c **** * Function Name  : DFU_SetConfiguration.
 162:../src/usb_prop.c **** * Description    : Update the device state to configured.
 163:../src/usb_prop.c **** * Input          : None.
 164:../src/usb_prop.c **** * Output         : None.
 165:../src/usb_prop.c **** * Return         : None.
 166:../src/usb_prop.c **** *******************************************************************************/
 167:../src/usb_prop.c **** void DFU_SetConfiguration(void)
 168:../src/usb_prop.c **** {
  27              		.loc 1 168 0
  28              		.cfi_startproc
  29              		@ args = 0, pretend = 0, frame = 0
  30              		@ frame_needed = 0, uses_anonymous_args = 0
  31              		@ link register save eliminated.
  32              	.LVL0:
 169:../src/usb_prop.c ****   DEVICE_INFO *pInfo = &Device_Info;
 170:../src/usb_prop.c **** 
 171:../src/usb_prop.c ****   if (pInfo->Current_Configuration != 0)
  33              		.loc 1 171 0
  34 0000 034B     		ldr	r3, .L7
  35 0002 987A     		ldrb	r0, [r3, #10]	@ zero_extendqisi2
  36 0004 10B1     		cbz	r0, .L1
 172:../src/usb_prop.c ****   {
 173:../src/usb_prop.c ****     /* Device configured */
 174:../src/usb_prop.c ****     bDeviceState = CONFIGURED;
  37              		.loc 1 174 0
  38 0006 0349     		ldr	r1, .L7+4
  39 0008 0522     		movs	r2, #5
  40 000a 0A60     		str	r2, [r1, #0]
  41              	.L1:
  42 000c 7047     		bx	lr
  43              	.L8:
  44 000e 00BF     		.align	2
  45              	.L7:
  46 0010 00000000 		.word	Device_Info
  47 0014 00000000 		.word	bDeviceState
  48              		.cfi_endproc
  49              	.LFE58:
  51              		.section	.text.DFU_SetDeviceAddress,"ax",%progbits
  52              		.align	1
  53              		.global	DFU_SetDeviceAddress
  54              		.thumb
  55              		.thumb_func
  57              	DFU_SetDeviceAddress:
  58              	.LFB59:
 175:../src/usb_prop.c ****   }
 176:../src/usb_prop.c **** }
 177:../src/usb_prop.c **** /*******************************************************************************
 178:../src/usb_prop.c **** * Function Name  : DFU_SetConfiguration.
 179:../src/usb_prop.c **** * Description    : Update the device state to addressed.
 180:../src/usb_prop.c **** * Input          : None.
 181:../src/usb_prop.c **** * Output         : None.
 182:../src/usb_prop.c **** * Return         : None.
 183:../src/usb_prop.c **** *******************************************************************************/
 184:../src/usb_prop.c **** void DFU_SetDeviceAddress (void)
 185:../src/usb_prop.c **** {
  59              		.loc 1 185 0
  60              		.cfi_startproc
  61              		@ args = 0, pretend = 0, frame = 0
  62              		@ frame_needed = 0, uses_anonymous_args = 0
  63              		@ link register save eliminated.
 186:../src/usb_prop.c ****   bDeviceState = ADDRESSED;
  64              		.loc 1 186 0
  65 0000 014B     		ldr	r3, .L10
  66 0002 0422     		movs	r2, #4
  67 0004 1A60     		str	r2, [r3, #0]
  68 0006 7047     		bx	lr
  69              	.L11:
  70              		.align	2
  71              	.L10:
  72 0008 00000000 		.word	bDeviceState
  73              		.cfi_endproc
  74              	.LFE59:
  76              		.section	.text.DFU_Status_In,"ax",%progbits
  77              		.align	1
  78              		.global	DFU_Status_In
  79              		.thumb
  80              		.thumb_func
  82              	DFU_Status_In:
  83              	.LFB60:
 187:../src/usb_prop.c **** }
 188:../src/usb_prop.c **** /*******************************************************************************
 189:../src/usb_prop.c **** * Function Name  : DFU_Status_In.
 190:../src/usb_prop.c **** * Description    : DFU status IN routine.
 191:../src/usb_prop.c **** * Input          : None.
 192:../src/usb_prop.c **** * Output         : None.
 193:../src/usb_prop.c **** * Return         : None.
 194:../src/usb_prop.c **** *******************************************************************************/
 195:../src/usb_prop.c **** void DFU_Status_In(void)
 196:../src/usb_prop.c **** {}
  84              		.loc 1 196 0
  85              		.cfi_startproc
  86              		@ args = 0, pretend = 0, frame = 0
  87              		@ frame_needed = 0, uses_anonymous_args = 0
  88              		@ link register save eliminated.
  89 0000 7047     		bx	lr
  90              		.cfi_endproc
  91              	.LFE60:
  93              		.section	.text.DFU_Data_Setup,"ax",%progbits
  94              		.align	1
  95              		.global	DFU_Data_Setup
  96              		.thumb
  97              		.thumb_func
  99              	DFU_Data_Setup:
 100              	.LFB62:
 197:../src/usb_prop.c **** 
 198:../src/usb_prop.c **** /*******************************************************************************
 199:../src/usb_prop.c **** * Function Name  : DFU_Status_Out.
 200:../src/usb_prop.c **** * Description    : DFU status OUT routine.
 201:../src/usb_prop.c **** * Input          : None.
 202:../src/usb_prop.c **** * Output         : None.
 203:../src/usb_prop.c **** * Return         : None.
 204:../src/usb_prop.c **** *******************************************************************************/
 205:../src/usb_prop.c **** void DFU_Status_Out (void)
 206:../src/usb_prop.c **** {
 207:../src/usb_prop.c ****   DEVICE_INFO *pInfo = &Device_Info;
 208:../src/usb_prop.c ****   uint32_t Addr;
 209:../src/usb_prop.c **** 
 210:../src/usb_prop.c ****   if (pInfo->USBbRequest == DFU_GETSTATUS)
 211:../src/usb_prop.c ****   {
 212:../src/usb_prop.c ****     if (DeviceState == STATE_dfuDNBUSY)
 213:../src/usb_prop.c ****     {
 214:../src/usb_prop.c ****       if (wBlockNum == 0)   /* Decode the Special Command*/
 215:../src/usb_prop.c ****       {
 216:../src/usb_prop.c ****         if ((MAL_Buffer[0] ==  CMD_GETCOMMANDS) && (wlength == 1))
 217:../src/usb_prop.c ****         {}
 218:../src/usb_prop.c ****         else if  (( MAL_Buffer[0] ==  CMD_SETADDRESSPOINTER ) && (wlength == 5))
 219:../src/usb_prop.c ****         {
 220:../src/usb_prop.c ****           Pointer  = MAL_Buffer[1];
 221:../src/usb_prop.c ****           Pointer += MAL_Buffer[2] << 8;
 222:../src/usb_prop.c ****           Pointer += MAL_Buffer[3] << 16;
 223:../src/usb_prop.c ****           Pointer += MAL_Buffer[4] << 24;
 224:../src/usb_prop.c ****         }
 225:../src/usb_prop.c ****         else if (( MAL_Buffer[0] ==  CMD_ERASE ) && (wlength == 5))
 226:../src/usb_prop.c ****         {
 227:../src/usb_prop.c ****           Pointer  = MAL_Buffer[1];
 228:../src/usb_prop.c ****           Pointer += MAL_Buffer[2] << 8;
 229:../src/usb_prop.c ****           Pointer += MAL_Buffer[3] << 16;
 230:../src/usb_prop.c ****           Pointer += MAL_Buffer[4] << 24;
 231:../src/usb_prop.c ****           MAL_Erase(Pointer);
 232:../src/usb_prop.c ****         }
 233:../src/usb_prop.c ****       }
 234:../src/usb_prop.c **** 
 235:../src/usb_prop.c ****       else if (wBlockNum > 1)  // Download Command
 236:../src/usb_prop.c ****       {
 237:../src/usb_prop.c ****         Addr = ((wBlockNum - 2) * wTransferSize) + Pointer;
 238:../src/usb_prop.c ****         MAL_Write(Addr, wlength);
 239:../src/usb_prop.c ****       }
 240:../src/usb_prop.c ****       wlength = 0;
 241:../src/usb_prop.c ****       wBlockNum = 0;
 242:../src/usb_prop.c **** 
 243:../src/usb_prop.c ****       DeviceState =  STATE_dfuDNLOAD_SYNC;
 244:../src/usb_prop.c ****       DeviceStatus[4] = DeviceState;
 245:../src/usb_prop.c ****       DeviceStatus[1] = 0;
 246:../src/usb_prop.c ****       DeviceStatus[2] = 0;
 247:../src/usb_prop.c ****       DeviceStatus[3] = 0;
 248:../src/usb_prop.c ****       return;
 249:../src/usb_prop.c ****     }
 250:../src/usb_prop.c ****     else if (DeviceState == STATE_dfuMANIFEST)/* Manifestation in progress*/
 251:../src/usb_prop.c ****     {
 252:../src/usb_prop.c ****       DFU_write_crc();
 253:../src/usb_prop.c ****       return;
 254:../src/usb_prop.c ****     }
 255:../src/usb_prop.c ****   }
 256:../src/usb_prop.c ****   return;
 257:../src/usb_prop.c **** }
 258:../src/usb_prop.c **** 
 259:../src/usb_prop.c **** /*******************************************************************************
 260:../src/usb_prop.c **** * Function Name  : DFU_Data_Setup.
 261:../src/usb_prop.c **** * Description    : Handle the data class specific requests.
 262:../src/usb_prop.c **** * Input          : RequestNb.
 263:../src/usb_prop.c **** * Output         : None.
 264:../src/usb_prop.c **** * Return         : USB_SUCCESS or USB_UNSUPPORT.
 265:../src/usb_prop.c **** *******************************************************************************/
 266:../src/usb_prop.c **** RESULT DFU_Data_Setup(uint8_t RequestNo)
 267:../src/usb_prop.c **** {
 101              		.loc 1 267 0
 102              		.cfi_startproc
 103              		@ args = 0, pretend = 0, frame = 0
 104              		@ frame_needed = 0, uses_anonymous_args = 0
 105              	.LVL1:
 106              		.loc 1 267 0
 107 0000 10B5     		push	{r4, lr}
 108              	.LCFI0:
 109              		.cfi_def_cfa_offset 8
 110              		.cfi_offset 4, -8
 111              		.cfi_offset 14, -4
 268:../src/usb_prop.c ****   uint8_t *(*CopyRoutine)(uint16_t);
 269:../src/usb_prop.c ****   CopyRoutine = NULL;
 270:../src/usb_prop.c **** 
 271:../src/usb_prop.c ****   if (Type_Recipient == (CLASS_REQUEST | INTERFACE_RECIPIENT))
 112              		.loc 1 271 0
 113 0002 174B     		ldr	r3, .L28
 114 0004 1A68     		ldr	r2, [r3, #0]
 115 0006 1178     		ldrb	r1, [r2, #0]	@ zero_extendqisi2
 116 0008 01F07F03 		and	r3, r1, #127
 117 000c 212B     		cmp	r3, #33
 118 000e 24D1     		bne	.L24
 272:../src/usb_prop.c ****   {
 273:../src/usb_prop.c ****     if (RequestNo == DFU_UPLOAD && (DeviceState == STATE_dfuIDLE
 119              		.loc 1 273 0
 120 0010 0228     		cmp	r0, #2
 121 0012 06D1     		bne	.L15
 122              		.loc 1 273 0 is_stmt 0 discriminator 1
 123 0014 1349     		ldr	r1, .L28+4
 124 0016 0B78     		ldrb	r3, [r1, #0]	@ zero_extendqisi2
 125 0018 022B     		cmp	r3, #2
 126 001a 14D0     		beq	.L21
 274:../src/usb_prop.c ****                                     || DeviceState == STATE_dfuUPLOAD_IDLE ))
 127              		.loc 1 274 0 is_stmt 1
 128 001c 092B     		cmp	r3, #9
 129 001e 12D0     		beq	.L21
 130 0020 10BD     		pop	{r4, pc}
 131              	.L15:
 275:../src/usb_prop.c ****     {
 276:../src/usb_prop.c ****       CopyRoutine = UPLOAD;
 277:../src/usb_prop.c ****       //CopyRoutine = NULL;   //Disable UPLOAD process
 278:../src/usb_prop.c ****     }
 279:../src/usb_prop.c ****     else if (RequestNo == DFU_DNLOAD && (DeviceState == STATE_dfuIDLE
 132              		.loc 1 279 0
 133 0022 0128     		cmp	r0, #1
 134 0024 09D1     		bne	.L17
 135              		.loc 1 279 0 is_stmt 0 discriminator 1
 136 0026 0F48     		ldr	r0, .L28+4
 137              	.LVL2:
 138 0028 0378     		ldrb	r3, [r0, #0]	@ zero_extendqisi2
 139 002a 022B     		cmp	r3, #2
 140 002c 01D0     		beq	.L18
 280:../src/usb_prop.c ****                                          || DeviceState == STATE_dfuDNLOAD_IDLE))
 141              		.loc 1 280 0 is_stmt 1
 142 002e 052B     		cmp	r3, #5
 143 0030 13D1     		bne	.L24
 144              	.L18:
 281:../src/usb_prop.c ****     {
 282:../src/usb_prop.c ****       DeviceState = STATE_dfuDNLOAD_SYNC;
 145              		.loc 1 282 0
 146 0032 0324     		movs	r4, #3
 147 0034 0470     		strb	r4, [r0, #0]
 148              	.LVL3:
 283:../src/usb_prop.c ****       CopyRoutine = DNLOAD;
 149              		.loc 1 283 0
 150 0036 0C49     		ldr	r1, .L28+8
 151 0038 08E0     		b	.L16
 152              	.LVL4:
 153              	.L17:
 284:../src/usb_prop.c ****     }
 285:../src/usb_prop.c ****     else if (RequestNo == DFU_GETSTATE)
 154              		.loc 1 285 0
 155 003a 0528     		cmp	r0, #5
 156 003c 05D0     		beq	.L23
 286:../src/usb_prop.c ****     {
 287:../src/usb_prop.c ****       CopyRoutine = GETSTATE;
 288:../src/usb_prop.c ****     }
 289:../src/usb_prop.c ****     else if (RequestNo == DFU_GETSTATUS)
 157              		.loc 1 289 0
 158 003e 0328     		cmp	r0, #3
 159 0040 0BD1     		bne	.L24
 290:../src/usb_prop.c ****     {
 291:../src/usb_prop.c ****       CopyRoutine = GETSTATUS;
 160              		.loc 1 291 0
 161 0042 0A49     		ldr	r1, .L28+12
 162 0044 02E0     		b	.L16
 163              	.L21:
 276:../src/usb_prop.c ****       CopyRoutine = UPLOAD;
 164              		.loc 1 276 0
 165 0046 0A49     		ldr	r1, .L28+16
 166 0048 00E0     		b	.L16
 167              	.L23:
 287:../src/usb_prop.c ****       CopyRoutine = GETSTATE;
 168              		.loc 1 287 0
 169 004a 0A49     		ldr	r1, .L28+20
 170              	.LVL5:
 171              	.L16:
 292:../src/usb_prop.c ****     }
 293:../src/usb_prop.c ****     else
 294:../src/usb_prop.c ****     {
 295:../src/usb_prop.c ****       return USB_UNSUPPORT;
 296:../src/usb_prop.c ****     }
 297:../src/usb_prop.c ****   }
 298:../src/usb_prop.c ****   else
 299:../src/usb_prop.c ****   {
 300:../src/usb_prop.c ****     return USB_UNSUPPORT;
 301:../src/usb_prop.c ****   }
 302:../src/usb_prop.c **** 
 303:../src/usb_prop.c ****   if (CopyRoutine == NULL)
 304:../src/usb_prop.c ****   {
 305:../src/usb_prop.c ****     return USB_UNSUPPORT;
 306:../src/usb_prop.c ****   }
 307:../src/usb_prop.c **** 
 308:../src/usb_prop.c ****   pInformation->Ctrl_Info.CopyData = CopyRoutine;
 309:../src/usb_prop.c ****   pInformation->Ctrl_Info.Usb_wOffset = 0;
 172              		.loc 1 309 0
 173 004c 0024     		movs	r4, #0
 310:../src/usb_prop.c ****   (*CopyRoutine)(0);
 174              		.loc 1 310 0
 175 004e 2046     		mov	r0, r4
 308:../src/usb_prop.c ****   pInformation->Ctrl_Info.CopyData = CopyRoutine;
 176              		.loc 1 308 0
 177 0050 9161     		str	r1, [r2, #24]
 309:../src/usb_prop.c ****   pInformation->Ctrl_Info.Usb_wOffset = 0;
 178              		.loc 1 309 0
 179 0052 5482     		strh	r4, [r2, #18]	@ movhi
 180              		.loc 1 310 0
 181 0054 8847     		blx	r1
 182              	.LVL6:
 311:../src/usb_prop.c **** 
 312:../src/usb_prop.c ****   return USB_SUCCESS;
 183              		.loc 1 312 0
 184 0056 2046     		mov	r0, r4
 185 0058 10BD     		pop	{r4, pc}
 186              	.LVL7:
 187              	.L24:
 300:../src/usb_prop.c ****     return USB_UNSUPPORT;
 188              		.loc 1 300 0
 189 005a 0220     		movs	r0, #2
 313:../src/usb_prop.c **** }
 190              		.loc 1 313 0
 191 005c 10BD     		pop	{r4, pc}
 192              	.L29:
 193 005e 00BF     		.align	2
 194              	.L28:
 195 0060 00000000 		.word	pInformation
 196 0064 00000000 		.word	DeviceState
 197 0068 00000000 		.word	DNLOAD
 198 006c 00000000 		.word	GETSTATUS
 199 0070 00000000 		.word	UPLOAD
 200 0074 00000000 		.word	GETSTATE
 201              		.cfi_endproc
 202              	.LFE62:
 204              		.section	.text.DFU_Get_Interface_Setting,"ax",%progbits
 205              		.align	1
 206              		.global	DFU_Get_Interface_Setting
 207              		.thumb
 208              		.thumb_func
 210              	DFU_Get_Interface_Setting:
 211              	.LFB67:
 314:../src/usb_prop.c **** 
 315:../src/usb_prop.c **** /*******************************************************************************
 316:../src/usb_prop.c **** * Function Name  : DFU_NoData_Setup.
 317:../src/usb_prop.c **** * Description    : Handle the No data class specific requests.
 318:../src/usb_prop.c **** * Input          : Request Nb.
 319:../src/usb_prop.c **** * Output         : None.
 320:../src/usb_prop.c **** * Return         : USB_SUCCESS or USB_UNSUPPORT.
 321:../src/usb_prop.c **** *******************************************************************************/
 322:../src/usb_prop.c **** RESULT DFU_NoData_Setup(uint8_t RequestNo)
 323:../src/usb_prop.c **** {
 324:../src/usb_prop.c ****   if (Type_Recipient == (CLASS_REQUEST | INTERFACE_RECIPIENT))
 325:../src/usb_prop.c ****   {
 326:../src/usb_prop.c ****     /*DFU_NDLOAD*/
 327:../src/usb_prop.c ****     if (RequestNo == DFU_DNLOAD)
 328:../src/usb_prop.c ****     {
 329:../src/usb_prop.c ****       /* End of DNLOAD operation*/
 330:../src/usb_prop.c ****       if (DeviceState == STATE_dfuDNLOAD_IDLE || DeviceState == STATE_dfuIDLE )
 331:../src/usb_prop.c ****       {
 332:../src/usb_prop.c ****         Manifest_State = Manifest_In_Progress;
 333:../src/usb_prop.c ****         DeviceState = STATE_dfuMANIFEST_SYNC;
 334:../src/usb_prop.c ****         DeviceStatus[1] = 0;
 335:../src/usb_prop.c ****         DeviceStatus[2] = 0;
 336:../src/usb_prop.c ****         DeviceStatus[3] = 0;
 337:../src/usb_prop.c ****         DeviceStatus[4] = DeviceState;
 338:../src/usb_prop.c ****         return USB_SUCCESS;
 339:../src/usb_prop.c ****       }
 340:../src/usb_prop.c ****     }
 341:../src/usb_prop.c ****     /*DFU_UPLOAD*/
 342:../src/usb_prop.c ****     else if (RequestNo == DFU_UPLOAD)
 343:../src/usb_prop.c ****     {
 344:../src/usb_prop.c ****       DeviceState = STATE_dfuIDLE;
 345:../src/usb_prop.c ****       DeviceStatus[1] = 0;
 346:../src/usb_prop.c ****       DeviceStatus[2] = 0;
 347:../src/usb_prop.c ****       DeviceStatus[3] = 0;
 348:../src/usb_prop.c ****       DeviceStatus[4] = DeviceState;
 349:../src/usb_prop.c ****       return USB_SUCCESS;
 350:../src/usb_prop.c ****     }
 351:../src/usb_prop.c **** 
 352:../src/usb_prop.c ****     /*DFU_CLRSTATUS*/
 353:../src/usb_prop.c ****     else if (RequestNo == DFU_CLRSTATUS)
 354:../src/usb_prop.c ****     {
 355:../src/usb_prop.c **** 
 356:../src/usb_prop.c ****       if (DeviceState == STATE_dfuERROR)
 357:../src/usb_prop.c ****       {
 358:../src/usb_prop.c ****         DeviceState = STATE_dfuIDLE;
 359:../src/usb_prop.c ****         DeviceStatus[0] = STATUS_OK;/*bStatus*/
 360:../src/usb_prop.c ****         DeviceStatus[1] = 0;
 361:../src/usb_prop.c ****         DeviceStatus[2] = 0;
 362:../src/usb_prop.c ****         DeviceStatus[3] = 0; /*bwPollTimeout=0ms*/
 363:../src/usb_prop.c ****         DeviceStatus[4] = DeviceState;/*bState*/
 364:../src/usb_prop.c ****         DeviceStatus[5] = 0;/*iString*/
 365:../src/usb_prop.c ****       }
 366:../src/usb_prop.c ****       else
 367:../src/usb_prop.c ****       {   /*State Error*/
 368:../src/usb_prop.c ****         DeviceState = STATE_dfuERROR;
 369:../src/usb_prop.c ****         DeviceStatus[0] = STATUS_ERRUNKNOWN;/*bStatus*/
 370:../src/usb_prop.c ****         DeviceStatus[1] = 0;
 371:../src/usb_prop.c ****         DeviceStatus[2] = 0;
 372:../src/usb_prop.c ****         DeviceStatus[3] = 0; /*bwPollTimeout=0ms*/
 373:../src/usb_prop.c ****         DeviceStatus[4] = DeviceState;/*bState*/
 374:../src/usb_prop.c ****         DeviceStatus[5] = 0;/*iString*/
 375:../src/usb_prop.c ****       }
 376:../src/usb_prop.c ****       return USB_SUCCESS;
 377:../src/usb_prop.c ****     }
 378:../src/usb_prop.c ****     /*DFU_ABORT*/
 379:../src/usb_prop.c ****     else if (RequestNo == DFU_ABORT)
 380:../src/usb_prop.c ****     {
 381:../src/usb_prop.c ****       if (DeviceState == STATE_dfuIDLE || DeviceState == STATE_dfuDNLOAD_SYNC
 382:../src/usb_prop.c ****           || DeviceState == STATE_dfuDNLOAD_IDLE || DeviceState == STATE_dfuMANIFEST_SYNC
 383:../src/usb_prop.c ****           || DeviceState == STATE_dfuUPLOAD_IDLE )
 384:../src/usb_prop.c ****       {
 385:../src/usb_prop.c ****         DeviceState = STATE_dfuIDLE;
 386:../src/usb_prop.c ****         DeviceStatus[0] = STATUS_OK;
 387:../src/usb_prop.c ****         DeviceStatus[1] = 0;
 388:../src/usb_prop.c ****         DeviceStatus[2] = 0;
 389:../src/usb_prop.c ****         DeviceStatus[3] = 0; /*bwPollTimeout=0ms*/
 390:../src/usb_prop.c ****         DeviceStatus[4] = DeviceState;
 391:../src/usb_prop.c ****         DeviceStatus[5] = 0; /*iString*/
 392:../src/usb_prop.c ****         wBlockNum = 0;
 393:../src/usb_prop.c ****         wlength = 0;
 394:../src/usb_prop.c ****       }
 395:../src/usb_prop.c ****       return USB_SUCCESS;
 396:../src/usb_prop.c ****     }
 397:../src/usb_prop.c ****   }
 398:../src/usb_prop.c **** 
 399:../src/usb_prop.c **** 
 400:../src/usb_prop.c ****   return USB_UNSUPPORT;
 401:../src/usb_prop.c **** 
 402:../src/usb_prop.c **** } /* End of DFU_NoData_Setup */
 403:../src/usb_prop.c **** 
 404:../src/usb_prop.c **** /*******************************************************************************
 405:../src/usb_prop.c **** * Function Name  : DFU_GetDeviceDescriptor.
 406:../src/usb_prop.c **** * Description    : Gets the device descriptor.
 407:../src/usb_prop.c **** * Input          : Length.
 408:../src/usb_prop.c **** * Output         : None.
 409:../src/usb_prop.c **** * Return         : The address of the device descriptor.
 410:../src/usb_prop.c **** *******************************************************************************/
 411:../src/usb_prop.c **** uint8_t *DFU_GetDeviceDescriptor(uint16_t Length)
 412:../src/usb_prop.c **** {
 413:../src/usb_prop.c ****   return Standard_GetDescriptorData(Length, &Device_Descriptor);
 414:../src/usb_prop.c **** }
 415:../src/usb_prop.c **** 
 416:../src/usb_prop.c **** /*******************************************************************************
 417:../src/usb_prop.c **** * Function Name  : DFU_GetConfigDescriptor.
 418:../src/usb_prop.c **** * Description    : Gets the configuration descriptor.
 419:../src/usb_prop.c **** * Input          : Length.
 420:../src/usb_prop.c **** * Output         : None.
 421:../src/usb_prop.c **** * Return         : The address of the configuration descriptor.
 422:../src/usb_prop.c **** *******************************************************************************/
 423:../src/usb_prop.c **** uint8_t *DFU_GetConfigDescriptor(uint16_t Length)
 424:../src/usb_prop.c **** {
 425:../src/usb_prop.c ****   return Standard_GetDescriptorData (Length, &Config_Descriptor);
 426:../src/usb_prop.c **** }
 427:../src/usb_prop.c **** 
 428:../src/usb_prop.c **** /*******************************************************************************
 429:../src/usb_prop.c **** * Function Name  : DFU_GetStringDescriptor.
 430:../src/usb_prop.c **** * Description    : Gets the string descriptors according to the needed index.
 431:../src/usb_prop.c **** * Input          : Length.
 432:../src/usb_prop.c **** * Output         : None.
 433:../src/usb_prop.c **** * Return         : The address of the string descriptors.
 434:../src/usb_prop.c **** *******************************************************************************/
 435:../src/usb_prop.c **** uint8_t *DFU_GetStringDescriptor(uint16_t Length)
 436:../src/usb_prop.c **** {
 437:../src/usb_prop.c ****   uint8_t wValue0 = pInformation->USBwValue0;
 438:../src/usb_prop.c **** 
 439:../src/usb_prop.c ****   if (wValue0 > 8)
 440:../src/usb_prop.c ****   {
 441:../src/usb_prop.c ****     return NULL;
 442:../src/usb_prop.c ****   }
 443:../src/usb_prop.c ****   else
 444:../src/usb_prop.c ****   {
 445:../src/usb_prop.c ****     return Standard_GetDescriptorData(Length, &DFU_String_Descriptor[wValue0]);
 446:../src/usb_prop.c ****   }
 447:../src/usb_prop.c **** }
 448:../src/usb_prop.c **** 
 449:../src/usb_prop.c **** /*******************************************************************************
 450:../src/usb_prop.c **** * Function Name  : DFU_Get_Interface_Setting.
 451:../src/usb_prop.c **** * Description    : tests the interface and the alternate setting according to the
 452:../src/usb_prop.c **** *                  supported one.
 453:../src/usb_prop.c **** * Input          : - Interface : interface number.
 454:../src/usb_prop.c **** *                  - AlternateSetting : Alternate Setting number.
 455:../src/usb_prop.c **** * Output         : None.
 456:../src/usb_prop.c **** * Return         : USB_SUCCESS or USB_UNSUPPORT.
 457:../src/usb_prop.c **** *******************************************************************************/
 458:../src/usb_prop.c **** RESULT DFU_Get_Interface_Setting(uint8_t Interface, uint8_t AlternateSetting)
 459:../src/usb_prop.c **** {
 212              		.loc 1 459 0
 213              		.cfi_startproc
 214              		@ args = 0, pretend = 0, frame = 0
 215              		@ frame_needed = 0, uses_anonymous_args = 0
 216              		@ link register save eliminated.
 217              	.LVL8:
 460:../src/usb_prop.c ****   if (AlternateSetting > 3)
 218              		.loc 1 460 0
 219 0000 0329     		cmp	r1, #3
 220 0002 01D9     		bls	.L31
 221              	.L33:
 461:../src/usb_prop.c ****   {
 462:../src/usb_prop.c ****     return USB_UNSUPPORT;   /* In this application we don't have more than 3 AlternateSettings */
 222              		.loc 1 462 0
 223 0004 0220     		movs	r0, #2
 224              	.LVL9:
 225 0006 7047     		bx	lr
 226              	.LVL10:
 227              	.L31:
 463:../src/usb_prop.c ****   }
 464:../src/usb_prop.c ****   else if (Interface > 2)
 228              		.loc 1 464 0
 229 0008 0228     		cmp	r0, #2
 230 000a FBD8     		bhi	.L33
 465:../src/usb_prop.c ****   {
 466:../src/usb_prop.c ****     return USB_UNSUPPORT; /* In this application we have only 1 interfaces */
 467:../src/usb_prop.c ****   }
 468:../src/usb_prop.c **** 
 469:../src/usb_prop.c ****   return USB_SUCCESS;
 231              		.loc 1 469 0
 232 000c 0020     		movs	r0, #0
 233              	.LVL11:
 470:../src/usb_prop.c **** }
 234              		.loc 1 470 0
 235 000e 7047     		bx	lr
 236              		.cfi_endproc
 237              	.LFE67:
 239              		.section	.text.DNLOAD,"ax",%progbits
 240              		.align	1
 241              		.global	DNLOAD
 242              		.thumb
 243              		.thumb_func
 245              	DNLOAD:
 246              	.LFB69:
 471:../src/usb_prop.c **** 
 472:../src/usb_prop.c **** /*******************************************************************************
 473:../src/usb_prop.c **** * Function Name  : UPLOAD
 474:../src/usb_prop.c **** * Description    : Upload routine.
 475:../src/usb_prop.c **** * Input          : Length.
 476:../src/usb_prop.c **** * Output         : None.
 477:../src/usb_prop.c **** * Return         : Pointer to data.
 478:../src/usb_prop.c **** *******************************************************************************/
 479:../src/usb_prop.c **** uint8_t *UPLOAD(uint16_t Length)
 480:../src/usb_prop.c **** {
 481:../src/usb_prop.c ****   DEVICE_INFO *pInfo = &Device_Info;
 482:../src/usb_prop.c ****   uint8_t B1, B0;
 483:../src/usb_prop.c ****   uint16_t offset, returned;
 484:../src/usb_prop.c ****   uint8_t *Phy_Addr = NULL;
 485:../src/usb_prop.c ****   uint32_t Addr = 0;
 486:../src/usb_prop.c **** 
 487:../src/usb_prop.c ****   B0 = pInfo->USBwValues.bw.bb0;
 488:../src/usb_prop.c ****   B1 = pInfo->USBwValues.bw.bb1;
 489:../src/usb_prop.c ****   wBlockNum = (uint16_t)B1;
 490:../src/usb_prop.c ****   wBlockNum = wBlockNum * 0x100;
 491:../src/usb_prop.c ****   wBlockNum += (uint16_t)B0; /* wBlockNum value updated*/
 492:../src/usb_prop.c **** 
 493:../src/usb_prop.c ****   B0 = pInfo->USBwLengths.bw.bb0;
 494:../src/usb_prop.c ****   B1 =  pInfo->USBwLengths.bw.bb1;
 495:../src/usb_prop.c ****   wlength = (uint16_t)B0;
 496:../src/usb_prop.c ****   wlength = wlength * 0x100;
 497:../src/usb_prop.c ****   wlength += (uint16_t)B1; /* wlength value updated*/
 498:../src/usb_prop.c **** 
 499:../src/usb_prop.c ****   offset = pInformation->Ctrl_Info.Usb_wOffset;
 500:../src/usb_prop.c **** 
 501:../src/usb_prop.c ****   if (wBlockNum == 0)  /* Get Command */
 502:../src/usb_prop.c ****   {
 503:../src/usb_prop.c ****     if (wlength > 3)
 504:../src/usb_prop.c ****     {
 505:../src/usb_prop.c ****       DeviceState = STATE_dfuIDLE ;
 506:../src/usb_prop.c ****     }
 507:../src/usb_prop.c ****     else
 508:../src/usb_prop.c ****     {
 509:../src/usb_prop.c ****       DeviceState = STATE_dfuUPLOAD_IDLE;
 510:../src/usb_prop.c ****     }
 511:../src/usb_prop.c **** 
 512:../src/usb_prop.c ****     DeviceStatus[4] = DeviceState;
 513:../src/usb_prop.c ****     DeviceStatus[1] = 0;
 514:../src/usb_prop.c ****     DeviceStatus[2] = 0;
 515:../src/usb_prop.c ****     DeviceStatus[3] = 0;
 516:../src/usb_prop.c **** 
 517:../src/usb_prop.c ****     MAL_Buffer[0] = CMD_GETCOMMANDS;
 518:../src/usb_prop.c ****     MAL_Buffer[1] = CMD_SETADDRESSPOINTER;
 519:../src/usb_prop.c ****     MAL_Buffer[2] = CMD_ERASE;
 520:../src/usb_prop.c **** 
 521:../src/usb_prop.c ****     if (Length == 0)
 522:../src/usb_prop.c ****     {
 523:../src/usb_prop.c ****       pInformation->Ctrl_Info.Usb_wLength = 3 ;
 524:../src/usb_prop.c ****       return NULL;
 525:../src/usb_prop.c ****     }
 526:../src/usb_prop.c **** 
 527:../src/usb_prop.c ****     return(&MAL_Buffer[0]);
 528:../src/usb_prop.c ****   }
 529:../src/usb_prop.c ****   else if (wBlockNum > 1)
 530:../src/usb_prop.c ****   {
 531:../src/usb_prop.c ****     DeviceState = STATE_dfuUPLOAD_IDLE ;
 532:../src/usb_prop.c ****     DeviceStatus[4] = DeviceState;
 533:../src/usb_prop.c ****     DeviceStatus[1] = 0;
 534:../src/usb_prop.c ****     DeviceStatus[2] = 0;
 535:../src/usb_prop.c ****     DeviceStatus[3] = 0;
 536:../src/usb_prop.c ****     Addr = ((wBlockNum - 2) * wTransferSize) + Pointer;  /* Change is Accelerated*/
 537:../src/usb_prop.c **** 
 538:../src/usb_prop.c ****     Phy_Addr = MAL_Read(Addr, wlength);
 539:../src/usb_prop.c ****     returned = wlength - offset;
 540:../src/usb_prop.c **** 
 541:../src/usb_prop.c ****     if (Length == 0)
 542:../src/usb_prop.c ****     {
 543:../src/usb_prop.c ****       pInformation->Ctrl_Info.Usb_wLength = returned ;
 544:../src/usb_prop.c ****       return NULL;
 545:../src/usb_prop.c ****     }
 546:../src/usb_prop.c ****     return(Phy_Addr + offset);
 547:../src/usb_prop.c ****   }
 548:../src/usb_prop.c ****   else  /* unsupported wBlockNum */
 549:../src/usb_prop.c ****   {
 550:../src/usb_prop.c ****     DeviceState = STATUS_ERRSTALLEDPKT;
 551:../src/usb_prop.c ****     DeviceStatus[4] = DeviceState;
 552:../src/usb_prop.c ****     DeviceStatus[1] = 0;
 553:../src/usb_prop.c ****     DeviceStatus[2] = 0;
 554:../src/usb_prop.c ****     DeviceStatus[3] = 0;
 555:../src/usb_prop.c **** 
 556:../src/usb_prop.c ****     return NULL;
 557:../src/usb_prop.c ****   }
 558:../src/usb_prop.c **** }
 559:../src/usb_prop.c **** 
 560:../src/usb_prop.c **** /*******************************************************************************
 561:../src/usb_prop.c **** * Function Name  : DNLOAD
 562:../src/usb_prop.c **** * Description    : Download routine.
 563:../src/usb_prop.c **** * Input          : Length.
 564:../src/usb_prop.c **** * Output         : None.
 565:../src/usb_prop.c **** * Return         : Pointer to data.
 566:../src/usb_prop.c **** *******************************************************************************/
 567:../src/usb_prop.c **** uint8_t *DNLOAD (uint16_t Length)
 568:../src/usb_prop.c **** {
 247              		.loc 1 568 0
 248              		.cfi_startproc
 249              		@ args = 0, pretend = 0, frame = 0
 250              		@ frame_needed = 0, uses_anonymous_args = 0
 251              	.LVL12:
 252 0000 10B5     		push	{r4, lr}
 253              	.LCFI1:
 254              		.cfi_def_cfa_offset 8
 255              		.cfi_offset 4, -8
 256              		.cfi_offset 14, -4
 569:../src/usb_prop.c ****   DEVICE_INFO             *pInfo = &Device_Info;
 570:../src/usb_prop.c ****   uint8_t         B1, B0;
 571:../src/usb_prop.c ****   uint16_t          offset, returned;
 572:../src/usb_prop.c **** 
 573:../src/usb_prop.c ****   B0 = pInfo->USBwValues.bw.bb0;
 574:../src/usb_prop.c ****   B1 = pInfo->USBwValues.bw.bb1;
 257              		.loc 1 574 0
 258 0002 0D4B     		ldr	r3, .L37
 575:../src/usb_prop.c ****   wBlockNum = (uint16_t)B1;
 576:../src/usb_prop.c ****   wBlockNum = wBlockNum * 0x100;
 577:../src/usb_prop.c ****   wBlockNum += (uint16_t)B0;
 259              		.loc 1 577 0
 260 0004 0D49     		ldr	r1, .L37+4
 261 0006 DA78     		ldrb	r2, [r3, #3]	@ zero_extendqisi2
 575:../src/usb_prop.c ****   wBlockNum = (uint16_t)B1;
 262              		.loc 1 575 0
 263 0008 9C78     		ldrb	r4, [r3, #2]	@ zero_extendqisi2
 264              		.loc 1 577 0
 265 000a 02EB0424 		add	r4, r2, r4, lsl #8
 266 000e 0C60     		str	r4, [r1, #0]
 267              	.LVL13:
 578:../src/usb_prop.c ****   B0 = pInfo->USBwLengths.bw.bb0;
 579:../src/usb_prop.c ****   B1 =  pInfo->USBwLengths.bw.bb1;
 580:../src/usb_prop.c ****   wlength = (uint16_t)B0;
 581:../src/usb_prop.c ****   wlength = wlength * 0x100;
 582:../src/usb_prop.c ****   wlength += (uint16_t)B1;
 268              		.loc 1 582 0
 269 0010 9A79     		ldrb	r2, [r3, #6]	@ zero_extendqisi2
 580:../src/usb_prop.c ****   wlength = (uint16_t)B0;
 270              		.loc 1 580 0
 271 0012 DC79     		ldrb	r4, [r3, #7]	@ zero_extendqisi2
 583:../src/usb_prop.c **** 
 584:../src/usb_prop.c ****   offset = pInfo->Ctrl_Info.Usb_wOffset;
 272              		.loc 1 584 0
 273 0014 5B8A     		ldrh	r3, [r3, #18]
 274              	.LVL14:
 582:../src/usb_prop.c ****   wlength += (uint16_t)B1;
 275              		.loc 1 582 0
 276 0016 02EB0422 		add	r2, r2, r4, lsl #8
 585:../src/usb_prop.c **** 
 586:../src/usb_prop.c ****   DeviceState = STATE_dfuDNLOAD_SYNC;
 277              		.loc 1 586 0
 278 001a 094C     		ldr	r4, .L37+8
 582:../src/usb_prop.c ****   wlength += (uint16_t)B1;
 279              		.loc 1 582 0
 280 001c 4A60     		str	r2, [r1, #4]
 281              		.loc 1 586 0
 282 001e 0321     		movs	r1, #3
 283 0020 2170     		strb	r1, [r4, #0]
 587:../src/usb_prop.c ****   DeviceStatus[4] = DeviceState;
 284              		.loc 1 587 0
 285 0022 084C     		ldr	r4, .L37+12
 286 0024 2171     		strb	r1, [r4, #4]
 287              	.LVL15:
 588:../src/usb_prop.c **** 
 589:../src/usb_prop.c ****   returned = wlength - offset;
 590:../src/usb_prop.c **** 
 591:../src/usb_prop.c ****   if (Length == 0)
 288              		.loc 1 591 0
 289 0026 20B9     		cbnz	r0, .L35
 592:../src/usb_prop.c ****   {
 593:../src/usb_prop.c ****     pInformation->Ctrl_Info.Usb_wLength = returned ;
 290              		.loc 1 593 0
 291 0028 0749     		ldr	r1, .L37+16
 589:../src/usb_prop.c ****   returned = wlength - offset;
 292              		.loc 1 589 0
 293 002a D21A     		subs	r2, r2, r3
 294              	.LVL16:
 295              		.loc 1 593 0
 296 002c 0968     		ldr	r1, [r1, #0]
 297 002e 0A82     		strh	r2, [r1, #16]	@ movhi
 594:../src/usb_prop.c ****     return NULL;
 298              		.loc 1 594 0
 299 0030 10BD     		pop	{r4, pc}
 300              	.LVL17:
 301              	.L35:
 595:../src/usb_prop.c ****   }
 596:../src/usb_prop.c **** 
 597:../src/usb_prop.c ****   return((uint8_t*)MAL_Buffer + offset);
 302              		.loc 1 597 0
 303 0032 0648     		ldr	r0, .L37+20
 304              	.LVL18:
 305 0034 1818     		adds	r0, r3, r0
 598:../src/usb_prop.c **** }
 306              		.loc 1 598 0
 307 0036 10BD     		pop	{r4, pc}
 308              	.L38:
 309              		.align	2
 310              	.L37:
 311 0038 00000000 		.word	Device_Info
 312 003c 00000000 		.word	.LANCHOR0
 313 0040 00000000 		.word	DeviceState
 314 0044 00000000 		.word	DeviceStatus
 315 0048 00000000 		.word	pInformation
 316 004c 00000000 		.word	MAL_Buffer
 317              		.cfi_endproc
 318              	.LFE69:
 320              		.section	.text.GETSTATE,"ax",%progbits
 321              		.align	1
 322              		.global	GETSTATE
 323              		.thumb
 324              		.thumb_func
 326              	GETSTATE:
 327              	.LFB70:
 599:../src/usb_prop.c **** 
 600:../src/usb_prop.c **** /*******************************************************************************
 601:../src/usb_prop.c **** * Function Name  : GETSTATE.
 602:../src/usb_prop.c **** * Description    : Get State request routine.
 603:../src/usb_prop.c **** * Input          : Length.
 604:../src/usb_prop.c **** * Output         : None.
 605:../src/usb_prop.c **** * Return         : Pointer to data.
 606:../src/usb_prop.c **** *******************************************************************************/
 607:../src/usb_prop.c **** uint8_t *GETSTATE(uint16_t Length)
 608:../src/usb_prop.c **** {
 328              		.loc 1 608 0
 329              		.cfi_startproc
 330              		@ args = 0, pretend = 0, frame = 0
 331              		@ frame_needed = 0, uses_anonymous_args = 0
 332              		@ link register save eliminated.
 333              	.LVL19:
 609:../src/usb_prop.c ****   if (Length == 0)
 334              		.loc 1 609 0
 335 0000 20B9     		cbnz	r0, .L41
 610:../src/usb_prop.c ****   {
 611:../src/usb_prop.c ****     pInformation->Ctrl_Info.Usb_wLength = 1 ;
 336              		.loc 1 611 0
 337 0002 034B     		ldr	r3, .L42
 338 0004 0122     		movs	r2, #1
 339 0006 1968     		ldr	r1, [r3, #0]
 340 0008 0A82     		strh	r2, [r1, #16]	@ movhi
 612:../src/usb_prop.c ****     return NULL;
 341              		.loc 1 612 0
 342 000a 7047     		bx	lr
 343              	.L41:
 613:../src/usb_prop.c ****   }
 614:../src/usb_prop.c ****   else
 615:../src/usb_prop.c ****     return(&DeviceState);
 344              		.loc 1 615 0
 345 000c 0148     		ldr	r0, .L42+4
 346              	.LVL20:
 616:../src/usb_prop.c **** }
 347              		.loc 1 616 0
 348 000e 7047     		bx	lr
 349              	.L43:
 350              		.align	2
 351              	.L42:
 352 0010 00000000 		.word	pInformation
 353 0014 00000000 		.word	DeviceState
 354              		.cfi_endproc
 355              	.LFE70:
 357              		.section	.text.GETSTATUS,"ax",%progbits
 358              		.align	1
 359              		.global	GETSTATUS
 360              		.thumb
 361              		.thumb_func
 363              	GETSTATUS:
 364              	.LFB71:
 617:../src/usb_prop.c **** 
 618:../src/usb_prop.c **** /*******************************************************************************
 619:../src/usb_prop.c **** * Function Name  : GETSTATUS.
 620:../src/usb_prop.c **** * Description    : Get Status request routine.
 621:../src/usb_prop.c **** * Input          : Length.
 622:../src/usb_prop.c **** * Output         : None.
 623:../src/usb_prop.c **** * Return         : Pointer to data.
 624:../src/usb_prop.c **** *******************************************************************************/
 625:../src/usb_prop.c **** uint8_t *GETSTATUS(uint16_t Length)
 626:../src/usb_prop.c **** {
 365              		.loc 1 626 0
 366              		.cfi_startproc
 367              		@ args = 0, pretend = 0, frame = 0
 368              		@ frame_needed = 0, uses_anonymous_args = 0
 369              	.LVL21:
 370 0000 10B5     		push	{r4, lr}
 371              	.LCFI2:
 372              		.cfi_def_cfa_offset 8
 373              		.cfi_offset 4, -8
 374              		.cfi_offset 14, -4
 627:../src/usb_prop.c ****   switch (DeviceState)
 375              		.loc 1 627 0
 376 0002 2249     		ldr	r1, .L60
 626:../src/usb_prop.c **** {
 377              		.loc 1 626 0
 378 0004 0446     		mov	r4, r0
 379              		.loc 1 627 0
 380 0006 0B78     		ldrb	r3, [r1, #0]	@ zero_extendqisi2
 381 0008 032B     		cmp	r3, #3
 382 000a 02D0     		beq	.L46
 383 000c 062B     		cmp	r3, #6
 384 000e 33D1     		bne	.L45
 385 0010 18E0     		b	.L59
 386              	.L46:
 628:../src/usb_prop.c ****   {
 629:../src/usb_prop.c ****     case   STATE_dfuDNLOAD_SYNC:
 630:../src/usb_prop.c ****       if (wlength != 0)
 387              		.loc 1 630 0
 388 0012 1F48     		ldr	r0, .L60+4
 389              	.LVL22:
 390 0014 1F4A     		ldr	r2, .L60+8
 391 0016 4368     		ldr	r3, [r0, #4]
 392 0018 8BB1     		cbz	r3, .L48
 631:../src/usb_prop.c ****       {
 632:../src/usb_prop.c ****         DeviceState = STATE_dfuDNBUSY;
 393              		.loc 1 632 0
 394 001a 0423     		movs	r3, #4
 395 001c 0B70     		strb	r3, [r1, #0]
 633:../src/usb_prop.c ****         DeviceStatus[4] = DeviceState;
 634:../src/usb_prop.c ****         if ((wBlockNum == 0) && (MAL_Buffer[0] == CMD_ERASE))
 396              		.loc 1 634 0
 397 001e 0168     		ldr	r1, [r0, #0]
 633:../src/usb_prop.c ****         DeviceStatus[4] = DeviceState;
 398              		.loc 1 633 0
 399 0020 1371     		strb	r3, [r2, #4]
 400 0022 1D4B     		ldr	r3, .L60+12
 401              		.loc 1 634 0
 402 0024 29B9     		cbnz	r1, .L49
 403              		.loc 1 634 0 is_stmt 0 discriminator 1
 404 0026 1D48     		ldr	r0, .L60+16
 405 0028 0078     		ldrb	r0, [r0, #0]	@ zero_extendqisi2
 406 002a 4128     		cmp	r0, #65
 407 002c 01D1     		bne	.L49
 635:../src/usb_prop.c ****         {
 636:../src/usb_prop.c ****           MAL_GetStatus(Pointer, 0, DeviceStatus);
 408              		.loc 1 636 0 is_stmt 1
 409 002e 1868     		ldr	r0, [r3, #0]
 410 0030 02E0     		b	.L56
 411              	.L49:
 637:../src/usb_prop.c ****         }
 638:../src/usb_prop.c ****         else
 639:../src/usb_prop.c ****         {
 640:../src/usb_prop.c ****           MAL_GetStatus(Pointer, 1, DeviceStatus);
 412              		.loc 1 640 0
 413 0032 1868     		ldr	r0, [r3, #0]
 414 0034 174A     		ldr	r2, .L60+8
 415 0036 0121     		movs	r1, #1
 416              	.L56:
 417 0038 FFF7FEFF 		bl	MAL_GetStatus
 418              	.LVL23:
 419 003c 1CE0     		b	.L45
 420              	.L48:
 641:../src/usb_prop.c ****         }
 642:../src/usb_prop.c ****       }
 643:../src/usb_prop.c ****       else  /* (wlength==0)*/
 644:../src/usb_prop.c ****       {
 645:../src/usb_prop.c ****         DeviceState = STATE_dfuDNLOAD_IDLE;
 421              		.loc 1 645 0
 422 003e 0520     		movs	r0, #5
 423 0040 0870     		strb	r0, [r1, #0]
 424 0042 15E0     		b	.L58
 425              	.LVL24:
 426              	.L59:
 646:../src/usb_prop.c ****         DeviceStatus[4] = DeviceState;
 647:../src/usb_prop.c ****         DeviceStatus[1] = 0;
 648:../src/usb_prop.c ****         DeviceStatus[2] = 0;
 649:../src/usb_prop.c ****         DeviceStatus[3] = 0;
 650:../src/usb_prop.c **** 
 651:../src/usb_prop.c ****       }
 652:../src/usb_prop.c ****       break;
 653:../src/usb_prop.c ****     case   STATE_dfuMANIFEST_SYNC :
 654:../src/usb_prop.c ****       if (Manifest_State == Manifest_In_Progress)
 427              		.loc 1 654 0
 428 0044 1248     		ldr	r0, .L60+4
 429              	.LVL25:
 430 0046 8368     		ldr	r3, [r0, #8]
 431 0048 012B     		cmp	r3, #1
 432 004a 06D1     		bne	.L50
 655:../src/usb_prop.c ****       {
 656:../src/usb_prop.c ****         DeviceState = STATE_dfuMANIFEST;
 657:../src/usb_prop.c ****         DeviceStatus[4] = DeviceState;
 433              		.loc 1 657 0
 434 004c 114A     		ldr	r2, .L60+8
 656:../src/usb_prop.c ****         DeviceState = STATE_dfuMANIFEST;
 435              		.loc 1 656 0
 436 004e 0720     		movs	r0, #7
 658:../src/usb_prop.c ****         DeviceStatus[1] = 1;             /*bwPollTimeout = 1ms*/
 437              		.loc 1 658 0
 438 0050 5370     		strb	r3, [r2, #1]
 656:../src/usb_prop.c ****         DeviceState = STATE_dfuMANIFEST;
 439              		.loc 1 656 0
 440 0052 0870     		strb	r0, [r1, #0]
 657:../src/usb_prop.c ****         DeviceStatus[4] = DeviceState;
 441              		.loc 1 657 0
 442 0054 1071     		strb	r0, [r2, #4]
 659:../src/usb_prop.c ****         DeviceStatus[2] = 0;
 443              		.loc 1 659 0
 444 0056 0023     		movs	r3, #0
 445 0058 0CE0     		b	.L57
 446              	.L50:
 660:../src/usb_prop.c ****         DeviceStatus[3] = 0;
 661:../src/usb_prop.c ****         //break;
 662:../src/usb_prop.c ****       }
 663:../src/usb_prop.c ****       else if (Manifest_State == Manifest_complete && (Config_Descriptor.Descriptor[20] & 0x04))
 447              		.loc 1 663 0
 448 005a 6BB9     		cbnz	r3, .L45
 449              		.loc 1 663 0 is_stmt 0 discriminator 1
 450 005c 0E4A     		ldr	r2, .L60+12
 451 005e 5068     		ldr	r0, [r2, #4]
 452 0060 027D     		ldrb	r2, [r0, #20]	@ zero_extendqisi2
 453 0062 02F00400 		and	r0, r2, #4
 454 0066 C2B2     		uxtb	r2, r0
 455 0068 32B1     		cbz	r2, .L45
 664:../src/usb_prop.c ****       {
 665:../src/usb_prop.c ****         DeviceState = STATE_dfuIDLE;
 456              		.loc 1 665 0 is_stmt 1
 457 006a 0220     		movs	r0, #2
 666:../src/usb_prop.c ****         DeviceStatus[4] = DeviceState;
 458              		.loc 1 666 0
 459 006c 094A     		ldr	r2, .L60+8
 665:../src/usb_prop.c ****         DeviceState = STATE_dfuIDLE;
 460              		.loc 1 665 0
 461 006e 0870     		strb	r0, [r1, #0]
 462              	.L58:
 463              		.loc 1 666 0
 464 0070 1071     		strb	r0, [r2, #4]
 667:../src/usb_prop.c ****         DeviceStatus[1] = 0;
 465              		.loc 1 667 0
 466 0072 5370     		strb	r3, [r2, #1]
 467              	.L57:
 668:../src/usb_prop.c ****         DeviceStatus[2] = 0;
 468              		.loc 1 668 0
 469 0074 9370     		strb	r3, [r2, #2]
 669:../src/usb_prop.c ****         DeviceStatus[3] = 0;
 470              		.loc 1 669 0
 471 0076 D370     		strb	r3, [r2, #3]
 472              	.L45:
 670:../src/usb_prop.c ****         //break;
 671:../src/usb_prop.c ****       }
 672:../src/usb_prop.c ****       break;
 673:../src/usb_prop.c ****     default :
 674:../src/usb_prop.c ****       break;
 675:../src/usb_prop.c ****   }
 676:../src/usb_prop.c **** 
 677:../src/usb_prop.c ****   if (Length == 0)
 473              		.loc 1 677 0
 474 0078 2CB9     		cbnz	r4, .L52
 678:../src/usb_prop.c ****   {
 679:../src/usb_prop.c ****     pInformation->Ctrl_Info.Usb_wLength = 6 ;
 475              		.loc 1 679 0
 476 007a 0949     		ldr	r1, .L60+20
 477 007c 0622     		movs	r2, #6
 478 007e 0B68     		ldr	r3, [r1, #0]
 680:../src/usb_prop.c ****     return NULL;
 479              		.loc 1 680 0
 480 0080 2046     		mov	r0, r4
 679:../src/usb_prop.c ****     pInformation->Ctrl_Info.Usb_wLength = 6 ;
 481              		.loc 1 679 0
 482 0082 1A82     		strh	r2, [r3, #16]	@ movhi
 483              		.loc 1 680 0
 484 0084 10BD     		pop	{r4, pc}
 485              	.L52:
 681:../src/usb_prop.c ****   }
 682:../src/usb_prop.c ****   else
 683:../src/usb_prop.c ****     return(&(DeviceStatus[0]));
 486              		.loc 1 683 0
 487 0086 0348     		ldr	r0, .L60+8
 684:../src/usb_prop.c **** }
 488              		.loc 1 684 0
 489 0088 10BD     		pop	{r4, pc}
 490              	.L61:
 491 008a 00BF     		.align	2
 492              	.L60:
 493 008c 00000000 		.word	DeviceState
 494 0090 00000000 		.word	.LANCHOR0
 495 0094 00000000 		.word	DeviceStatus
 496 0098 00000000 		.word	.LANCHOR1
 497 009c 00000000 		.word	MAL_Buffer
 498 00a0 00000000 		.word	pInformation
 499              		.cfi_endproc
 500              	.LFE71:
 502              		.section	.text.UPLOAD,"ax",%progbits
 503              		.align	1
 504              		.global	UPLOAD
 505              		.thumb
 506              		.thumb_func
 508              	UPLOAD:
 509              	.LFB68:
 480:../src/usb_prop.c **** {
 510              		.loc 1 480 0
 511              		.cfi_startproc
 512              		@ args = 0, pretend = 0, frame = 0
 513              		@ frame_needed = 0, uses_anonymous_args = 0
 514              	.LVL26:
 515 0000 2DE9F041 		push	{r4, r5, r6, r7, r8, lr}
 516              	.LCFI3:
 517              		.cfi_def_cfa_offset 24
 518              		.cfi_offset 4, -24
 519              		.cfi_offset 5, -20
 520              		.cfi_offset 6, -16
 521              		.cfi_offset 7, -12
 522              		.cfi_offset 8, -8
 523              		.cfi_offset 14, -4
 488:../src/usb_prop.c ****   B1 = pInfo->USBwValues.bw.bb1;
 524              		.loc 1 488 0
 525 0004 294B     		ldr	r3, .L72
 499:../src/usb_prop.c ****   offset = pInformation->Ctrl_Info.Usb_wOffset;
 526              		.loc 1 499 0
 527 0006 DFF8C080 		ldr	r8, .L72+28
 491:../src/usb_prop.c ****   wBlockNum += (uint16_t)B0; /* wBlockNum value updated*/
 528              		.loc 1 491 0
 529 000a DA78     		ldrb	r2, [r3, #3]	@ zero_extendqisi2
 489:../src/usb_prop.c ****   wBlockNum = (uint16_t)B1;
 530              		.loc 1 489 0
 531 000c 9D78     		ldrb	r5, [r3, #2]	@ zero_extendqisi2
 495:../src/usb_prop.c ****   wlength = (uint16_t)B0;
 532              		.loc 1 495 0
 533 000e D979     		ldrb	r1, [r3, #7]	@ zero_extendqisi2
 480:../src/usb_prop.c **** {
 534              		.loc 1 480 0
 535 0010 0446     		mov	r4, r0
 497:../src/usb_prop.c ****   wlength += (uint16_t)B1; /* wlength value updated*/
 536              		.loc 1 497 0
 537 0012 9879     		ldrb	r0, [r3, #6]	@ zero_extendqisi2
 538              	.LVL27:
 491:../src/usb_prop.c ****   wBlockNum += (uint16_t)B0; /* wBlockNum value updated*/
 539              		.loc 1 491 0
 540 0014 264E     		ldr	r6, .L72+4
 499:../src/usb_prop.c ****   offset = pInformation->Ctrl_Info.Usb_wOffset;
 541              		.loc 1 499 0
 542 0016 D8F800C0 		ldr	ip, [r8, #0]
 491:../src/usb_prop.c ****   wBlockNum += (uint16_t)B0; /* wBlockNum value updated*/
 543              		.loc 1 491 0
 544 001a 02EB0525 		add	r5, r2, r5, lsl #8
 497:../src/usb_prop.c ****   wlength += (uint16_t)B1; /* wlength value updated*/
 545              		.loc 1 497 0
 546 001e 00EB0121 		add	r1, r0, r1, lsl #8
 491:../src/usb_prop.c ****   wBlockNum += (uint16_t)B0; /* wBlockNum value updated*/
 547              		.loc 1 491 0
 548 0022 3560     		str	r5, [r6, #0]
 549              	.LVL28:
 497:../src/usb_prop.c ****   wlength += (uint16_t)B1; /* wlength value updated*/
 550              		.loc 1 497 0
 551 0024 7160     		str	r1, [r6, #4]
 499:../src/usb_prop.c ****   offset = pInformation->Ctrl_Info.Usb_wOffset;
 552              		.loc 1 499 0
 553 0026 BCF81270 		ldrh	r7, [ip, #18]
 554              	.LVL29:
 555 002a 224A     		ldr	r2, .L72+8
 556 002c 224B     		ldr	r3, .L72+12
 501:../src/usb_prop.c ****   if (wBlockNum == 0)  /* Get Command */
 557              		.loc 1 501 0
 558 002e B5B9     		cbnz	r5, .L63
 503:../src/usb_prop.c ****     if (wlength > 3)
 559              		.loc 1 503 0
 560 0030 0329     		cmp	r1, #3
 561 0032 01D9     		bls	.L64
 505:../src/usb_prop.c ****       DeviceState = STATE_dfuIDLE ;
 562              		.loc 1 505 0
 563 0034 0220     		movs	r0, #2
 564 0036 00E0     		b	.L70
 565              	.L64:
 509:../src/usb_prop.c ****       DeviceState = STATE_dfuUPLOAD_IDLE;
 566              		.loc 1 509 0
 567 0038 0920     		movs	r0, #9
 568              	.L70:
 569 003a 1070     		strb	r0, [r2, #0]
 512:../src/usb_prop.c ****     DeviceStatus[4] = DeviceState;
 570              		.loc 1 512 0
 571 003c 1278     		ldrb	r2, [r2, #0]	@ zero_extendqisi2
 513:../src/usb_prop.c ****     DeviceStatus[1] = 0;
 572              		.loc 1 513 0
 573 003e 0021     		movs	r1, #0
 517:../src/usb_prop.c ****     MAL_Buffer[0] = CMD_GETCOMMANDS;
 574              		.loc 1 517 0
 575 0040 1E48     		ldr	r0, .L72+16
 512:../src/usb_prop.c ****     DeviceStatus[4] = DeviceState;
 576              		.loc 1 512 0
 577 0042 1A71     		strb	r2, [r3, #4]
 513:../src/usb_prop.c ****     DeviceStatus[1] = 0;
 578              		.loc 1 513 0
 579 0044 5970     		strb	r1, [r3, #1]
 514:../src/usb_prop.c ****     DeviceStatus[2] = 0;
 580              		.loc 1 514 0
 581 0046 9970     		strb	r1, [r3, #2]
 515:../src/usb_prop.c ****     DeviceStatus[3] = 0;
 582              		.loc 1 515 0
 583 0048 D970     		strb	r1, [r3, #3]
 519:../src/usb_prop.c ****     MAL_Buffer[2] = CMD_ERASE;
 584              		.loc 1 519 0
 585 004a 4122     		movs	r2, #65
 518:../src/usb_prop.c ****     MAL_Buffer[1] = CMD_SETADDRESSPOINTER;
 586              		.loc 1 518 0
 587 004c 2123     		movs	r3, #33
 517:../src/usb_prop.c ****     MAL_Buffer[0] = CMD_GETCOMMANDS;
 588              		.loc 1 517 0
 589 004e 0170     		strb	r1, [r0, #0]
 518:../src/usb_prop.c ****     MAL_Buffer[1] = CMD_SETADDRESSPOINTER;
 590              		.loc 1 518 0
 591 0050 4370     		strb	r3, [r0, #1]
 519:../src/usb_prop.c ****     MAL_Buffer[2] = CMD_ERASE;
 592              		.loc 1 519 0
 593 0052 8270     		strb	r2, [r0, #2]
 521:../src/usb_prop.c ****     if (Length == 0)
 594              		.loc 1 521 0
 595 0054 3CBB     		cbnz	r4, .L66
 523:../src/usb_prop.c ****       pInformation->Ctrl_Info.Usb_wLength = 3 ;
 596              		.loc 1 523 0
 597 0056 0320     		movs	r0, #3
 598 0058 ACF81000 		strh	r0, [ip, #16]	@ movhi
 599 005c 16E0     		b	.L71
 600              	.L63:
 529:../src/usb_prop.c ****   else if (wBlockNum > 1)
 601              		.loc 1 529 0
 602 005e 012D     		cmp	r5, #1
 603 0060 1AD0     		beq	.L67
 531:../src/usb_prop.c ****     DeviceState = STATE_dfuUPLOAD_IDLE ;
 604              		.loc 1 531 0
 605 0062 0920     		movs	r0, #9
 606 0064 1070     		strb	r0, [r2, #0]
 532:../src/usb_prop.c ****     DeviceStatus[4] = DeviceState;
 607              		.loc 1 532 0
 608 0066 1871     		strb	r0, [r3, #4]
 533:../src/usb_prop.c ****     DeviceStatus[1] = 0;
 609              		.loc 1 533 0
 610 0068 0022     		movs	r2, #0
 536:../src/usb_prop.c ****     Addr = ((wBlockNum - 2) * wTransferSize) + Pointer;  /* Change is Accelerated*/
 611              		.loc 1 536 0
 612 006a 1548     		ldr	r0, .L72+20
 533:../src/usb_prop.c ****     DeviceStatus[1] = 0;
 613              		.loc 1 533 0
 614 006c 5A70     		strb	r2, [r3, #1]
 534:../src/usb_prop.c ****     DeviceStatus[2] = 0;
 615              		.loc 1 534 0
 616 006e 9A70     		strb	r2, [r3, #2]
 535:../src/usb_prop.c ****     DeviceStatus[3] = 0;
 617              		.loc 1 535 0
 618 0070 DA70     		strb	r2, [r3, #3]
 619              	.LVL30:
 536:../src/usb_prop.c ****     Addr = ((wBlockNum - 2) * wTransferSize) + Pointer;  /* Change is Accelerated*/
 620              		.loc 1 536 0
 621 0072 144B     		ldr	r3, .L72+24
 622 0074 0268     		ldr	r2, [r0, #0]
 623 0076 EB18     		adds	r3, r5, r3
 538:../src/usb_prop.c ****     Phy_Addr = MAL_Read(Addr, wlength);
 624              		.loc 1 538 0
 625 0078 02EB8320 		add	r0, r2, r3, lsl #10
 626 007c FFF7FEFF 		bl	MAL_Read
 627              	.LVL31:
 539:../src/usb_prop.c ****     returned = wlength - offset;
 628              		.loc 1 539 0
 629 0080 7168     		ldr	r1, [r6, #4]
 630              	.LVL32:
 541:../src/usb_prop.c ****     if (Length == 0)
 631              		.loc 1 541 0
 632 0082 34B9     		cbnz	r4, .L68
 543:../src/usb_prop.c ****       pInformation->Ctrl_Info.Usb_wLength = returned ;
 633              		.loc 1 543 0
 634 0084 D8F80030 		ldr	r3, [r8, #0]
 539:../src/usb_prop.c ****     returned = wlength - offset;
 635              		.loc 1 539 0
 636 0088 CF1B     		subs	r7, r1, r7
 637              	.LVL33:
 543:../src/usb_prop.c ****       pInformation->Ctrl_Info.Usb_wLength = returned ;
 638              		.loc 1 543 0
 639 008a 1F82     		strh	r7, [r3, #16]	@ movhi
 640              	.LVL34:
 641              	.L71:
 544:../src/usb_prop.c ****       return NULL;
 642              		.loc 1 544 0
 643 008c 2046     		mov	r0, r4
 644 008e BDE8F081 		pop	{r4, r5, r6, r7, r8, pc}
 645              	.LVL35:
 646              	.L68:
 546:../src/usb_prop.c ****     return(Phy_Addr + offset);
 647              		.loc 1 546 0
 648 0092 C019     		adds	r0, r0, r7
 649              	.LVL36:
 650 0094 BDE8F081 		pop	{r4, r5, r6, r7, r8, pc}
 651              	.LVL37:
 652              	.L67:
 552:../src/usb_prop.c ****     DeviceStatus[1] = 0;
 653              		.loc 1 552 0
 654 0098 0020     		movs	r0, #0
 550:../src/usb_prop.c ****     DeviceState = STATUS_ERRSTALLEDPKT;
 655              		.loc 1 550 0
 656 009a 0F21     		movs	r1, #15
 657 009c 1170     		strb	r1, [r2, #0]
 551:../src/usb_prop.c ****     DeviceStatus[4] = DeviceState;
 658              		.loc 1 551 0
 659 009e 1971     		strb	r1, [r3, #4]
 552:../src/usb_prop.c ****     DeviceStatus[1] = 0;
 660              		.loc 1 552 0
 661 00a0 5870     		strb	r0, [r3, #1]
 553:../src/usb_prop.c ****     DeviceStatus[2] = 0;
 662              		.loc 1 553 0
 663 00a2 9870     		strb	r0, [r3, #2]
 554:../src/usb_prop.c ****     DeviceStatus[3] = 0;
 664              		.loc 1 554 0
 665 00a4 D870     		strb	r0, [r3, #3]
 666              	.L66:
 558:../src/usb_prop.c **** }
 667              		.loc 1 558 0
 668 00a6 BDE8F081 		pop	{r4, r5, r6, r7, r8, pc}
 669              	.L73:
 670 00aa 00BF     		.align	2
 671              	.L72:
 672 00ac 00000000 		.word	Device_Info
 673 00b0 00000000 		.word	.LANCHOR0
 674 00b4 00000000 		.word	DeviceState
 675 00b8 00000000 		.word	DeviceStatus
 676 00bc 00000000 		.word	MAL_Buffer
 677 00c0 00000000 		.word	.LANCHOR1
 678 00c4 FEFF3F00 		.word	4194302
 679 00c8 00000000 		.word	pInformation
 680              		.cfi_endproc
 681              	.LFE68:
 683              		.section	.text.DFU_GetStringDescriptor,"ax",%progbits
 684              		.align	1
 685              		.global	DFU_GetStringDescriptor
 686              		.thumb
 687              		.thumb_func
 689              	DFU_GetStringDescriptor:
 690              	.LFB66:
 436:../src/usb_prop.c **** {
 691              		.loc 1 436 0
 692              		.cfi_startproc
 693              		@ args = 0, pretend = 0, frame = 0
 694              		@ frame_needed = 0, uses_anonymous_args = 0
 695              		@ link register save eliminated.
 696              	.LVL38:
 437:../src/usb_prop.c ****   uint8_t wValue0 = pInformation->USBwValue0;
 697              		.loc 1 437 0
 698 0000 054B     		ldr	r3, .L76
 699 0002 1968     		ldr	r1, [r3, #0]
 700 0004 CA78     		ldrb	r2, [r1, #3]	@ zero_extendqisi2
 701              	.LVL39:
 439:../src/usb_prop.c ****   if (wValue0 > 8)
 702              		.loc 1 439 0
 703 0006 082A     		cmp	r2, #8
 704 0008 04D8     		bhi	.L75
 445:../src/usb_prop.c ****     return Standard_GetDescriptorData(Length, &DFU_String_Descriptor[wValue0]);
 705              		.loc 1 445 0
 706 000a 044B     		ldr	r3, .L76+4
 707 000c 03EBC201 		add	r1, r3, r2, lsl #3
 708              	.LVL40:
 447:../src/usb_prop.c **** }
 709              		.loc 1 447 0
 445:../src/usb_prop.c ****     return Standard_GetDescriptorData(Length, &DFU_String_Descriptor[wValue0]);
 710              		.loc 1 445 0
 711 0010 FFF7FEBF 		b	Standard_GetDescriptorData
 712              	.LVL41:
 713              	.L75:
 447:../src/usb_prop.c **** }
 714              		.loc 1 447 0
 715 0014 0020     		movs	r0, #0
 716              	.LVL42:
 717 0016 7047     		bx	lr
 718              	.L77:
 719              		.align	2
 720              	.L76:
 721 0018 00000000 		.word	pInformation
 722 001c 0C000000 		.word	.LANCHOR1+12
 723              		.cfi_endproc
 724              	.LFE66:
 726              		.section	.text.DFU_GetConfigDescriptor,"ax",%progbits
 727              		.align	1
 728              		.global	DFU_GetConfigDescriptor
 729              		.thumb
 730              		.thumb_func
 732              	DFU_GetConfigDescriptor:
 733              	.LFB65:
 424:../src/usb_prop.c **** {
 734              		.loc 1 424 0
 735              		.cfi_startproc
 736              		@ args = 0, pretend = 0, frame = 0
 737              		@ frame_needed = 0, uses_anonymous_args = 0
 738              		@ link register save eliminated.
 739              	.LVL43:
 425:../src/usb_prop.c ****   return Standard_GetDescriptorData (Length, &Config_Descriptor);
 740              		.loc 1 425 0
 741 0000 0149     		ldr	r1, .L79
 426:../src/usb_prop.c **** }
 742              		.loc 1 426 0
 425:../src/usb_prop.c ****   return Standard_GetDescriptorData (Length, &Config_Descriptor);
 743              		.loc 1 425 0
 744 0002 FFF7FEBF 		b	Standard_GetDescriptorData
 745              	.LVL44:
 746              	.L80:
 747 0006 00BF     		.align	2
 748              	.L79:
 749 0008 04000000 		.word	.LANCHOR1+4
 750              		.cfi_endproc
 751              	.LFE65:
 753              		.section	.text.DFU_GetDeviceDescriptor,"ax",%progbits
 754              		.align	1
 755              		.global	DFU_GetDeviceDescriptor
 756              		.thumb
 757              		.thumb_func
 759              	DFU_GetDeviceDescriptor:
 760              	.LFB64:
 412:../src/usb_prop.c **** {
 761              		.loc 1 412 0
 762              		.cfi_startproc
 763              		@ args = 0, pretend = 0, frame = 0
 764              		@ frame_needed = 0, uses_anonymous_args = 0
 765              		@ link register save eliminated.
 766              	.LVL45:
 413:../src/usb_prop.c ****   return Standard_GetDescriptorData(Length, &Device_Descriptor);
 767              		.loc 1 413 0
 768 0000 0149     		ldr	r1, .L82
 414:../src/usb_prop.c **** }
 769              		.loc 1 414 0
 413:../src/usb_prop.c ****   return Standard_GetDescriptorData(Length, &Device_Descriptor);
 770              		.loc 1 413 0
 771 0002 FFF7FEBF 		b	Standard_GetDescriptorData
 772              	.LVL46:
 773              	.L83:
 774 0006 00BF     		.align	2
 775              	.L82:
 776 0008 3C000000 		.word	.LANCHOR1+60
 777              		.cfi_endproc
 778              	.LFE64:
 780              		.section	.text.DFU_Reset,"ax",%progbits
 781              		.align	1
 782              		.global	DFU_Reset
 783              		.thumb
 784              		.thumb_func
 786              	DFU_Reset:
 787              	.LFB57:
 135:../src/usb_prop.c **** {
 788              		.loc 1 135 0
 789              		.cfi_startproc
 790              		@ args = 0, pretend = 0, frame = 0
 791              		@ frame_needed = 0, uses_anonymous_args = 0
 792 0000 70B5     		push	{r4, r5, r6, lr}
 793              	.LCFI4:
 794              		.cfi_def_cfa_offset 16
 795              		.cfi_offset 4, -16
 796              		.cfi_offset 5, -12
 797              		.cfi_offset 6, -8
 798              		.cfi_offset 14, -4
 140:../src/usb_prop.c ****   pInformation->Current_Feature = DFU_ConfigDescriptor[7];
 799              		.loc 1 140 0
 800 0002 2248     		ldr	r0, .L85
 801 0004 224A     		ldr	r2, .L85+4
 802 0006 0168     		ldr	r1, [r0, #0]
 803 0008 D579     		ldrb	r5, [r2, #7]	@ zero_extendqisi2
 137:../src/usb_prop.c ****   Device_Info.Current_Configuration = 0;
 804              		.loc 1 137 0
 805 000a 224B     		ldr	r3, .L85+8
 140:../src/usb_prop.c ****   pInformation->Current_Feature = DFU_ConfigDescriptor[7];
 806              		.loc 1 140 0
 807 000c 4D72     		strb	r5, [r1, #9]
 142:../src/usb_prop.c ****   _SetBTABLE(BTABLE_ADDRESS);
 808              		.loc 1 142 0
 809 000e 224D     		ldr	r5, .L85+12
 137:../src/usb_prop.c ****   Device_Info.Current_Configuration = 0;
 810              		.loc 1 137 0
 811 0010 0024     		movs	r4, #0
 145:../src/usb_prop.c ****   _SetEPType(ENDP0, EP_CONTROL);
 812              		.loc 1 145 0
 813 0012 224E     		ldr	r6, .L85+16
 137:../src/usb_prop.c ****   Device_Info.Current_Configuration = 0;
 814              		.loc 1 137 0
 815 0014 9C72     		strb	r4, [r3, #10]
 142:../src/usb_prop.c ****   _SetBTABLE(BTABLE_ADDRESS);
 816              		.loc 1 142 0
 817 0016 2C60     		str	r4, [r5, #0]
 145:../src/usb_prop.c ****   _SetEPType(ENDP0, EP_CONTROL);
 818              		.loc 1 145 0
 819 0018 3368     		ldr	r3, [r6, #0]
 820 001a 48F68F10 		movw	r0, #35215
 821 001e 1840     		ands	r0, r0, r3
 822 0020 40F40071 		orr	r1, r0, #512
 823 0024 3160     		str	r1, [r6, #0]
 824              	.LBB2:
 146:../src/usb_prop.c ****   _SetEPTxStatus(ENDP0, EP_TX_NAK);
 825              		.loc 1 146 0
 826 0026 3368     		ldr	r3, [r6, #0]
 827              	.LVL47:
 828 0028 48F6BF72 		movw	r2, #36799
 829 002c 1A40     		ands	r2, r2, r3
 830 002e 82F02000 		eor	r0, r2, #32
 831 0032 40F40041 		orr	r1, r0, #32768
 832 0036 41F08003 		orr	r3, r1, #128
 833              	.LVL48:
 834 003a 3360     		str	r3, [r6, #0]
 835              	.LBE2:
 147:../src/usb_prop.c ****   _SetEPRxAddr(ENDP0, ENDP0_RXADDR);
 836              		.loc 1 147 0
 837 003c 2E68     		ldr	r6, [r5, #0]
 838 003e 1848     		ldr	r0, .L85+20
 685:../src/usb_prop.c **** 
 686:../src/usb_prop.c **** /*******************************************************************************
 687:../src/usb_prop.c **** * Function Name  : DFU_write_crc.
 688:../src/usb_prop.c **** * Description    : DFU Write CRC routine.
 689:../src/usb_prop.c **** * Input          : None.
 690:../src/usb_prop.c **** * Output         : None.
 691:../src/usb_prop.c **** * Return         : None.
 692:../src/usb_prop.c **** *******************************************************************************/
 693:../src/usb_prop.c **** void DFU_write_crc(void)
 694:../src/usb_prop.c **** {
 695:../src/usb_prop.c ****   Manifest_State = Manifest_complete;
 696:../src/usb_prop.c **** 
 697:../src/usb_prop.c ****   if (Config_Descriptor.Descriptor[20] & 0x04)
 698:../src/usb_prop.c ****   {
 699:../src/usb_prop.c ****     DeviceState = STATE_dfuMANIFEST_SYNC;
 700:../src/usb_prop.c ****     DeviceStatus[4] = DeviceState;
 701:../src/usb_prop.c ****     DeviceStatus[1] = 0;
 702:../src/usb_prop.c ****     DeviceStatus[2] = 0;
 703:../src/usb_prop.c ****     DeviceStatus[3] = 0;
 704:../src/usb_prop.c ****     return;
 705:../src/usb_prop.c ****   }
 706:../src/usb_prop.c ****   else
 707:../src/usb_prop.c ****   {
 708:../src/usb_prop.c ****     DeviceState = STATE_dfuMANIFEST_WAIT_RESET;
 709:../src/usb_prop.c ****     DeviceStatus[4] = DeviceState;
 710:../src/usb_prop.c ****     DeviceStatus[1] = 0;
 711:../src/usb_prop.c ****     DeviceStatus[2] = 0;
 712:../src/usb_prop.c ****     DeviceStatus[3] = 0;
 713:../src/usb_prop.c **** 
 714:../src/usb_prop.c ****     Reset_Device();
 715:../src/usb_prop.c **** 
 716:../src/usb_prop.c ****     return;
 717:../src/usb_prop.c ****   }
 718:../src/usb_prop.c **** }
 839              		.loc 1 718 0
 840 0040 B2B2     		uxth	r2, r6
 147:../src/usb_prop.c ****   _SetEPRxAddr(ENDP0, ENDP0_RXADDR);
 841              		.loc 1 147 0
 842 0042 1118     		adds	r1, r2, r0
 843 0044 4B00     		lsls	r3, r1, #1
 844 0046 1026     		movs	r6, #16
 845 0048 1E60     		str	r6, [r3, #0]
 148:../src/usb_prop.c ****   SetEPRxCount(ENDP0, Device_Property.MaxPacketSize);
 846              		.loc 1 148 0
 847 004a 164E     		ldr	r6, .L85+24
 848 004c 2046     		mov	r0, r4
 849 004e 96F87010 		ldrb	r1, [r6, #112]	@ zero_extendqisi2
 850 0052 FFF7FEFF 		bl	SetEPRxCount
 851              	.LVL49:
 149:../src/usb_prop.c ****   _SetEPTxAddr(ENDP0, ENDP0_TXADDR);
 852              		.loc 1 149 0
 853 0056 2A68     		ldr	r2, [r5, #0]
 854              		.loc 1 718 0
 855 0058 90B2     		uxth	r0, r2
 149:../src/usb_prop.c ****   _SetEPTxAddr(ENDP0, ENDP0_TXADDR);
 856              		.loc 1 149 0
 857 005a 00F10051 		add	r1, r0, #536870912
 858 005e 01F54053 		add	r3, r1, #12288
 859 0062 5800     		lsls	r0, r3, #1
 860 0064 5022     		movs	r2, #80
 861 0066 0260     		str	r2, [r0, #0]
 150:../src/usb_prop.c ****   SetEPTxCount(ENDP0, Device_Property.MaxPacketSize);
 862              		.loc 1 150 0
 863 0068 96F87010 		ldrb	r1, [r6, #112]	@ zero_extendqisi2
 864 006c 2046     		mov	r0, r4
 865 006e FFF7FEFF 		bl	SetEPTxCount
 866              	.LVL50:
 151:../src/usb_prop.c ****   Clear_Status_Out(ENDP0);
 867              		.loc 1 151 0
 868 0072 2046     		mov	r0, r4
 869 0074 FFF7FEFF 		bl	Clear_Status_Out
 870              	.LVL51:
 152:../src/usb_prop.c ****   SetEPRxValid(ENDP0);
 871              		.loc 1 152 0
 872 0078 2046     		mov	r0, r4
 873 007a FFF7FEFF 		bl	SetEPRxValid
 874              	.LVL52:
 155:../src/usb_prop.c ****   SetDeviceAddress(0);
 875              		.loc 1 155 0
 876 007e 2046     		mov	r0, r4
 877 0080 FFF7FEFF 		bl	SetDeviceAddress
 878              	.LVL53:
 158:../src/usb_prop.c ****   bDeviceState = ATTACHED;
 879              		.loc 1 158 0
 880 0084 084B     		ldr	r3, .L85+28
 881 0086 0121     		movs	r1, #1
 882 0088 1960     		str	r1, [r3, #0]
 883 008a 70BD     		pop	{r4, r5, r6, pc}
 884              	.L86:
 885              		.align	2
 886              	.L85:
 887 008c 00000000 		.word	pInformation
 888 0090 00000000 		.word	DFU_ConfigDescriptor
 889 0094 00000000 		.word	Device_Info
 890 0098 505C0040 		.word	1073765456
 891 009c 005C0040 		.word	1073765376
 892 00a0 04300020 		.word	536883204
 893 00a4 00000000 		.word	.LANCHOR1
 894 00a8 00000000 		.word	bDeviceState
 895              		.cfi_endproc
 896              	.LFE57:
 898              		.section	.text.DFU_init,"ax",%progbits
 899              		.align	1
 900              		.global	DFU_init
 901              		.thumb
 902              		.thumb_func
 904              	DFU_init:
 905              	.LFB56:
 107:../src/usb_prop.c **** {
 906              		.loc 1 107 0
 907              		.cfi_startproc
 908              		@ args = 0, pretend = 0, frame = 0
 909              		@ frame_needed = 0, uses_anonymous_args = 0
 910              	.LVL54:
 911 0000 10B5     		push	{r4, lr}
 912              	.LCFI5:
 913              		.cfi_def_cfa_offset 8
 914              		.cfi_offset 4, -8
 915              		.cfi_offset 14, -4
 111:../src/usb_prop.c ****   Get_SerialNum();
 916              		.loc 1 111 0
 917 0002 FFF7FEFF 		bl	Get_SerialNum
 918              	.LVL55:
 113:../src/usb_prop.c ****   pInfo->Current_Configuration = 0;
 919              		.loc 1 113 0
 920 0006 064B     		ldr	r3, .L88
 921 0008 0024     		movs	r4, #0
 922 000a 9C72     		strb	r4, [r3, #10]
 116:../src/usb_prop.c ****   PowerOn();
 923              		.loc 1 116 0
 924 000c FFF7FEFF 		bl	PowerOn
 925              	.LVL56:
 119:../src/usb_prop.c ****   USB_SIL_Init();
 926              		.loc 1 119 0
 927 0010 FFF7FEFF 		bl	USB_SIL_Init
 928              	.LVL57:
 122:../src/usb_prop.c ****   USB_Interrupts_Config();
 929              		.loc 1 122 0
 930 0014 FFF7FEFF 		bl	USB_Interrupts_Config
 931              	.LVL58:
 124:../src/usb_prop.c ****   bDeviceState = UNCONNECTED;
 932              		.loc 1 124 0
 933 0018 0248     		ldr	r0, .L88+4
 934 001a 0460     		str	r4, [r0, #0]
 935 001c 10BD     		pop	{r4, pc}
 936              	.L89:
 937 001e 00BF     		.align	2
 938              	.L88:
 939 0020 00000000 		.word	Device_Info
 940 0024 00000000 		.word	bDeviceState
 941              		.cfi_endproc
 942              	.LFE56:
 944              		.section	.text.DFU_NoData_Setup,"ax",%progbits
 945              		.align	1
 946              		.global	DFU_NoData_Setup
 947              		.thumb
 948              		.thumb_func
 950              	DFU_NoData_Setup:
 951              	.LFB63:
 323:../src/usb_prop.c **** {
 952              		.loc 1 323 0
 953              		.cfi_startproc
 954              		@ args = 0, pretend = 0, frame = 0
 955              		@ frame_needed = 0, uses_anonymous_args = 0
 956              		@ link register save eliminated.
 957              	.LVL59:
 324:../src/usb_prop.c ****   if (Type_Recipient == (CLASS_REQUEST | INTERFACE_RECIPIENT))
 958              		.loc 1 324 0
 959 0000 2E4B     		ldr	r3, .L113
 960 0002 1968     		ldr	r1, [r3, #0]
 961 0004 0A78     		ldrb	r2, [r1, #0]	@ zero_extendqisi2
 962 0006 02F07F03 		and	r3, r2, #127
 963 000a 212B     		cmp	r3, #33
 964 000c 54D1     		bne	.L100
 327:../src/usb_prop.c ****     if (RequestNo == DFU_DNLOAD)
 965              		.loc 1 327 0
 966 000e 0128     		cmp	r0, #1
 967 0010 12D1     		bne	.L92
 330:../src/usb_prop.c ****       if (DeviceState == STATE_dfuDNLOAD_IDLE || DeviceState == STATE_dfuIDLE )
 968              		.loc 1 330 0
 969 0012 2B48     		ldr	r0, .L113+4
 970              	.LVL60:
 971 0014 0278     		ldrb	r2, [r0, #0]	@ zero_extendqisi2
 972 0016 0146     		mov	r1, r0
 973 0018 052A     		cmp	r2, #5
 974 001a 01D0     		beq	.L93
 330:../src/usb_prop.c ****       if (DeviceState == STATE_dfuDNLOAD_IDLE || DeviceState == STATE_dfuIDLE )
 975              		.loc 1 330 0 is_stmt 0 discriminator 1
 976 001c 022A     		cmp	r2, #2
 977 001e 4BD1     		bne	.L100
 978              	.L93:
 333:../src/usb_prop.c ****         DeviceState = STATE_dfuMANIFEST_SYNC;
 979              		.loc 1 333 0 is_stmt 1
 980 0020 0622     		movs	r2, #6
 332:../src/usb_prop.c ****         Manifest_State = Manifest_In_Progress;
 981              		.loc 1 332 0
 982 0022 284B     		ldr	r3, .L113+8
 983 0024 0120     		movs	r0, #1
 333:../src/usb_prop.c ****         DeviceState = STATE_dfuMANIFEST_SYNC;
 984              		.loc 1 333 0
 985 0026 0A70     		strb	r2, [r1, #0]
 334:../src/usb_prop.c ****         DeviceStatus[1] = 0;
 986              		.loc 1 334 0
 987 0028 2749     		ldr	r1, .L113+12
 332:../src/usb_prop.c ****         Manifest_State = Manifest_In_Progress;
 988              		.loc 1 332 0
 989 002a 9860     		str	r0, [r3, #8]
 334:../src/usb_prop.c ****         DeviceStatus[1] = 0;
 990              		.loc 1 334 0
 991 002c 0020     		movs	r0, #0
 992 002e 4870     		strb	r0, [r1, #1]
 335:../src/usb_prop.c ****         DeviceStatus[2] = 0;
 993              		.loc 1 335 0
 994 0030 8870     		strb	r0, [r1, #2]
 336:../src/usb_prop.c ****         DeviceStatus[3] = 0;
 995              		.loc 1 336 0
 996 0032 C870     		strb	r0, [r1, #3]
 337:../src/usb_prop.c ****         DeviceStatus[4] = DeviceState;
 997              		.loc 1 337 0
 998 0034 0A71     		strb	r2, [r1, #4]
 338:../src/usb_prop.c ****         return USB_SUCCESS;
 999              		.loc 1 338 0
 1000 0036 7047     		bx	lr
 1001              	.LVL61:
 1002              	.L92:
 342:../src/usb_prop.c ****     else if (RequestNo == DFU_UPLOAD)
 1003              		.loc 1 342 0
 1004 0038 0228     		cmp	r0, #2
 1005 003a 08D1     		bne	.L94
 345:../src/usb_prop.c ****       DeviceStatus[1] = 0;
 1006              		.loc 1 345 0
 1007 003c 2249     		ldr	r1, .L113+12
 344:../src/usb_prop.c ****       DeviceState = STATE_dfuIDLE;
 1008              		.loc 1 344 0
 1009 003e 204A     		ldr	r2, .L113+4
 345:../src/usb_prop.c ****       DeviceStatus[1] = 0;
 1010              		.loc 1 345 0
 1011 0040 0023     		movs	r3, #0
 344:../src/usb_prop.c ****       DeviceState = STATE_dfuIDLE;
 1012              		.loc 1 344 0
 1013 0042 1070     		strb	r0, [r2, #0]
 345:../src/usb_prop.c ****       DeviceStatus[1] = 0;
 1014              		.loc 1 345 0
 1015 0044 4B70     		strb	r3, [r1, #1]
 346:../src/usb_prop.c ****       DeviceStatus[2] = 0;
 1016              		.loc 1 346 0
 1017 0046 8B70     		strb	r3, [r1, #2]
 347:../src/usb_prop.c ****       DeviceStatus[3] = 0;
 1018              		.loc 1 347 0
 1019 0048 CB70     		strb	r3, [r1, #3]
 348:../src/usb_prop.c ****       DeviceStatus[4] = DeviceState;
 1020              		.loc 1 348 0
 1021 004a 0871     		strb	r0, [r1, #4]
 1022 004c 32E0     		b	.L102
 1023              	.L94:
 1024              	.LVL62:
 1025              	.LBB5:
 1026              	.LBB6:
 353:../src/usb_prop.c ****     else if (RequestNo == DFU_CLRSTATUS)
 1027              		.loc 1 353 0
 1028 004e 0428     		cmp	r0, #4
 1029 0050 14D1     		bne	.L95
 356:../src/usb_prop.c ****       if (DeviceState == STATE_dfuERROR)
 1030              		.loc 1 356 0
 1031 0052 1B48     		ldr	r0, .L113+4
 1032              	.LVL63:
 1033 0054 1C4B     		ldr	r3, .L113+12
 1034 0056 0278     		ldrb	r2, [r0, #0]	@ zero_extendqisi2
 1035 0058 0A2A     		cmp	r2, #10
 1036 005a 04D1     		bne	.L96
 358:../src/usb_prop.c ****         DeviceState = STATE_dfuIDLE;
 1037              		.loc 1 358 0
 1038 005c 0221     		movs	r1, #2
 1039 005e 0170     		strb	r1, [r0, #0]
 359:../src/usb_prop.c ****         DeviceStatus[0] = STATUS_OK;/*bStatus*/
 1040              		.loc 1 359 0
 1041 0060 0020     		movs	r0, #0
 1042 0062 1870     		strb	r0, [r3, #0]
 1043 0064 04E0     		b	.L112
 1044              	.L96:
 368:../src/usb_prop.c ****         DeviceState = STATE_dfuERROR;
 1045              		.loc 1 368 0
 1046 0066 0A21     		movs	r1, #10
 1047 0068 0170     		strb	r1, [r0, #0]
 369:../src/usb_prop.c ****         DeviceStatus[0] = STATUS_ERRUNKNOWN;/*bStatus*/
 1048              		.loc 1 369 0
 1049 006a 0E20     		movs	r0, #14
 1050 006c 1870     		strb	r0, [r3, #0]
 370:../src/usb_prop.c ****         DeviceStatus[1] = 0;
 1051              		.loc 1 370 0
 1052 006e 0020     		movs	r0, #0
 1053              	.L112:
 1054 0070 5870     		strb	r0, [r3, #1]
 371:../src/usb_prop.c ****         DeviceStatus[2] = 0;
 1055              		.loc 1 371 0
 1056 0072 9870     		strb	r0, [r3, #2]
 372:../src/usb_prop.c ****         DeviceStatus[3] = 0; /*bwPollTimeout=0ms*/
 1057              		.loc 1 372 0
 1058 0074 D870     		strb	r0, [r3, #3]
 373:../src/usb_prop.c ****         DeviceStatus[4] = DeviceState;/*bState*/
 1059              		.loc 1 373 0
 1060 0076 1971     		strb	r1, [r3, #4]
 374:../src/usb_prop.c ****         DeviceStatus[5] = 0;/*iString*/
 1061              		.loc 1 374 0
 1062 0078 5871     		strb	r0, [r3, #5]
 1063 007a 7047     		bx	lr
 1064              	.LVL64:
 1065              	.L95:
 379:../src/usb_prop.c ****     else if (RequestNo == DFU_ABORT)
 1066              		.loc 1 379 0
 1067 007c 0628     		cmp	r0, #6
 1068 007e 1BD1     		bne	.L100
 381:../src/usb_prop.c ****       if (DeviceState == STATE_dfuIDLE || DeviceState == STATE_dfuDNLOAD_SYNC
 1069              		.loc 1 381 0
 1070 0080 0F48     		ldr	r0, .L113+4
 1071              	.LVL65:
 1072 0082 0278     		ldrb	r2, [r0, #0]	@ zero_extendqisi2
 1073 0084 0346     		mov	r3, r0
 1074 0086 911E     		subs	r1, r2, #2
 1075 0088 0129     		cmp	r1, #1
 1076 008a 05D9     		bls	.L98
 382:../src/usb_prop.c ****           || DeviceState == STATE_dfuDNLOAD_IDLE || DeviceState == STATE_dfuMANIFEST_SYNC
 1077              		.loc 1 382 0
 1078 008c 052A     		cmp	r2, #5
 1079 008e 03D0     		beq	.L98
 1080 0090 062A     		cmp	r2, #6
 1081 0092 01D0     		beq	.L98
 383:../src/usb_prop.c ****           || DeviceState == STATE_dfuUPLOAD_IDLE )
 1082              		.loc 1 383 0
 1083 0094 092A     		cmp	r2, #9
 1084 0096 0DD1     		bne	.L102
 1085              	.L98:
 385:../src/usb_prop.c ****         DeviceState = STATE_dfuIDLE;
 1086              		.loc 1 385 0
 1087 0098 0222     		movs	r2, #2
 386:../src/usb_prop.c ****         DeviceStatus[0] = STATUS_OK;
 1088              		.loc 1 386 0
 1089 009a 0B49     		ldr	r1, .L113+12
 385:../src/usb_prop.c ****         DeviceState = STATE_dfuIDLE;
 1090              		.loc 1 385 0
 1091 009c 1A70     		strb	r2, [r3, #0]
 392:../src/usb_prop.c ****         wBlockNum = 0;
 1092              		.loc 1 392 0
 1093 009e 094B     		ldr	r3, .L113+8
 386:../src/usb_prop.c ****         DeviceStatus[0] = STATUS_OK;
 1094              		.loc 1 386 0
 1095 00a0 0020     		movs	r0, #0
 1096 00a2 0870     		strb	r0, [r1, #0]
 387:../src/usb_prop.c ****         DeviceStatus[1] = 0;
 1097              		.loc 1 387 0
 1098 00a4 4870     		strb	r0, [r1, #1]
 388:../src/usb_prop.c ****         DeviceStatus[2] = 0;
 1099              		.loc 1 388 0
 1100 00a6 8870     		strb	r0, [r1, #2]
 389:../src/usb_prop.c ****         DeviceStatus[3] = 0; /*bwPollTimeout=0ms*/
 1101              		.loc 1 389 0
 1102 00a8 C870     		strb	r0, [r1, #3]
 390:../src/usb_prop.c ****         DeviceStatus[4] = DeviceState;
 1103              		.loc 1 390 0
 1104 00aa 0A71     		strb	r2, [r1, #4]
 391:../src/usb_prop.c ****         DeviceStatus[5] = 0; /*iString*/
 1105              		.loc 1 391 0
 1106 00ac 4871     		strb	r0, [r1, #5]
 392:../src/usb_prop.c ****         wBlockNum = 0;
 1107              		.loc 1 392 0
 1108 00ae 1860     		str	r0, [r3, #0]
 393:../src/usb_prop.c ****         wlength = 0;
 1109              		.loc 1 393 0
 1110 00b0 5860     		str	r0, [r3, #4]
 1111 00b2 7047     		bx	lr
 1112              	.L102:
 395:../src/usb_prop.c ****       return USB_SUCCESS;
 1113              		.loc 1 395 0
 1114 00b4 0020     		movs	r0, #0
 1115 00b6 7047     		bx	lr
 1116              	.L100:
 1117              	.LBE6:
 1118              	.LBE5:
 400:../src/usb_prop.c ****   return USB_UNSUPPORT;
 1119              		.loc 1 400 0
 1120 00b8 0220     		movs	r0, #2
 402:../src/usb_prop.c **** } /* End of DFU_NoData_Setup */
 1121              		.loc 1 402 0
 1122 00ba 7047     		bx	lr
 1123              	.L114:
 1124              		.align	2
 1125              	.L113:
 1126 00bc 00000000 		.word	pInformation
 1127 00c0 00000000 		.word	DeviceState
 1128 00c4 00000000 		.word	.LANCHOR0
 1129 00c8 00000000 		.word	DeviceStatus
 1130              		.cfi_endproc
 1131              	.LFE63:
 1133              		.section	.text.DFU_write_crc,"ax",%progbits
 1134              		.align	1
 1135              		.global	DFU_write_crc
 1136              		.thumb
 1137              		.thumb_func
 1139              	DFU_write_crc:
 1140              	.LFB72:
 694:../src/usb_prop.c **** {
 1141              		.loc 1 694 0
 1142              		.cfi_startproc
 1143              		@ args = 0, pretend = 0, frame = 0
 1144              		@ frame_needed = 0, uses_anonymous_args = 0
 1145              		@ link register save eliminated.
 697:../src/usb_prop.c ****   if (Config_Descriptor.Descriptor[20] & 0x04)
 1146              		.loc 1 697 0
 1147 0000 0C48     		ldr	r0, .L119
 695:../src/usb_prop.c ****   Manifest_State = Manifest_complete;
 1148              		.loc 1 695 0
 1149 0002 0D4B     		ldr	r3, .L119+4
 697:../src/usb_prop.c ****   if (Config_Descriptor.Descriptor[20] & 0x04)
 1150              		.loc 1 697 0
 1151 0004 4168     		ldr	r1, [r0, #4]
 695:../src/usb_prop.c ****   Manifest_State = Manifest_complete;
 1152              		.loc 1 695 0
 1153 0006 0022     		movs	r2, #0
 1154 0008 9A60     		str	r2, [r3, #8]
 697:../src/usb_prop.c ****   if (Config_Descriptor.Descriptor[20] & 0x04)
 1155              		.loc 1 697 0
 1156 000a 0B7D     		ldrb	r3, [r1, #20]	@ zero_extendqisi2
 1157 000c 0B48     		ldr	r0, .L119+8
 1158 000e 13F00401 		ands	r1, r3, #4
 1159 0012 0B4B     		ldr	r3, .L119+12
 1160 0014 06D0     		beq	.L116
 699:../src/usb_prop.c ****     DeviceState = STATE_dfuMANIFEST_SYNC;
 1161              		.loc 1 699 0
 1162 0016 0621     		movs	r1, #6
 1163 0018 0170     		strb	r1, [r0, #0]
 700:../src/usb_prop.c ****     DeviceStatus[4] = DeviceState;
 1164              		.loc 1 700 0
 1165 001a 1971     		strb	r1, [r3, #4]
 701:../src/usb_prop.c ****     DeviceStatus[1] = 0;
 1166              		.loc 1 701 0
 1167 001c 5A70     		strb	r2, [r3, #1]
 702:../src/usb_prop.c ****     DeviceStatus[2] = 0;
 1168              		.loc 1 702 0
 1169 001e 9A70     		strb	r2, [r3, #2]
 703:../src/usb_prop.c ****     DeviceStatus[3] = 0;
 1170              		.loc 1 703 0
 1171 0020 DA70     		strb	r2, [r3, #3]
 704:../src/usb_prop.c ****     return;
 1172              		.loc 1 704 0
 1173 0022 7047     		bx	lr
 1174              	.L116:
 708:../src/usb_prop.c ****     DeviceState = STATE_dfuMANIFEST_WAIT_RESET;
 1175              		.loc 1 708 0
 1176 0024 0822     		movs	r2, #8
 1177 0026 0270     		strb	r2, [r0, #0]
 709:../src/usb_prop.c ****     DeviceStatus[4] = DeviceState;
 1178              		.loc 1 709 0
 1179 0028 1A71     		strb	r2, [r3, #4]
 710:../src/usb_prop.c ****     DeviceStatus[1] = 0;
 1180              		.loc 1 710 0
 1181 002a 5970     		strb	r1, [r3, #1]
 711:../src/usb_prop.c ****     DeviceStatus[2] = 0;
 1182              		.loc 1 711 0
 1183 002c 9970     		strb	r1, [r3, #2]
 712:../src/usb_prop.c ****     DeviceStatus[3] = 0;
 1184              		.loc 1 712 0
 1185 002e D970     		strb	r1, [r3, #3]
 1186              		.loc 1 718 0
 714:../src/usb_prop.c ****     Reset_Device();
 1187              		.loc 1 714 0
 1188 0030 FFF7FEBF 		b	Reset_Device
 1189              	.LVL66:
 1190              	.L120:
 1191              		.align	2
 1192              	.L119:
 1193 0034 00000000 		.word	.LANCHOR1
 1194 0038 00000000 		.word	.LANCHOR0
 1195 003c 00000000 		.word	DeviceState
 1196 0040 00000000 		.word	DeviceStatus
 1197              		.cfi_endproc
 1198              	.LFE72:
 1200              		.section	.text.DFU_Status_Out,"ax",%progbits
 1201              		.align	1
 1202              		.global	DFU_Status_Out
 1203              		.thumb
 1204              		.thumb_func
 1206              	DFU_Status_Out:
 1207              	.LFB61:
 206:../src/usb_prop.c **** {
 1208              		.loc 1 206 0
 1209              		.cfi_startproc
 1210              		@ args = 0, pretend = 0, frame = 0
 1211              		@ frame_needed = 0, uses_anonymous_args = 0
 1212              	.LVL67:
 1213 0000 08B5     		push	{r3, lr}
 1214              	.LCFI6:
 1215              		.cfi_def_cfa_offset 8
 1216              		.cfi_offset 3, -8
 1217              		.cfi_offset 14, -4
 210:../src/usb_prop.c ****   if (pInfo->USBbRequest == DFU_GETSTATUS)
 1218              		.loc 1 210 0
 1219 0002 2A4B     		ldr	r3, .L130
 1220 0004 5878     		ldrb	r0, [r3, #1]	@ zero_extendqisi2
 1221 0006 0328     		cmp	r0, #3
 1222 0008 4ED1     		bne	.L121
 212:../src/usb_prop.c ****     if (DeviceState == STATE_dfuDNBUSY)
 1223              		.loc 1 212 0
 1224 000a 2949     		ldr	r1, .L130+4
 1225 000c 0A78     		ldrb	r2, [r1, #0]	@ zero_extendqisi2
 1226 000e 042A     		cmp	r2, #4
 1227 0010 44D1     		bne	.L123
 1228              	.LBB9:
 1229              	.LBB10:
 214:../src/usb_prop.c ****       if (wBlockNum == 0)   /* Decode the Special Command*/
 1230              		.loc 1 214 0
 1231 0012 284A     		ldr	r2, .L130+8
 1232 0014 1368     		ldr	r3, [r2, #0]
 1233 0016 4BBB     		cbnz	r3, .L124
 216:../src/usb_prop.c ****         if ((MAL_Buffer[0] ==  CMD_GETCOMMANDS) && (wlength == 1))
 1234              		.loc 1 216 0
 1235 0018 274B     		ldr	r3, .L130+12
 1236 001a 1978     		ldrb	r1, [r3, #0]	@ zero_extendqisi2
 1237 001c 0029     		cmp	r1, #0
 1238 001e 30D0     		beq	.L125
 218:../src/usb_prop.c ****         else if  (( MAL_Buffer[0] ==  CMD_SETADDRESSPOINTER ) && (wlength == 5))
 1239              		.loc 1 218 0
 1240 0020 2129     		cmp	r1, #33
 1241 0022 0FD1     		bne	.L126
 1242 0024 5068     		ldr	r0, [r2, #4]
 1243 0026 0528     		cmp	r0, #5
 1244 0028 2BD1     		bne	.L125
 222:../src/usb_prop.c ****           Pointer += MAL_Buffer[3] << 16;
 1245              		.loc 1 222 0
 1246 002a DA78     		ldrb	r2, [r3, #3]	@ zero_extendqisi2
 221:../src/usb_prop.c ****           Pointer += MAL_Buffer[2] << 8;
 1247              		.loc 1 221 0
 1248 002c 9978     		ldrb	r1, [r3, #2]	@ zero_extendqisi2
 222:../src/usb_prop.c ****           Pointer += MAL_Buffer[3] << 16;
 1249              		.loc 1 222 0
 1250 002e 1004     		lsls	r0, r2, #16
 221:../src/usb_prop.c ****           Pointer += MAL_Buffer[2] << 8;
 1251              		.loc 1 221 0
 1252 0030 00EB0122 		add	r2, r0, r1, lsl #8
 220:../src/usb_prop.c ****           Pointer  = MAL_Buffer[1];
 1253              		.loc 1 220 0
 1254 0034 5978     		ldrb	r1, [r3, #1]	@ zero_extendqisi2
 223:../src/usb_prop.c ****           Pointer += MAL_Buffer[4] << 24;
 1255              		.loc 1 223 0
 1256 0036 1B79     		ldrb	r3, [r3, #4]	@ zero_extendqisi2
 222:../src/usb_prop.c ****           Pointer += MAL_Buffer[3] << 16;
 1257              		.loc 1 222 0
 1258 0038 5018     		adds	r0, r2, r1
 223:../src/usb_prop.c ****           Pointer += MAL_Buffer[4] << 24;
 1259              		.loc 1 223 0
 1260 003a 2049     		ldr	r1, .L130+16
 1261 003c 00EB0362 		add	r2, r0, r3, lsl #24
 1262 0040 0A60     		str	r2, [r1, #0]
 1263 0042 1EE0     		b	.L125
 1264              	.L126:
 225:../src/usb_prop.c ****         else if (( MAL_Buffer[0] ==  CMD_ERASE ) && (wlength == 5))
 1265              		.loc 1 225 0
 1266 0044 4129     		cmp	r1, #65
 1267 0046 1CD1     		bne	.L125
 1268 0048 5268     		ldr	r2, [r2, #4]
 1269 004a 052A     		cmp	r2, #5
 1270 004c 19D1     		bne	.L125
 229:../src/usb_prop.c ****           Pointer += MAL_Buffer[3] << 16;
 1271              		.loc 1 229 0
 1272 004e D878     		ldrb	r0, [r3, #3]	@ zero_extendqisi2
 228:../src/usb_prop.c ****           Pointer += MAL_Buffer[2] << 8;
 1273              		.loc 1 228 0
 1274 0050 9978     		ldrb	r1, [r3, #2]	@ zero_extendqisi2
 229:../src/usb_prop.c ****           Pointer += MAL_Buffer[3] << 16;
 1275              		.loc 1 229 0
 1276 0052 0204     		lsls	r2, r0, #16
 227:../src/usb_prop.c ****           Pointer  = MAL_Buffer[1];
 1277              		.loc 1 227 0
 1278 0054 5878     		ldrb	r0, [r3, #1]	@ zero_extendqisi2
 228:../src/usb_prop.c ****           Pointer += MAL_Buffer[2] << 8;
 1279              		.loc 1 228 0
 1280 0056 02EB0121 		add	r1, r2, r1, lsl #8
 230:../src/usb_prop.c ****           Pointer += MAL_Buffer[4] << 24;
 1281              		.loc 1 230 0
 1282 005a 1B79     		ldrb	r3, [r3, #4]	@ zero_extendqisi2
 229:../src/usb_prop.c ****           Pointer += MAL_Buffer[3] << 16;
 1283              		.loc 1 229 0
 1284 005c 0A18     		adds	r2, r1, r0
 230:../src/usb_prop.c ****           Pointer += MAL_Buffer[4] << 24;
 1285              		.loc 1 230 0
 1286 005e 1749     		ldr	r1, .L130+16
 1287 0060 02EB0360 		add	r0, r2, r3, lsl #24
 1288 0064 0860     		str	r0, [r1, #0]
 231:../src/usb_prop.c ****           MAL_Erase(Pointer);
 1289              		.loc 1 231 0
 1290 0066 FFF7FEFF 		bl	MAL_Erase
 1291              	.LVL68:
 1292 006a 0AE0     		b	.L125
 1293              	.L124:
 235:../src/usb_prop.c ****       else if (wBlockNum > 1)  // Download Command
 1294              		.loc 1 235 0
 1295 006c 012B     		cmp	r3, #1
 1296 006e 08D9     		bls	.L125
 1297              	.LVL69:
 237:../src/usb_prop.c ****         Addr = ((wBlockNum - 2) * wTransferSize) + Pointer;
 1298              		.loc 1 237 0
 1299 0070 1348     		ldr	r0, .L130+20
 1300 0072 1918     		adds	r1, r3, r0
 1301 0074 114B     		ldr	r3, .L130+16
 1302              	.LVL70:
 1303 0076 1868     		ldr	r0, [r3, #0]
 238:../src/usb_prop.c ****         MAL_Write(Addr, wlength);
 1304              		.loc 1 238 0
 1305 0078 00EB8120 		add	r0, r0, r1, lsl #10
 1306 007c 5168     		ldr	r1, [r2, #4]
 1307 007e FFF7FEFF 		bl	MAL_Write
 1308              	.LVL71:
 1309              	.L125:
 240:../src/usb_prop.c ****       wlength = 0;
 1310              		.loc 1 240 0
 1311 0082 0C48     		ldr	r0, .L130+8
 1312 0084 0023     		movs	r3, #0
 241:../src/usb_prop.c ****       wBlockNum = 0;
 1313              		.loc 1 241 0
 1314 0086 0360     		str	r3, [r0, #0]
 240:../src/usb_prop.c ****       wlength = 0;
 1315              		.loc 1 240 0
 1316 0088 4360     		str	r3, [r0, #4]
 243:../src/usb_prop.c ****       DeviceState =  STATE_dfuDNLOAD_SYNC;
 1317              		.loc 1 243 0
 1318 008a 094A     		ldr	r2, .L130+4
 244:../src/usb_prop.c ****       DeviceStatus[4] = DeviceState;
 1319              		.loc 1 244 0
 1320 008c 0D48     		ldr	r0, .L130+24
 243:../src/usb_prop.c ****       DeviceState =  STATE_dfuDNLOAD_SYNC;
 1321              		.loc 1 243 0
 1322 008e 0321     		movs	r1, #3
 1323 0090 1170     		strb	r1, [r2, #0]
 244:../src/usb_prop.c ****       DeviceStatus[4] = DeviceState;
 1324              		.loc 1 244 0
 1325 0092 0171     		strb	r1, [r0, #4]
 245:../src/usb_prop.c ****       DeviceStatus[1] = 0;
 1326              		.loc 1 245 0
 1327 0094 4370     		strb	r3, [r0, #1]
 246:../src/usb_prop.c ****       DeviceStatus[2] = 0;
 1328              		.loc 1 246 0
 1329 0096 8370     		strb	r3, [r0, #2]
 247:../src/usb_prop.c ****       DeviceStatus[3] = 0;
 1330              		.loc 1 247 0
 1331 0098 C370     		strb	r3, [r0, #3]
 1332 009a 08BD     		pop	{r3, pc}
 1333              	.L123:
 1334              	.LBE10:
 1335              	.LBE9:
 250:../src/usb_prop.c ****     else if (DeviceState == STATE_dfuMANIFEST)/* Manifestation in progress*/
 1336              		.loc 1 250 0
 1337 009c 072A     		cmp	r2, #7
 1338 009e 03D1     		bne	.L121
 257:../src/usb_prop.c **** }
 1339              		.loc 1 257 0
 1340 00a0 BDE80840 		pop	{r3, lr}
 252:../src/usb_prop.c ****       DFU_write_crc();
 1341              		.loc 1 252 0
 1342 00a4 FFF7FEBF 		b	DFU_write_crc
 1343              	.LVL72:
 1344              	.L121:
 1345 00a8 08BD     		pop	{r3, pc}
 1346              	.L131:
 1347 00aa 00BF     		.align	2
 1348              	.L130:
 1349 00ac 00000000 		.word	Device_Info
 1350 00b0 00000000 		.word	DeviceState
 1351 00b4 00000000 		.word	.LANCHOR0
 1352 00b8 00000000 		.word	MAL_Buffer
 1353 00bc 00000000 		.word	.LANCHOR1
 1354 00c0 FEFF3F00 		.word	4194302
 1355 00c4 00000000 		.word	DeviceStatus
 1356              		.cfi_endproc
 1357              	.LFE61:
 1359              		.global	DFU_String_Descriptor
 1360              		.global	Config_Descriptor
 1361              		.global	Device_Descriptor
 1362              		.global	User_Standard_Requests
 1363              		.global	Device_Property
 1364              		.global	Device_Table
 1365              		.global	Pointer
 1366              		.global	Manifest_State
 1367              		.global	wlength
 1368              		.global	wBlockNum
 1369              		.data
 1370              		.align	2
 1371              		.set	.LANCHOR1,. + 0
 1374              	Pointer:
 1375 0000 00A00008 		.word	134258688
 1378              	Config_Descriptor:
 1379 0004 00000000 		.word	DFU_ConfigDescriptor
 1380 0008 2400     		.short	36
 1381 000a 0000     		.space	2
 1384              	DFU_String_Descriptor:
 1385 000c 00000000 		.word	DFU_StringLangId
 1386 0010 0400     		.short	4
 1387 0012 0000     		.space	2
 1388 0014 00000000 		.word	DFU_StringVendor
 1389 0018 2600     		.short	38
 1390 001a 0000     		.space	2
 1391 001c 00000000 		.word	DFU_StringProduct
 1392 0020 1400     		.short	20
 1393 0022 0000     		.space	2
 1394 0024 00000000 		.word	DFU_StringSerial
 1395 0028 1A00     		.short	26
 1396 002a 0000     		.space	2
 1397 002c 00000000 		.word	DFU_StringInterface0
 1398 0030 6200     		.short	98
 1399 0032 0000     		.space	2
 1400 0034 00000000 		.word	DFU_StringInterface1
 1401 0038 6200     		.short	98
 1402 003a 0000     		.space	2
 1405              	Device_Descriptor:
 1406 003c 00000000 		.word	DFU_DeviceDescriptor
 1407 0040 1200     		.short	18
 1408 0042 0000     		.space	2
 1411              	Device_Property:
 1412 0044 00000000 		.word	DFU_init
 1413 0048 00000000 		.word	DFU_Reset
 1414 004c 00000000 		.word	DFU_Status_In
 1415 0050 00000000 		.word	DFU_Status_Out
 1416 0054 00000000 		.word	DFU_Data_Setup
 1417 0058 00000000 		.word	DFU_NoData_Setup
 1418 005c 00000000 		.word	DFU_Get_Interface_Setting
 1419 0060 00000000 		.word	DFU_GetDeviceDescriptor
 1420 0064 00000000 		.word	DFU_GetConfigDescriptor
 1421 0068 00000000 		.word	DFU_GetStringDescriptor
 1422 006c 00000000 		.word	0
 1423 0070 40       		.byte	64
 1424 0071 000000   		.space	3
 1427              	User_Standard_Requests:
 1428 0074 00000000 		.word	NOP_Process
 1429 0078 00000000 		.word	DFU_SetConfiguration
 1430 007c 00000000 		.word	NOP_Process
 1431 0080 00000000 		.word	NOP_Process
 1432 0084 00000000 		.word	NOP_Process
 1433 0088 00000000 		.word	NOP_Process
 1434 008c 00000000 		.word	NOP_Process
 1435 0090 00000000 		.word	NOP_Process
 1436 0094 00000000 		.word	DFU_SetDeviceAddress
 1439              	Device_Table:
 1440 0098 01       		.byte	1
 1441 0099 01       		.byte	1
 1442 009a 0000     		.bss
 1443              		.align	2
 1444              		.set	.LANCHOR0,. + 0
 1447              	wBlockNum:
 1448 0000 00000000 		.space	4
 1451              	wlength:
 1452 0004 00000000 		.space	4
 1455              	Manifest_State:
 1456 0008 00000000 		.space	4
 1457              		.text
 1458              	.Letext0:
 1459              		.file 2 "/usr/local/gcc-arm-none-eabi-4_7-2013q1/bin/../lib/gcc/arm-none-eabi/4.7.3/../../../../ar
 1460              		.file 3 "/Users/zac/code/spark/usb-dfu/libraries/STM32_USB-FS-Device_Driver/inc/usb_core.h"
 1461              		.file 4 "/Users/zac/code/spark/usb-dfu/libraries/STM32_USB-FS-Device_Driver/inc/usb_def.h"
 1462              		.file 5 "/Users/zac/code/spark/usb-dfu/inc/usb_prop.h"
 1463              		.file 6 "/Users/zac/code/spark/usb-dfu/inc/usb_pwr.h"
 1464              		.file 7 "/Users/zac/code/spark/usb-dfu/libraries/CMSIS/Include/core_cm3.h"
 1465              		.file 8 "/Users/zac/code/spark/usb-dfu/libraries/STM32_USB-FS-Device_Driver/inc/usb_init.h"
 1466              		.file 9 "/Users/zac/code/spark/usb-dfu/inc/usb_desc.h"
 1467              		.file 10 "/Users/zac/code/spark/usb-dfu/inc/dfu_mal.h"
 1468              		.file 11 "/Users/zac/code/spark/usb-dfu/libraries/STM32_USB-FS-Device_Driver/inc/usb_regs.h"
 1469              		.file 12 "/Users/zac/code/spark/usb-dfu/libraries/STM32_USB-FS-Device_Driver/inc/usb_sil.h"
 1470              		.file 13 "/Users/zac/code/spark/usb-dfu/inc/hw_config.h"
DEFINED SYMBOLS
                            *ABS*:0000000000000000 usb_prop.c
/var/folders/d1/846xqcps64v4wybnmd7kk8540000gn/T//ccBnWvem.s:19     .text.DFU_SetConfiguration:0000000000000000 $t
/var/folders/d1/846xqcps64v4wybnmd7kk8540000gn/T//ccBnWvem.s:24     .text.DFU_SetConfiguration:0000000000000000 DFU_SetConfiguration
/var/folders/d1/846xqcps64v4wybnmd7kk8540000gn/T//ccBnWvem.s:46     .text.DFU_SetConfiguration:0000000000000010 $d
/var/folders/d1/846xqcps64v4wybnmd7kk8540000gn/T//ccBnWvem.s:52     .text.DFU_SetDeviceAddress:0000000000000000 $t
/var/folders/d1/846xqcps64v4wybnmd7kk8540000gn/T//ccBnWvem.s:57     .text.DFU_SetDeviceAddress:0000000000000000 DFU_SetDeviceAddress
/var/folders/d1/846xqcps64v4wybnmd7kk8540000gn/T//ccBnWvem.s:72     .text.DFU_SetDeviceAddress:0000000000000008 $d
/var/folders/d1/846xqcps64v4wybnmd7kk8540000gn/T//ccBnWvem.s:77     .text.DFU_Status_In:0000000000000000 $t
/var/folders/d1/846xqcps64v4wybnmd7kk8540000gn/T//ccBnWvem.s:82     .text.DFU_Status_In:0000000000000000 DFU_Status_In
/var/folders/d1/846xqcps64v4wybnmd7kk8540000gn/T//ccBnWvem.s:94     .text.DFU_Data_Setup:0000000000000000 $t
/var/folders/d1/846xqcps64v4wybnmd7kk8540000gn/T//ccBnWvem.s:99     .text.DFU_Data_Setup:0000000000000000 DFU_Data_Setup
/var/folders/d1/846xqcps64v4wybnmd7kk8540000gn/T//ccBnWvem.s:195    .text.DFU_Data_Setup:0000000000000060 $d
/var/folders/d1/846xqcps64v4wybnmd7kk8540000gn/T//ccBnWvem.s:245    .text.DNLOAD:0000000000000000 DNLOAD
/var/folders/d1/846xqcps64v4wybnmd7kk8540000gn/T//ccBnWvem.s:363    .text.GETSTATUS:0000000000000000 GETSTATUS
/var/folders/d1/846xqcps64v4wybnmd7kk8540000gn/T//ccBnWvem.s:508    .text.UPLOAD:0000000000000000 UPLOAD
/var/folders/d1/846xqcps64v4wybnmd7kk8540000gn/T//ccBnWvem.s:326    .text.GETSTATE:0000000000000000 GETSTATE
/var/folders/d1/846xqcps64v4wybnmd7kk8540000gn/T//ccBnWvem.s:205    .text.DFU_Get_Interface_Setting:0000000000000000 $t
/var/folders/d1/846xqcps64v4wybnmd7kk8540000gn/T//ccBnWvem.s:210    .text.DFU_Get_Interface_Setting:0000000000000000 DFU_Get_Interface_Setting
/var/folders/d1/846xqcps64v4wybnmd7kk8540000gn/T//ccBnWvem.s:240    .text.DNLOAD:0000000000000000 $t
/var/folders/d1/846xqcps64v4wybnmd7kk8540000gn/T//ccBnWvem.s:311    .text.DNLOAD:0000000000000038 $d
/var/folders/d1/846xqcps64v4wybnmd7kk8540000gn/T//ccBnWvem.s:321    .text.GETSTATE:0000000000000000 $t
/var/folders/d1/846xqcps64v4wybnmd7kk8540000gn/T//ccBnWvem.s:352    .text.GETSTATE:0000000000000010 $d
/var/folders/d1/846xqcps64v4wybnmd7kk8540000gn/T//ccBnWvem.s:358    .text.GETSTATUS:0000000000000000 $t
/var/folders/d1/846xqcps64v4wybnmd7kk8540000gn/T//ccBnWvem.s:493    .text.GETSTATUS:000000000000008c $d
/var/folders/d1/846xqcps64v4wybnmd7kk8540000gn/T//ccBnWvem.s:503    .text.UPLOAD:0000000000000000 $t
/var/folders/d1/846xqcps64v4wybnmd7kk8540000gn/T//ccBnWvem.s:672    .text.UPLOAD:00000000000000ac $d
/var/folders/d1/846xqcps64v4wybnmd7kk8540000gn/T//ccBnWvem.s:684    .text.DFU_GetStringDescriptor:0000000000000000 $t
/var/folders/d1/846xqcps64v4wybnmd7kk8540000gn/T//ccBnWvem.s:689    .text.DFU_GetStringDescriptor:0000000000000000 DFU_GetStringDescriptor
/var/folders/d1/846xqcps64v4wybnmd7kk8540000gn/T//ccBnWvem.s:721    .text.DFU_GetStringDescriptor:0000000000000018 $d
/var/folders/d1/846xqcps64v4wybnmd7kk8540000gn/T//ccBnWvem.s:727    .text.DFU_GetConfigDescriptor:0000000000000000 $t
/var/folders/d1/846xqcps64v4wybnmd7kk8540000gn/T//ccBnWvem.s:732    .text.DFU_GetConfigDescriptor:0000000000000000 DFU_GetConfigDescriptor
/var/folders/d1/846xqcps64v4wybnmd7kk8540000gn/T//ccBnWvem.s:749    .text.DFU_GetConfigDescriptor:0000000000000008 $d
/var/folders/d1/846xqcps64v4wybnmd7kk8540000gn/T//ccBnWvem.s:754    .text.DFU_GetDeviceDescriptor:0000000000000000 $t
/var/folders/d1/846xqcps64v4wybnmd7kk8540000gn/T//ccBnWvem.s:759    .text.DFU_GetDeviceDescriptor:0000000000000000 DFU_GetDeviceDescriptor
/var/folders/d1/846xqcps64v4wybnmd7kk8540000gn/T//ccBnWvem.s:776    .text.DFU_GetDeviceDescriptor:0000000000000008 $d
/var/folders/d1/846xqcps64v4wybnmd7kk8540000gn/T//ccBnWvem.s:781    .text.DFU_Reset:0000000000000000 $t
/var/folders/d1/846xqcps64v4wybnmd7kk8540000gn/T//ccBnWvem.s:786    .text.DFU_Reset:0000000000000000 DFU_Reset
/var/folders/d1/846xqcps64v4wybnmd7kk8540000gn/T//ccBnWvem.s:887    .text.DFU_Reset:000000000000008c $d
/var/folders/d1/846xqcps64v4wybnmd7kk8540000gn/T//ccBnWvem.s:899    .text.DFU_init:0000000000000000 $t
/var/folders/d1/846xqcps64v4wybnmd7kk8540000gn/T//ccBnWvem.s:904    .text.DFU_init:0000000000000000 DFU_init
/var/folders/d1/846xqcps64v4wybnmd7kk8540000gn/T//ccBnWvem.s:939    .text.DFU_init:0000000000000020 $d
/var/folders/d1/846xqcps64v4wybnmd7kk8540000gn/T//ccBnWvem.s:945    .text.DFU_NoData_Setup:0000000000000000 $t
/var/folders/d1/846xqcps64v4wybnmd7kk8540000gn/T//ccBnWvem.s:950    .text.DFU_NoData_Setup:0000000000000000 DFU_NoData_Setup
/var/folders/d1/846xqcps64v4wybnmd7kk8540000gn/T//ccBnWvem.s:1126   .text.DFU_NoData_Setup:00000000000000bc $d
/var/folders/d1/846xqcps64v4wybnmd7kk8540000gn/T//ccBnWvem.s:1134   .text.DFU_write_crc:0000000000000000 $t
/var/folders/d1/846xqcps64v4wybnmd7kk8540000gn/T//ccBnWvem.s:1139   .text.DFU_write_crc:0000000000000000 DFU_write_crc
/var/folders/d1/846xqcps64v4wybnmd7kk8540000gn/T//ccBnWvem.s:1193   .text.DFU_write_crc:0000000000000034 $d
/var/folders/d1/846xqcps64v4wybnmd7kk8540000gn/T//ccBnWvem.s:1201   .text.DFU_Status_Out:0000000000000000 $t
/var/folders/d1/846xqcps64v4wybnmd7kk8540000gn/T//ccBnWvem.s:1206   .text.DFU_Status_Out:0000000000000000 DFU_Status_Out
/var/folders/d1/846xqcps64v4wybnmd7kk8540000gn/T//ccBnWvem.s:1349   .text.DFU_Status_Out:00000000000000ac $d
/var/folders/d1/846xqcps64v4wybnmd7kk8540000gn/T//ccBnWvem.s:1384   .data:000000000000000c DFU_String_Descriptor
/var/folders/d1/846xqcps64v4wybnmd7kk8540000gn/T//ccBnWvem.s:1378   .data:0000000000000004 Config_Descriptor
/var/folders/d1/846xqcps64v4wybnmd7kk8540000gn/T//ccBnWvem.s:1405   .data:000000000000003c Device_Descriptor
/var/folders/d1/846xqcps64v4wybnmd7kk8540000gn/T//ccBnWvem.s:1427   .data:0000000000000074 User_Standard_Requests
/var/folders/d1/846xqcps64v4wybnmd7kk8540000gn/T//ccBnWvem.s:1411   .data:0000000000000044 Device_Property
/var/folders/d1/846xqcps64v4wybnmd7kk8540000gn/T//ccBnWvem.s:1439   .data:0000000000000098 Device_Table
/var/folders/d1/846xqcps64v4wybnmd7kk8540000gn/T//ccBnWvem.s:1374   .data:0000000000000000 Pointer
/var/folders/d1/846xqcps64v4wybnmd7kk8540000gn/T//ccBnWvem.s:1455   .bss:0000000000000008 Manifest_State
/var/folders/d1/846xqcps64v4wybnmd7kk8540000gn/T//ccBnWvem.s:1451   .bss:0000000000000004 wlength
/var/folders/d1/846xqcps64v4wybnmd7kk8540000gn/T//ccBnWvem.s:1447   .bss:0000000000000000 wBlockNum
/var/folders/d1/846xqcps64v4wybnmd7kk8540000gn/T//ccBnWvem.s:1370   .data:0000000000000000 $d
/var/folders/d1/846xqcps64v4wybnmd7kk8540000gn/T//ccBnWvem.s:1443   .bss:0000000000000000 $d
                     .debug_frame:0000000000000010 $d
                           .group:0000000000000000 wm4.1.94ea818a60f77b04fe5add16507b1dca
                           .group:0000000000000000 wm4.platform_config.h.13.8c69bc765aea669af9d5d2fdc1149177
                           .group:0000000000000000 wm4.stm32f10x.h.57.69ab29c83f735418a543aa508b559235
                           .group:0000000000000000 wm4.core_cm3.h.32.8e21fbd14bb96c2b40e026c4d2c8fe1f
                           .group:0000000000000000 wm4.newlib.h.8.a9901dc52d1357e3e94003403d43f8b5
                           .group:0000000000000000 wm4.features.h.22.b72b3baab2bb2eab3661375590100b6b
                           .group:0000000000000000 wm4.config.h.193.5fb8ef056cdff92dec3dee9552839d8c
                           .group:0000000000000000 wm4._ansi.h.23.b5bb84d7ba97d82b5b1dc1826a7ae811
                           .group:0000000000000000 wm4.stdint.h.20.54ad762faa59e3c05491630641c8d8bf
                           .group:0000000000000000 wm4.core_cmInstr.h.25.d8165482ef3061013a2fc83e2d85f3d9
                           .group:0000000000000000 wm4.core_cm3.h.129.e08b7204181ea22e6a9fa84cb9ad0924
                           .group:0000000000000000 wm4.stm32f10x.h.532.91bd57525f6c583f00129a351847d405
                           .group:0000000000000000 wm4.stm32f10x_adc.h.89.9f2b285fa0070185d48a05b61a05798c
                           .group:0000000000000000 wm4.stm32f10x_bkp.h.31.74a586c036c8ee5d9205c6728cc8d6ab
                           .group:0000000000000000 wm4.stm32f10x_can.h.31.b14273b95de79d8fbb020ba042473fb1
                           .group:0000000000000000 wm4.stm32f10x_dac.h.31.116c27cadc3b4ee8aa44ed11b14b64ae
                           .group:0000000000000000 wm4.stm32f10x_dbgmcu.h.31.45f176e9b7a15051b8c69cb2700c78b8
                           .group:0000000000000000 wm4.stm32f10x_dma.h.31.ef16218235edc52b414c0353f44b4bf0
                           .group:0000000000000000 wm4.stm32f10x_exti.h.31.b25bcb4f1a2daad39d2d7dfa4e901646
                           .group:0000000000000000 wm4.stm32f10x_flash.h.31.0203bc95b65c5396b67991e07a675efb
                           .group:0000000000000000 wm4.stm32f10x_fsmc.h.31.a761d459aa046c2769a99b93e8763ba0
                           .group:0000000000000000 wm4.stm32f10x_gpio.h.31.0a32659dbac1fc1055c7cbdc248963be
                           .group:0000000000000000 wm4.stm32f10x_i2c.h.31.93d7dc2d477856f119d957730d4c6f1c
                           .group:0000000000000000 wm4.stm32f10x_iwdg.h.31.959ae9b7e1d603f1e5ae6468c0fc1624
                           .group:0000000000000000 wm4.stm32f10x_pwr.h.31.9168b6921e0cf03b467c7ed90861c701
                           .group:0000000000000000 wm4.stm32f10x_rcc.h.31.2ee3219a25ef4ced658f2fe9d8cd94aa
                           .group:0000000000000000 wm4.stm32f10x_rtc.h.31.00ba78fc0dbb06b6e6783a1e7fccf5a0
                           .group:0000000000000000 wm4.stm32f10x_sdio.h.31.37dab89d08b2364a3dfaace444dec7c3
                           .group:0000000000000000 wm4.stm32f10x_spi.h.31.d2f6e4626887cabe8c98f3a185590a36
                           .group:0000000000000000 wm4.stm32f10x_tim.h.31.6c06f7f26e0864f9cd59597f46ca2c7c
                           .group:0000000000000000 wm4.stm32f10x_usart.h.31.28d75d6af05cefbbfa00cf30a7c8a335
                           .group:0000000000000000 wm4.stm32f10x_wwdg.h.31.4504f930b88ade4f56d1e3f2a11c098b
                           .group:0000000000000000 wm4.misc.h.31.a89fba2040036f6f8c835a78a213e0cd
                           .group:0000000000000000 wm4.stm32f10x.h.8356.9fd2fa84655112ac7dfc5c88beeb383d
                           .group:0000000000000000 wm4.platform_config.h.39.39a4b3112cd0eabe7f19b3ecab0f4d96
                           .group:0000000000000000 wm4.sst25vf_spi.h.20.51b3171b29f6f7af7f6cc75ed7f465bf
                           .group:0000000000000000 wm4.hw_config.h.41.83f4dd94a29b2227d9beb55b68615b4b
                           .group:0000000000000000 wm4.usb_conf.h.13.2fc8b739597ce501ebf3c1632025270a
                           .group:0000000000000000 wm4.usb_regs.h.31.d9533108f8ac5724467880baa9cb0f26
                           .group:0000000000000000 wm4.usb_def.h.30.73e1a84be93039018a594bacb815cb88
                           .group:0000000000000000 wm4.usb_core.h.31.114a1d0e1de4beb01afdcd243bde9471
                           .group:0000000000000000 wm4.usb_prop.h.13.4963e441120feece4b54ad77bc413c2e
                           .group:0000000000000000 wm4.usb_desc.h.13.f4564814ac51230da7429e2f3b1463ed
                           .group:0000000000000000 wm4.dfu_mal.h.22.8960227c42ae735d4e74722cbac11c6c

UNDEFINED SYMBOLS
Device_Info
bDeviceState
pInformation
DeviceState
DeviceStatus
MAL_Buffer
MAL_GetStatus
MAL_Read
Standard_GetDescriptorData
SetEPRxCount
SetEPTxCount
Clear_Status_Out
SetEPRxValid
SetDeviceAddress
DFU_ConfigDescriptor
Get_SerialNum
PowerOn
USB_SIL_Init
USB_Interrupts_Config
Reset_Device
MAL_Erase
MAL_Write
DFU_StringLangId
DFU_StringVendor
DFU_StringProduct
DFU_StringSerial
DFU_StringInterface0
DFU_StringInterface1
DFU_DeviceDescriptor
NOP_Process
