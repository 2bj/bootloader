   1              		.syntax unified
   2              		.cpu cortex-m3
   3              		.fpu softvfp
   4              		.eabi_attribute 20, 1
   5              		.eabi_attribute 21, 1
   6              		.eabi_attribute 23, 3
   7              		.eabi_attribute 24, 1
   8              		.eabi_attribute 25, 1
   9              		.eabi_attribute 26, 1
  10              		.eabi_attribute 30, 4
  11              		.eabi_attribute 34, 1
  12              		.eabi_attribute 18, 4
  13              		.thumb
  14              		.file	"usb_pwr.c"
  15              		.text
  16              	.Ltext0:
  17              		.cfi_sections	.debug_frame
  18              		.section	.text.PowerOn,"ax",%progbits
  19              		.align	1
  20              		.global	PowerOn
  21              		.thumb
  22              		.thumb_func
  24              	PowerOn:
  25              	.LFB56:
  26              		.file 1 "../src/usb_pwr.c"
   1:../src/usb_pwr.c **** /**
   2:../src/usb_pwr.c ****   ******************************************************************************
   3:../src/usb_pwr.c ****   * @file    usb_pwr.c
   4:../src/usb_pwr.c ****   * @author  Spark Application Team
   5:../src/usb_pwr.c ****   * @version V1.0.0
   6:../src/usb_pwr.c ****   * @date    30-April-2013
   7:../src/usb_pwr.c ****   * @brief   Connection/disconnection & power management
   8:../src/usb_pwr.c ****   ******************************************************************************
   9:../src/usb_pwr.c ****   */
  10:../src/usb_pwr.c **** 
  11:../src/usb_pwr.c **** 
  12:../src/usb_pwr.c **** /* Includes ------------------------------------------------------------------*/
  13:../src/usb_pwr.c **** 
  14:../src/usb_pwr.c **** #include "hw_config.h" 
  15:../src/usb_pwr.c **** #include "usb_lib.h"
  16:../src/usb_pwr.c **** #include "usb_conf.h"
  17:../src/usb_pwr.c **** #include "usb_pwr.h"
  18:../src/usb_pwr.c **** 
  19:../src/usb_pwr.c **** /* Private typedef -----------------------------------------------------------*/
  20:../src/usb_pwr.c **** /* Private define ------------------------------------------------------------*/
  21:../src/usb_pwr.c **** /* Private macro -------------------------------------------------------------*/
  22:../src/usb_pwr.c **** /* Private variables ---------------------------------------------------------*/
  23:../src/usb_pwr.c **** __IO uint32_t bDeviceState = UNCONNECTED; /* USB device status */
  24:../src/usb_pwr.c **** __IO bool fSuspendEnabled = TRUE;  /* true when suspend is possible */
  25:../src/usb_pwr.c **** 
  26:../src/usb_pwr.c **** struct
  27:../src/usb_pwr.c **** {
  28:../src/usb_pwr.c ****   __IO RESUME_STATE eState;
  29:../src/usb_pwr.c ****   __IO uint8_t bESOFcnt;
  30:../src/usb_pwr.c **** }ResumeS;
  31:../src/usb_pwr.c **** 
  32:../src/usb_pwr.c **** /* Extern variables ----------------------------------------------------------*/
  33:../src/usb_pwr.c **** /* Private function prototypes -----------------------------------------------*/
  34:../src/usb_pwr.c **** /* Extern function prototypes ------------------------------------------------*/
  35:../src/usb_pwr.c **** /* Private functions ---------------------------------------------------------*/
  36:../src/usb_pwr.c **** 
  37:../src/usb_pwr.c **** /*******************************************************************************
  38:../src/usb_pwr.c **** * Function Name  : PowerOn
  39:../src/usb_pwr.c **** * Description    :
  40:../src/usb_pwr.c **** * Input          : None.
  41:../src/usb_pwr.c **** * Output         : None.
  42:../src/usb_pwr.c **** * Return         : USB_SUCCESS.
  43:../src/usb_pwr.c **** *******************************************************************************/
  44:../src/usb_pwr.c **** RESULT PowerOn(void)
  45:../src/usb_pwr.c **** {
  27              		.loc 1 45 0
  28              		.cfi_startproc
  29              		@ args = 0, pretend = 0, frame = 0
  30              		@ frame_needed = 0, uses_anonymous_args = 0
  31 0000 08B5     		push	{r3, lr}
  32              	.LCFI0:
  33              		.cfi_def_cfa_offset 8
  34              		.cfi_offset 3, -8
  35              		.cfi_offset 14, -4
  46:../src/usb_pwr.c ****   uint16_t wRegVal;
  47:../src/usb_pwr.c **** 
  48:../src/usb_pwr.c ****   /*** cable plugged-in ? ***/
  49:../src/usb_pwr.c ****   USB_Cable_Config(ENABLE);
  36              		.loc 1 49 0
  37 0002 0120     		movs	r0, #1
  38 0004 FFF7FEFF 		bl	USB_Cable_Config
  39              	.LVL0:
  50:../src/usb_pwr.c **** 
  51:../src/usb_pwr.c ****   /*** CNTR_PWDN = 0 ***/
  52:../src/usb_pwr.c ****   wRegVal = CNTR_FRES;
  53:../src/usb_pwr.c ****   _SetCNTR(wRegVal);
  40              		.loc 1 53 0
  41 0008 064B     		ldr	r3, .L2
  54:../src/usb_pwr.c **** 
  55:../src/usb_pwr.c ****   /*** CNTR_FRES = 0 ***/
  56:../src/usb_pwr.c ****   wInterrupt_Mask = 0;
  57:../src/usb_pwr.c ****   _SetCNTR(wInterrupt_Mask);
  58:../src/usb_pwr.c ****   /*** Clear pending interrupts ***/
  59:../src/usb_pwr.c ****   _SetISTR(0);
  42              		.loc 1 59 0
  43 000a 0749     		ldr	r1, .L2+4
  53:../src/usb_pwr.c ****   _SetCNTR(wRegVal);
  44              		.loc 1 53 0
  45 000c 0122     		movs	r2, #1
  57:../src/usb_pwr.c ****   _SetCNTR(wInterrupt_Mask);
  46              		.loc 1 57 0
  47 000e 0020     		movs	r0, #0
  53:../src/usb_pwr.c ****   _SetCNTR(wRegVal);
  48              		.loc 1 53 0
  49 0010 1A60     		str	r2, [r3, #0]
  57:../src/usb_pwr.c ****   _SetCNTR(wInterrupt_Mask);
  50              		.loc 1 57 0
  51 0012 1860     		str	r0, [r3, #0]
  52              		.loc 1 59 0
  53 0014 0860     		str	r0, [r1, #0]
  60:../src/usb_pwr.c ****   /*** Set interrupt mask ***/
  61:../src/usb_pwr.c ****   wInterrupt_Mask = CNTR_RESETM | CNTR_SUSPM | CNTR_WKUPM;
  54              		.loc 1 61 0
  55 0016 0549     		ldr	r1, .L2+8
  56 0018 4FF4E052 		mov	r2, #7168
  57 001c 0A80     		strh	r2, [r1, #0]	@ movhi
  62:../src/usb_pwr.c ****   _SetCNTR(wInterrupt_Mask);
  58              		.loc 1 62 0
  59 001e 1A60     		str	r2, [r3, #0]
  63:../src/usb_pwr.c **** 
  64:../src/usb_pwr.c ****   return USB_SUCCESS;
  65:../src/usb_pwr.c **** }
  60              		.loc 1 65 0
  61 0020 08BD     		pop	{r3, pc}
  62              	.L3:
  63 0022 00BF     		.align	2
  64              	.L2:
  65 0024 405C0040 		.word	1073765440
  66 0028 445C0040 		.word	1073765444
  67 002c 00000000 		.word	wInterrupt_Mask
  68              		.cfi_endproc
  69              	.LFE56:
  71              		.section	.text.PowerOff,"ax",%progbits
  72              		.align	1
  73              		.global	PowerOff
  74              		.thumb
  75              		.thumb_func
  77              	PowerOff:
  78              	.LFB57:
  66:../src/usb_pwr.c **** 
  67:../src/usb_pwr.c **** /*******************************************************************************
  68:../src/usb_pwr.c **** * Function Name  : PowerOff
  69:../src/usb_pwr.c **** * Description    : handles switch-off conditions
  70:../src/usb_pwr.c **** * Input          : None.
  71:../src/usb_pwr.c **** * Output         : None.
  72:../src/usb_pwr.c **** * Return         : USB_SUCCESS.
  73:../src/usb_pwr.c **** *******************************************************************************/
  74:../src/usb_pwr.c **** RESULT PowerOff()
  75:../src/usb_pwr.c **** {
  79              		.loc 1 75 0
  80              		.cfi_startproc
  81              		@ args = 0, pretend = 0, frame = 0
  82              		@ frame_needed = 0, uses_anonymous_args = 0
  83 0000 38B5     		push	{r3, r4, r5, lr}
  84              	.LCFI1:
  85              		.cfi_def_cfa_offset 16
  86              		.cfi_offset 3, -16
  87              		.cfi_offset 4, -12
  88              		.cfi_offset 5, -8
  89              		.cfi_offset 14, -4
  76:../src/usb_pwr.c ****   /* disable all interrupts and force USB reset */
  77:../src/usb_pwr.c ****   _SetCNTR(CNTR_FRES);
  78:../src/usb_pwr.c ****   /* clear interrupt status register */
  79:../src/usb_pwr.c ****   _SetISTR(0);
  90              		.loc 1 79 0
  91 0002 0648     		ldr	r0, .L5
  77:../src/usb_pwr.c ****   _SetCNTR(CNTR_FRES);
  92              		.loc 1 77 0
  93 0004 064D     		ldr	r5, .L5+4
  94              		.loc 1 79 0
  95 0006 0024     		movs	r4, #0
  77:../src/usb_pwr.c ****   _SetCNTR(CNTR_FRES);
  96              		.loc 1 77 0
  97 0008 0123     		movs	r3, #1
  98 000a 2B60     		str	r3, [r5, #0]
  99              		.loc 1 79 0
 100 000c 0460     		str	r4, [r0, #0]
  80:../src/usb_pwr.c ****   /* Disable the Pull-Up*/
  81:../src/usb_pwr.c ****   USB_Cable_Config(DISABLE);
 101              		.loc 1 81 0
 102 000e 2046     		mov	r0, r4
 103 0010 FFF7FEFF 		bl	USB_Cable_Config
 104              	.LVL1:
  82:../src/usb_pwr.c ****   /* switch-off device */
  83:../src/usb_pwr.c ****   _SetCNTR(CNTR_FRES + CNTR_PDWN);
 105              		.loc 1 83 0
 106 0014 0321     		movs	r1, #3
 107 0016 2960     		str	r1, [r5, #0]
  84:../src/usb_pwr.c **** 
  85:../src/usb_pwr.c ****   /* sw variables reset */
  86:../src/usb_pwr.c ****   /* ... */
  87:../src/usb_pwr.c **** 
  88:../src/usb_pwr.c ****   return USB_SUCCESS;
  89:../src/usb_pwr.c **** }
 108              		.loc 1 89 0
 109 0018 2046     		mov	r0, r4
 110 001a 38BD     		pop	{r3, r4, r5, pc}
 111              	.L6:
 112              		.align	2
 113              	.L5:
 114 001c 445C0040 		.word	1073765444
 115 0020 405C0040 		.word	1073765440
 116              		.cfi_endproc
 117              	.LFE57:
 119              		.section	.text.Suspend,"ax",%progbits
 120              		.align	1
 121              		.global	Suspend
 122              		.thumb
 123              		.thumb_func
 125              	Suspend:
 126              	.LFB58:
  90:../src/usb_pwr.c **** 
  91:../src/usb_pwr.c **** /*******************************************************************************
  92:../src/usb_pwr.c **** * Function Name  : Suspend
  93:../src/usb_pwr.c **** * Description    : sets suspend mode operating conditions
  94:../src/usb_pwr.c **** * Input          : None.
  95:../src/usb_pwr.c **** * Output         : None.
  96:../src/usb_pwr.c **** * Return         : USB_SUCCESS.
  97:../src/usb_pwr.c **** *******************************************************************************/
  98:../src/usb_pwr.c **** void Suspend(void)
  99:../src/usb_pwr.c **** {
 127              		.loc 1 99 0
 128              		.cfi_startproc
 129              		@ args = 0, pretend = 0, frame = 0
 130              		@ frame_needed = 0, uses_anonymous_args = 0
 131              		@ link register save eliminated.
 100:../src/usb_pwr.c ****   uint16_t wCNTR;
 101:../src/usb_pwr.c ****   /* suspend preparation */
 102:../src/usb_pwr.c ****   /* ... */
 103:../src/usb_pwr.c **** 
 104:../src/usb_pwr.c ****   /* macrocell enters suspend mode */
 105:../src/usb_pwr.c ****   wCNTR = _GetCNTR();
 132              		.loc 1 105 0
 133 0000 064B     		ldr	r3, .L8
 134 0002 1A68     		ldr	r2, [r3, #0]
 135              	.LVL2:
 106:../src/usb_pwr.c ****   wCNTR |= CNTR_FSUSP;
 107:../src/usb_pwr.c ****   _SetCNTR(wCNTR);
 136              		.loc 1 107 0
 137 0004 90B2     		uxth	r0, r2
 138 0006 40F00801 		orr	r1, r0, #8
 139 000a 1960     		str	r1, [r3, #0]
 108:../src/usb_pwr.c **** 
 109:../src/usb_pwr.c ****   /* ------------------ ONLY WITH BUS-POWERED DEVICES ---------------------- */
 110:../src/usb_pwr.c ****   /* power reduction */
 111:../src/usb_pwr.c ****   /* ... on connected devices */
 112:../src/usb_pwr.c **** 
 113:../src/usb_pwr.c ****   /* force low-power mode in the macrocell */
 114:../src/usb_pwr.c ****   wCNTR = _GetCNTR();
 140              		.loc 1 114 0
 141 000c 1A68     		ldr	r2, [r3, #0]
 142              	.LVL3:
 115:../src/usb_pwr.c ****   wCNTR |= CNTR_LPMODE;
 116:../src/usb_pwr.c ****   _SetCNTR(wCNTR);
 143              		.loc 1 116 0
 144 000e 90B2     		uxth	r0, r2
 145 0010 40F00401 		orr	r1, r0, #4
 146 0014 1960     		str	r1, [r3, #0]
 117:../src/usb_pwr.c **** 
 118:../src/usb_pwr.c ****   /* switch-off the clocks */
 119:../src/usb_pwr.c ****   /* ... */
 120:../src/usb_pwr.c ****   Enter_LowPowerMode();
 121:../src/usb_pwr.c **** 
 122:../src/usb_pwr.c **** }
 147              		.loc 1 122 0
 120:../src/usb_pwr.c ****   Enter_LowPowerMode();
 148              		.loc 1 120 0
 149 0016 FFF7FEBF 		b	Enter_LowPowerMode
 150              	.LVL4:
 151              	.L9:
 152 001a 00BF     		.align	2
 153              	.L8:
 154 001c 405C0040 		.word	1073765440
 155              		.cfi_endproc
 156              	.LFE58:
 158              		.section	.text.Resume_Init,"ax",%progbits
 159              		.align	1
 160              		.global	Resume_Init
 161              		.thumb
 162              		.thumb_func
 164              	Resume_Init:
 165              	.LFB59:
 123:../src/usb_pwr.c **** 
 124:../src/usb_pwr.c **** /*******************************************************************************
 125:../src/usb_pwr.c **** * Function Name  : Resume_Init
 126:../src/usb_pwr.c **** * Description    : Handles wake-up restoring normal operations
 127:../src/usb_pwr.c **** * Input          : None.
 128:../src/usb_pwr.c **** * Output         : None.
 129:../src/usb_pwr.c **** * Return         : USB_SUCCESS.
 130:../src/usb_pwr.c **** *******************************************************************************/
 131:../src/usb_pwr.c **** void Resume_Init(void)
 132:../src/usb_pwr.c **** {
 166              		.loc 1 132 0
 167              		.cfi_startproc
 168              		@ args = 0, pretend = 0, frame = 0
 169              		@ frame_needed = 0, uses_anonymous_args = 0
 170 0000 10B5     		push	{r4, lr}
 171              	.LCFI2:
 172              		.cfi_def_cfa_offset 8
 173              		.cfi_offset 4, -8
 174              		.cfi_offset 14, -4
 133:../src/usb_pwr.c ****   uint16_t wCNTR;
 134:../src/usb_pwr.c **** 
 135:../src/usb_pwr.c ****   /* ------------------ ONLY WITH BUS-POWERED DEVICES ---------------------- */
 136:../src/usb_pwr.c ****   /* restart the clocks */
 137:../src/usb_pwr.c ****   /* ...  */
 138:../src/usb_pwr.c **** 
 139:../src/usb_pwr.c ****   /* CNTR_LPMODE = 0 */
 140:../src/usb_pwr.c ****   wCNTR = _GetCNTR();
 175              		.loc 1 140 0
 176 0002 064C     		ldr	r4, .L11
 141:../src/usb_pwr.c ****   wCNTR &= (~CNTR_LPMODE);
 177              		.loc 1 141 0
 178 0004 4FF6FB73 		movw	r3, #65531
 140:../src/usb_pwr.c ****   wCNTR = _GetCNTR();
 179              		.loc 1 140 0
 180 0008 2268     		ldr	r2, [r4, #0]
 181              	.LVL5:
 182              		.loc 1 141 0
 183 000a 1340     		ands	r3, r3, r2
 184              	.LVL6:
 142:../src/usb_pwr.c ****   _SetCNTR(wCNTR);
 185              		.loc 1 142 0
 186 000c 2360     		str	r3, [r4, #0]
 143:../src/usb_pwr.c **** 
 144:../src/usb_pwr.c ****   /* restore full power */
 145:../src/usb_pwr.c ****   /* ... on connected devices */
 146:../src/usb_pwr.c ****   Leave_LowPowerMode();
 187              		.loc 1 146 0
 188 000e FFF7FEFF 		bl	Leave_LowPowerMode
 189              	.LVL7:
 147:../src/usb_pwr.c **** 
 148:../src/usb_pwr.c ****   /* reset FSUSP bit */
 149:../src/usb_pwr.c ****   _SetCNTR(IMR_MSK);
 190              		.loc 1 149 0
 191 0012 4FF43F40 		mov	r0, #48896
 192 0016 2060     		str	r0, [r4, #0]
 193 0018 10BD     		pop	{r4, pc}
 194              	.L12:
 195 001a 00BF     		.align	2
 196              	.L11:
 197 001c 405C0040 		.word	1073765440
 198              		.cfi_endproc
 199              	.LFE59:
 201              		.section	.text.Resume,"ax",%progbits
 202              		.align	1
 203              		.global	Resume
 204              		.thumb
 205              		.thumb_func
 207              	Resume:
 208              	.LFB60:
 150:../src/usb_pwr.c **** 
 151:../src/usb_pwr.c ****   /* reverse suspend preparation */
 152:../src/usb_pwr.c ****   /* ... */
 153:../src/usb_pwr.c **** 
 154:../src/usb_pwr.c **** }
 155:../src/usb_pwr.c **** 
 156:../src/usb_pwr.c **** /*******************************************************************************
 157:../src/usb_pwr.c **** * Function Name  : Resume
 158:../src/usb_pwr.c **** * Description    : This is the state machine handling resume operations and
 159:../src/usb_pwr.c **** *                 timing sequence. The control is based on the Resume structure
 160:../src/usb_pwr.c **** *                 variables and on the ESOF interrupt calling this subroutine
 161:../src/usb_pwr.c **** *                 without changing machine state.
 162:../src/usb_pwr.c **** * Input          : a state machine value (RESUME_STATE)
 163:../src/usb_pwr.c **** *                  RESUME_ESOF doesn't change ResumeS.eState allowing
 164:../src/usb_pwr.c **** *                  decrementing of the ESOF counter in different states.
 165:../src/usb_pwr.c **** * Output         : None.
 166:../src/usb_pwr.c **** * Return         : None.
 167:../src/usb_pwr.c **** *******************************************************************************/
 168:../src/usb_pwr.c **** void Resume(RESUME_STATE eResumeSetVal)
 169:../src/usb_pwr.c **** {
 209              		.loc 1 169 0
 210              		.cfi_startproc
 211              		@ args = 0, pretend = 0, frame = 0
 212              		@ frame_needed = 0, uses_anonymous_args = 0
 213              	.LVL8:
 214 0000 1F4B     		ldr	r3, .L33
 170:../src/usb_pwr.c ****   uint16_t wCNTR;
 171:../src/usb_pwr.c **** 
 172:../src/usb_pwr.c ****   if (eResumeSetVal != RESUME_ESOF)
 215              		.loc 1 172 0
 216 0002 0728     		cmp	r0, #7
 169:../src/usb_pwr.c **** {
 217              		.loc 1 169 0
 218 0004 10B5     		push	{r4, lr}
 219              	.LCFI3:
 220              		.cfi_def_cfa_offset 8
 221              		.cfi_offset 4, -8
 222              		.cfi_offset 14, -4
 173:../src/usb_pwr.c ****     ResumeS.eState = eResumeSetVal;
 223              		.loc 1 173 0
 224 0006 18BF     		it	ne
 225 0008 1870     		strbne	r0, [r3, #0]
 174:../src/usb_pwr.c **** 
 175:../src/usb_pwr.c ****   switch (ResumeS.eState)
 226              		.loc 1 175 0
 227 000a 1A78     		ldrb	r2, [r3, #0]	@ zero_extendqisi2
 228 000c 1C4C     		ldr	r4, .L33
 229 000e 052A     		cmp	r2, #5
 230 0010 33D8     		bhi	.L15
 231 0012 DFE802F0 		tbb	[pc, r2]
 232              	.L22:
 233 0016 03       		.byte	(.L16-.L22)/2
 234 0017 07       		.byte	(.L17-.L22)/2
 235 0018 0C       		.byte	(.L18-.L22)/2
 236 0019 10       		.byte	(.L19-.L22)/2
 237 001a 18       		.byte	(.L20-.L22)/2
 238 001b 23       		.byte	(.L21-.L22)/2
 239              		.align	1
 240              	.L16:
 176:../src/usb_pwr.c ****   {
 177:../src/usb_pwr.c ****     case RESUME_EXTERNAL:
 178:../src/usb_pwr.c ****       Resume_Init();
 241              		.loc 1 178 0
 242 001c FFF7FEFF 		bl	Resume_Init
 243              	.LVL9:
 179:../src/usb_pwr.c ****       ResumeS.eState = RESUME_OFF;
 244              		.loc 1 179 0
 245 0020 0622     		movs	r2, #6
 246 0022 02E0     		b	.L29
 247              	.LVL10:
 248              	.L17:
 180:../src/usb_pwr.c ****       break;
 181:../src/usb_pwr.c ****     case RESUME_INTERNAL:
 182:../src/usb_pwr.c ****       Resume_Init();
 249              		.loc 1 182 0
 250 0024 FFF7FEFF 		bl	Resume_Init
 251              	.LVL11:
 183:../src/usb_pwr.c ****       ResumeS.eState = RESUME_START;
 252              		.loc 1 183 0
 253 0028 0422     		movs	r2, #4
 254              	.L29:
 255 002a 2270     		strb	r2, [r4, #0]
 184:../src/usb_pwr.c ****       break;
 256              		.loc 1 184 0
 257 002c 10BD     		pop	{r4, pc}
 258              	.LVL12:
 259              	.L18:
 185:../src/usb_pwr.c ****     case RESUME_LATER:
 186:../src/usb_pwr.c ****       ResumeS.bESOFcnt = 2;
 260              		.loc 1 186 0
 261 002e 0221     		movs	r1, #2
 262 0030 5970     		strb	r1, [r3, #1]
 187:../src/usb_pwr.c ****       ResumeS.eState = RESUME_WAIT;
 263              		.loc 1 187 0
 264 0032 0320     		movs	r0, #3
 265              	.LVL13:
 266 0034 22E0     		b	.L30
 267              	.LVL14:
 268              	.L19:
 188:../src/usb_pwr.c ****       break;
 189:../src/usb_pwr.c ****     case RESUME_WAIT:
 190:../src/usb_pwr.c ****       ResumeS.bESOFcnt--;
 269              		.loc 1 190 0
 270 0036 5978     		ldrb	r1, [r3, #1]	@ zero_extendqisi2
 271 0038 4A1E     		subs	r2, r1, #1
 272 003a D0B2     		uxtb	r0, r2
 273              	.LVL15:
 274 003c 5870     		strb	r0, [r3, #1]
 191:../src/usb_pwr.c ****       if (ResumeS.bESOFcnt == 0)
 275              		.loc 1 191 0
 276 003e 5B78     		ldrb	r3, [r3, #1]	@ zero_extendqisi2
 277 0040 EBB9     		cbnz	r3, .L13
 192:../src/usb_pwr.c ****         ResumeS.eState = RESUME_START;
 278              		.loc 1 192 0
 279 0042 0420     		movs	r0, #4
 280 0044 17E0     		b	.L31
 281              	.LVL16:
 282              	.L20:
 193:../src/usb_pwr.c ****       break;
 194:../src/usb_pwr.c ****     case RESUME_START:
 195:../src/usb_pwr.c ****       wCNTR = _GetCNTR();
 283              		.loc 1 195 0
 284 0046 0F4B     		ldr	r3, .L33+4
 285 0048 1868     		ldr	r0, [r3, #0]
 286              	.LVL17:
 196:../src/usb_pwr.c ****       wCNTR |= CNTR_RESUME;
 197:../src/usb_pwr.c ****       _SetCNTR(wCNTR);
 287              		.loc 1 197 0
 288 004a 81B2     		uxth	r1, r0
 289 004c 41F01002 		orr	r2, r1, #16
 290 0050 1A60     		str	r2, [r3, #0]
 198:../src/usb_pwr.c ****       ResumeS.eState = RESUME_ON;
 199:../src/usb_pwr.c ****       ResumeS.bESOFcnt = 10;
 291              		.loc 1 199 0
 292 0052 0A20     		movs	r0, #10
 293              	.LVL18:
 198:../src/usb_pwr.c ****       ResumeS.eState = RESUME_ON;
 294              		.loc 1 198 0
 295 0054 0523     		movs	r3, #5
 296 0056 2370     		strb	r3, [r4, #0]
 297              		.loc 1 199 0
 298 0058 6070     		strb	r0, [r4, #1]
 200:../src/usb_pwr.c ****       break;
 299              		.loc 1 200 0
 300 005a 10BD     		pop	{r4, pc}
 301              	.LVL19:
 302              	.L21:
 201:../src/usb_pwr.c ****     case RESUME_ON:
 202:../src/usb_pwr.c ****       ResumeS.bESOFcnt--;
 303              		.loc 1 202 0
 304 005c 5878     		ldrb	r0, [r3, #1]	@ zero_extendqisi2
 305              	.LVL20:
 306 005e 411E     		subs	r1, r0, #1
 307 0060 CAB2     		uxtb	r2, r1
 308 0062 5A70     		strb	r2, [r3, #1]
 203:../src/usb_pwr.c ****       if (ResumeS.bESOFcnt == 0)
 309              		.loc 1 203 0
 310 0064 5B78     		ldrb	r3, [r3, #1]	@ zero_extendqisi2
 311 0066 53B9     		cbnz	r3, .L13
 204:../src/usb_pwr.c ****       {
 205:../src/usb_pwr.c ****         wCNTR = _GetCNTR();
 312              		.loc 1 205 0
 313 0068 0648     		ldr	r0, .L33+4
 206:../src/usb_pwr.c ****         wCNTR &= (~CNTR_RESUME);
 314              		.loc 1 206 0
 315 006a 4FF6EF72 		movw	r2, #65519
 205:../src/usb_pwr.c ****         wCNTR = _GetCNTR();
 316              		.loc 1 205 0
 317 006e 0168     		ldr	r1, [r0, #0]
 318              	.LVL21:
 319              		.loc 1 206 0
 320 0070 0A40     		ands	r2, r2, r1
 321              	.LVL22:
 207:../src/usb_pwr.c ****         _SetCNTR(wCNTR);
 322              		.loc 1 207 0
 323 0072 0260     		str	r2, [r0, #0]
 208:../src/usb_pwr.c ****         ResumeS.eState = RESUME_OFF;
 324              		.loc 1 208 0
 325 0074 0620     		movs	r0, #6
 326              	.LVL23:
 327              	.L31:
 328 0076 024B     		ldr	r3, .L33
 329 0078 00E0     		b	.L30
 330              	.LVL24:
 331              	.L15:
 209:../src/usb_pwr.c ****       }
 210:../src/usb_pwr.c ****       break;
 211:../src/usb_pwr.c ****     case RESUME_OFF:
 212:../src/usb_pwr.c ****     case RESUME_ESOF:
 213:../src/usb_pwr.c ****     default:
 214:../src/usb_pwr.c ****       ResumeS.eState = RESUME_OFF;
 332              		.loc 1 214 0
 333 007a 0620     		movs	r0, #6
 334              	.LVL25:
 335              	.L30:
 336 007c 1870     		strb	r0, [r3, #0]
 337              	.L13:
 338 007e 10BD     		pop	{r4, pc}
 339              	.L34:
 340              		.align	2
 341              	.L33:
 342 0080 00000000 		.word	ResumeS
 343 0084 405C0040 		.word	1073765440
 344              		.cfi_endproc
 345              	.LFE60:
 347              		.comm	ResumeS,2,1
 348              		.global	fSuspendEnabled
 349              		.global	bDeviceState
 350              		.data
 353              	fSuspendEnabled:
 354 0000 01       		.byte	1
 355              		.bss
 356              		.align	2
 359              	bDeviceState:
 360 0000 00000000 		.space	4
 361              		.text
 362              	.Letext0:
 363              		.file 2 "/usr/local/gcc-arm-none-eabi-4_7-2013q1/bin/../lib/gcc/arm-none-eabi/4.7.3/../../../../ar
 364              		.file 3 "/Users/zac/code/spark/usb-dfu/libraries/CMSIS/Device/ST/STM32F10x/Include/stm32f10x.h"
 365              		.file 4 "/Users/zac/code/spark/usb-dfu/libraries/STM32_USB-FS-Device_Driver/inc/usb_type.h"
 366              		.file 5 "/Users/zac/code/spark/usb-dfu/libraries/STM32_USB-FS-Device_Driver/inc/usb_core.h"
 367              		.file 6 "/Users/zac/code/spark/usb-dfu/inc/usb_pwr.h"
 368              		.file 7 "/Users/zac/code/spark/usb-dfu/libraries/CMSIS/Include/core_cm3.h"
 369              		.file 8 "/Users/zac/code/spark/usb-dfu/libraries/STM32_USB-FS-Device_Driver/inc/usb_init.h"
 370              		.file 9 "/Users/zac/code/spark/usb-dfu/inc/hw_config.h"
DEFINED SYMBOLS
                            *ABS*:0000000000000000 usb_pwr.c
/var/folders/d1/846xqcps64v4wybnmd7kk8540000gn/T//ccMFJE2H.s:19     .text.PowerOn:0000000000000000 $t
/var/folders/d1/846xqcps64v4wybnmd7kk8540000gn/T//ccMFJE2H.s:24     .text.PowerOn:0000000000000000 PowerOn
/var/folders/d1/846xqcps64v4wybnmd7kk8540000gn/T//ccMFJE2H.s:65     .text.PowerOn:0000000000000024 $d
/var/folders/d1/846xqcps64v4wybnmd7kk8540000gn/T//ccMFJE2H.s:72     .text.PowerOff:0000000000000000 $t
/var/folders/d1/846xqcps64v4wybnmd7kk8540000gn/T//ccMFJE2H.s:77     .text.PowerOff:0000000000000000 PowerOff
/var/folders/d1/846xqcps64v4wybnmd7kk8540000gn/T//ccMFJE2H.s:114    .text.PowerOff:000000000000001c $d
/var/folders/d1/846xqcps64v4wybnmd7kk8540000gn/T//ccMFJE2H.s:120    .text.Suspend:0000000000000000 $t
/var/folders/d1/846xqcps64v4wybnmd7kk8540000gn/T//ccMFJE2H.s:125    .text.Suspend:0000000000000000 Suspend
/var/folders/d1/846xqcps64v4wybnmd7kk8540000gn/T//ccMFJE2H.s:154    .text.Suspend:000000000000001c $d
/var/folders/d1/846xqcps64v4wybnmd7kk8540000gn/T//ccMFJE2H.s:159    .text.Resume_Init:0000000000000000 $t
/var/folders/d1/846xqcps64v4wybnmd7kk8540000gn/T//ccMFJE2H.s:164    .text.Resume_Init:0000000000000000 Resume_Init
/var/folders/d1/846xqcps64v4wybnmd7kk8540000gn/T//ccMFJE2H.s:197    .text.Resume_Init:000000000000001c $d
/var/folders/d1/846xqcps64v4wybnmd7kk8540000gn/T//ccMFJE2H.s:202    .text.Resume:0000000000000000 $t
/var/folders/d1/846xqcps64v4wybnmd7kk8540000gn/T//ccMFJE2H.s:207    .text.Resume:0000000000000000 Resume
/var/folders/d1/846xqcps64v4wybnmd7kk8540000gn/T//ccMFJE2H.s:233    .text.Resume:0000000000000016 $d
/var/folders/d1/846xqcps64v4wybnmd7kk8540000gn/T//ccMFJE2H.s:239    .text.Resume:000000000000001c $t
/var/folders/d1/846xqcps64v4wybnmd7kk8540000gn/T//ccMFJE2H.s:342    .text.Resume:0000000000000080 $d
                            *COM*:0000000000000002 ResumeS
/var/folders/d1/846xqcps64v4wybnmd7kk8540000gn/T//ccMFJE2H.s:353    .data:0000000000000000 fSuspendEnabled
/var/folders/d1/846xqcps64v4wybnmd7kk8540000gn/T//ccMFJE2H.s:359    .bss:0000000000000000 bDeviceState
/var/folders/d1/846xqcps64v4wybnmd7kk8540000gn/T//ccMFJE2H.s:356    .bss:0000000000000000 $d
                     .debug_frame:0000000000000010 $d
                           .group:0000000000000000 wm4.1.94ea818a60f77b04fe5add16507b1dca
                           .group:0000000000000000 wm4.platform_config.h.13.8c69bc765aea669af9d5d2fdc1149177
                           .group:0000000000000000 wm4.stm32f10x.h.57.69ab29c83f735418a543aa508b559235
                           .group:0000000000000000 wm4.core_cm3.h.32.8e21fbd14bb96c2b40e026c4d2c8fe1f
                           .group:0000000000000000 wm4.newlib.h.8.a9901dc52d1357e3e94003403d43f8b5
                           .group:0000000000000000 wm4.features.h.22.b72b3baab2bb2eab3661375590100b6b
                           .group:0000000000000000 wm4.config.h.193.5fb8ef056cdff92dec3dee9552839d8c
                           .group:0000000000000000 wm4._ansi.h.23.b5bb84d7ba97d82b5b1dc1826a7ae811
                           .group:0000000000000000 wm4.stdint.h.20.54ad762faa59e3c05491630641c8d8bf
                           .group:0000000000000000 wm4.core_cmInstr.h.25.d8165482ef3061013a2fc83e2d85f3d9
                           .group:0000000000000000 wm4.core_cm3.h.129.e08b7204181ea22e6a9fa84cb9ad0924
                           .group:0000000000000000 wm4.stm32f10x.h.532.91bd57525f6c583f00129a351847d405
                           .group:0000000000000000 wm4.stm32f10x_adc.h.89.9f2b285fa0070185d48a05b61a05798c
                           .group:0000000000000000 wm4.stm32f10x_bkp.h.31.74a586c036c8ee5d9205c6728cc8d6ab
                           .group:0000000000000000 wm4.stm32f10x_can.h.31.b14273b95de79d8fbb020ba042473fb1
                           .group:0000000000000000 wm4.stm32f10x_dac.h.31.116c27cadc3b4ee8aa44ed11b14b64ae
                           .group:0000000000000000 wm4.stm32f10x_dbgmcu.h.31.45f176e9b7a15051b8c69cb2700c78b8
                           .group:0000000000000000 wm4.stm32f10x_dma.h.31.ef16218235edc52b414c0353f44b4bf0
                           .group:0000000000000000 wm4.stm32f10x_exti.h.31.b25bcb4f1a2daad39d2d7dfa4e901646
                           .group:0000000000000000 wm4.stm32f10x_flash.h.31.0203bc95b65c5396b67991e07a675efb
                           .group:0000000000000000 wm4.stm32f10x_fsmc.h.31.a761d459aa046c2769a99b93e8763ba0
                           .group:0000000000000000 wm4.stm32f10x_gpio.h.31.0a32659dbac1fc1055c7cbdc248963be
                           .group:0000000000000000 wm4.stm32f10x_i2c.h.31.93d7dc2d477856f119d957730d4c6f1c
                           .group:0000000000000000 wm4.stm32f10x_iwdg.h.31.959ae9b7e1d603f1e5ae6468c0fc1624
                           .group:0000000000000000 wm4.stm32f10x_pwr.h.31.9168b6921e0cf03b467c7ed90861c701
                           .group:0000000000000000 wm4.stm32f10x_rcc.h.31.2ee3219a25ef4ced658f2fe9d8cd94aa
                           .group:0000000000000000 wm4.stm32f10x_rtc.h.31.00ba78fc0dbb06b6e6783a1e7fccf5a0
                           .group:0000000000000000 wm4.stm32f10x_sdio.h.31.37dab89d08b2364a3dfaace444dec7c3
                           .group:0000000000000000 wm4.stm32f10x_spi.h.31.d2f6e4626887cabe8c98f3a185590a36
                           .group:0000000000000000 wm4.stm32f10x_tim.h.31.6c06f7f26e0864f9cd59597f46ca2c7c
                           .group:0000000000000000 wm4.stm32f10x_usart.h.31.28d75d6af05cefbbfa00cf30a7c8a335
                           .group:0000000000000000 wm4.stm32f10x_wwdg.h.31.4504f930b88ade4f56d1e3f2a11c098b
                           .group:0000000000000000 wm4.misc.h.31.a89fba2040036f6f8c835a78a213e0cd
                           .group:0000000000000000 wm4.stm32f10x.h.8356.9fd2fa84655112ac7dfc5c88beeb383d
                           .group:0000000000000000 wm4.platform_config.h.39.39a4b3112cd0eabe7f19b3ecab0f4d96
                           .group:0000000000000000 wm4.sst25vf_spi.h.20.51b3171b29f6f7af7f6cc75ed7f465bf
                           .group:0000000000000000 wm4.hw_config.h.41.83f4dd94a29b2227d9beb55b68615b4b
                           .group:0000000000000000 wm4.usb_conf.h.13.2fc8b739597ce501ebf3c1632025270a
                           .group:0000000000000000 wm4.usb_regs.h.31.d9533108f8ac5724467880baa9cb0f26
                           .group:0000000000000000 wm4.usb_def.h.30.73e1a84be93039018a594bacb815cb88
                           .group:0000000000000000 wm4.usb_core.h.31.114a1d0e1de4beb01afdcd243bde9471

UNDEFINED SYMBOLS
USB_Cable_Config
wInterrupt_Mask
Enter_LowPowerMode
Leave_LowPowerMode
