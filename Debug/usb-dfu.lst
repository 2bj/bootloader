
usb-dfu.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00008000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000024fc  0800010c  0800010c  0000810c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .data         00000254  20000000  08002608  00010000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  3 .bss          00000490  20000254  0800285c  00010254  2**2
                  ALLOC
  4 ._usrstack    00000100  200006e4  08002cec  00010254  2**0
                  ALLOC
  5 .comment      00000070  00000000  00000000  00010254  2**0
                  CONTENTS, READONLY
  6 .ARM.attributes 0000002f  00000000  00000000  000102c4  2**0
                  CONTENTS, READONLY
  7 .debug_aranges 00000f08  00000000  00000000  000102f8  2**3
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_info   0000e1b8  00000000  00000000  00011200  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_abbrev 000032b7  00000000  00000000  0001f3b8  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_line   0000c87e  00000000  00000000  0002266f  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_frame  00002118  00000000  00000000  0002eef0  2**2
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_str    00056502  00000000  00000000  00031008  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_loc    00007b94  00000000  00000000  0008750a  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_ranges 00000f90  00000000  00000000  0008f0a0  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_macro  00011810  00000000  00000000  00090030  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

0800010c <Reset_Handler>:
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:	

/* Copy the data segment initializers from flash to SRAM */  
  movs	r1, #0
 800010c:	2100      	movs	r1, #0
  b	LoopCopyDataInit
 800010e:	f000 b804 	b.w	800011a <LoopCopyDataInit>

08000112 <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
 8000112:	4b0c      	ldr	r3, [pc, #48]	; (8000144 <LoopFillZerobss+0x12>)
	ldr	r3, [r3, r1]
 8000114:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
 8000116:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
 8000118:	3104      	adds	r1, #4

0800011a <LoopCopyDataInit>:
    
LoopCopyDataInit:
	ldr	r0, =_sdata
 800011a:	480b      	ldr	r0, [pc, #44]	; (8000148 <LoopFillZerobss+0x16>)
	ldr	r3, =_edata
 800011c:	4b0b      	ldr	r3, [pc, #44]	; (800014c <LoopFillZerobss+0x1a>)
	adds	r2, r0, r1
 800011e:	1842      	adds	r2, r0, r1
	cmp	r2, r3
 8000120:	429a      	cmp	r2, r3
	bcc	CopyDataInit
 8000122:	f4ff aff6 	bcc.w	8000112 <CopyDataInit>
	ldr	r2, =_sbss
 8000126:	4a0a      	ldr	r2, [pc, #40]	; (8000150 <LoopFillZerobss+0x1e>)
	b	LoopFillZerobss
 8000128:	f000 b803 	b.w	8000132 <LoopFillZerobss>

0800012c <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
	movs	r3, #0
 800012c:	2300      	movs	r3, #0
	str	r3, [r2], #4
 800012e:	f842 3b04 	str.w	r3, [r2], #4

08000132 <LoopFillZerobss>:
    
LoopFillZerobss:
	ldr	r3, = _ebss
 8000132:	4b08      	ldr	r3, [pc, #32]	; (8000154 <LoopFillZerobss+0x22>)
	cmp	r2, r3
 8000134:	429a      	cmp	r2, r3
	bcc	FillZerobss
 8000136:	f4ff aff9 	bcc.w	800012c <FillZerobss>
/* Call the clock system intitialization function.*/
  bl  SystemInit 	
 800013a:	f000 fdad 	bl	8000c98 <SystemInit>
/* Call the application's entry point.*/
	bl	main
 800013e:	f000 fadb 	bl	80006f8 <main>
	bx	lr    
 8000142:	4770      	bx	lr
/* Copy the data segment initializers from flash to SRAM */  
  movs	r1, #0
  b	LoopCopyDataInit

CopyDataInit:
	ldr	r3, =_sidata
 8000144:	08002608 	.word	0x08002608
	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
	adds	r1, r1, #4
    
LoopCopyDataInit:
	ldr	r0, =_sdata
 8000148:	20000000 	.word	0x20000000
	ldr	r3, =_edata
 800014c:	20000254 	.word	0x20000254
	adds	r2, r0, r1
	cmp	r2, r3
	bcc	CopyDataInit
	ldr	r2, =_sbss
 8000150:	20000254 	.word	0x20000254
FillZerobss:
	movs	r3, #0
	str	r3, [r2], #4
    
LoopFillZerobss:
	ldr	r3, = _ebss
 8000154:	200006e4 	.word	0x200006e4

08000158 <ADC1_2_IRQHandler>:
 * @retval None       
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000158:	f7ff bffe 	b.w	8000158 <ADC1_2_IRQHandler>

0800015c <MAL_Init>:
* Input          : None
* Output         : None
* Return         : None
*******************************************************************************/
uint16_t MAL_Init(void)
{
 800015c:	b508      	push	{r3, lr}
  FLASH_If_Init(); /* Internal Flash */
 800015e:	f000 f861 	bl	8000224 <FLASH_If_Init>

#ifdef SPARK_SFLASH_ENABLE
  SPI_If_Init();   /* SPI Flash */
 8000162:	f000 fb5d 	bl	8000820 <SPI_If_Init>
#endif

  return MAL_OK;
}
 8000166:	2000      	movs	r0, #0
 8000168:	bd08      	pop	{r3, pc}
	...

0800016c <MAL_Erase>:
* Input          : None
* Output         : None
* Return         : None
*******************************************************************************/
uint16_t MAL_Erase(uint32_t SectorAddress)
{
 800016c:	b508      	push	{r3, lr}
  switch (SectorAddress & MAL_MASK)
 800016e:	f010 437c 	ands.w	r3, r0, #4227858432	; 0xfc000000
 8000172:	d004      	beq.n	800017e <MAL_Erase+0x12>
 8000174:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8000178:	d108      	bne.n	800018c <MAL_Erase+0x20>
  {
    case INTERNAL_FLASH_BASE:
      pMAL_Erase = FLASH_If_Erase;
 800017a:	4a05      	ldr	r2, [pc, #20]	; (8000190 <MAL_Erase+0x24>)
 800017c:	e000      	b.n	8000180 <MAL_Erase+0x14>
      break;
      
#ifdef SPARK_SFLASH_ENABLE
    case SPI_FLASH_BASE:
      pMAL_Erase = SPI_If_Erase;
 800017e:	4a05      	ldr	r2, [pc, #20]	; (8000194 <MAL_Erase+0x28>)
 8000180:	4905      	ldr	r1, [pc, #20]	; (8000198 <MAL_Erase+0x2c>)
#endif

    default:
      return MAL_FAIL;
  }
  return pMAL_Erase(SectorAddress);
 8000182:	4b05      	ldr	r3, [pc, #20]	; (8000198 <MAL_Erase+0x2c>)
      pMAL_Erase = FLASH_If_Erase;
      break;
      
#ifdef SPARK_SFLASH_ENABLE
    case SPI_FLASH_BASE:
      pMAL_Erase = SPI_If_Erase;
 8000184:	600a      	str	r2, [r1, #0]
#endif

    default:
      return MAL_FAIL;
  }
  return pMAL_Erase(SectorAddress);
 8000186:	681a      	ldr	r2, [r3, #0]
 8000188:	4790      	blx	r2
 800018a:	bd08      	pop	{r3, pc}
      pMAL_Erase = SPI_If_Erase;
      break;
#endif

    default:
      return MAL_FAIL;
 800018c:	2001      	movs	r0, #1
  }
  return pMAL_Erase(SectorAddress);
}
 800018e:	bd08      	pop	{r3, pc}
 8000190:	08000229 	.word	0x08000229
 8000194:	0800082b 	.word	0x0800082b
 8000198:	20000684 	.word	0x20000684

0800019c <MAL_Write>:
* Input          : None
* Output         : None
* Return         : None
*******************************************************************************/
uint16_t MAL_Write (uint32_t SectorAddress, uint32_t DataLength)
{
 800019c:	b508      	push	{r3, lr}
  switch (SectorAddress & MAL_MASK)
 800019e:	f010 437c 	ands.w	r3, r0, #4227858432	; 0xfc000000
 80001a2:	d004      	beq.n	80001ae <MAL_Write+0x12>
 80001a4:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80001a8:	d108      	bne.n	80001bc <MAL_Write+0x20>
  {
    case INTERNAL_FLASH_BASE:
      pMAL_Write = FLASH_If_Write;
 80001aa:	4a05      	ldr	r2, [pc, #20]	; (80001c0 <MAL_Write+0x24>)
 80001ac:	e000      	b.n	80001b0 <MAL_Write+0x14>
      break;

#ifdef SPARK_SFLASH_ENABLE
    case SPI_FLASH_BASE:
      pMAL_Write = SPI_If_Write;
 80001ae:	4a05      	ldr	r2, [pc, #20]	; (80001c4 <MAL_Write+0x28>)
 80001b0:	4b05      	ldr	r3, [pc, #20]	; (80001c8 <MAL_Write+0x2c>)
 80001b2:	601a      	str	r2, [r3, #0]
#endif

    default:
      return MAL_FAIL;
  }
  return pMAL_Write(SectorAddress, DataLength);
 80001b4:	4a04      	ldr	r2, [pc, #16]	; (80001c8 <MAL_Write+0x2c>)
 80001b6:	6813      	ldr	r3, [r2, #0]
 80001b8:	4798      	blx	r3
 80001ba:	bd08      	pop	{r3, pc}
      pMAL_Write = SPI_If_Write;
      break;
#endif

    default:
      return MAL_FAIL;
 80001bc:	2001      	movs	r0, #1
  }
  return pMAL_Write(SectorAddress, DataLength);
}
 80001be:	bd08      	pop	{r3, pc}
 80001c0:	08000235 	.word	0x08000235
 80001c4:	08000835 	.word	0x08000835
 80001c8:	2000068c 	.word	0x2000068c

080001cc <MAL_Read>:
* Input          : None
* Output         : None
* Return         : Buffer pointer
*******************************************************************************/
uint8_t *MAL_Read (uint32_t SectorAddress, uint32_t DataLength)
{
 80001cc:	b508      	push	{r3, lr}
  switch (SectorAddress & MAL_MASK)
 80001ce:	f010 437c 	ands.w	r3, r0, #4227858432	; 0xfc000000
 80001d2:	d004      	beq.n	80001de <MAL_Read+0x12>
 80001d4:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80001d8:	d108      	bne.n	80001ec <MAL_Read+0x20>
  {
    case INTERNAL_FLASH_BASE:
      pMAL_Read = FLASH_If_Read;
 80001da:	4a05      	ldr	r2, [pc, #20]	; (80001f0 <MAL_Read+0x24>)
 80001dc:	e000      	b.n	80001e0 <MAL_Read+0x14>
      break;
      
#ifdef SPARK_SFLASH_ENABLE
    case SPI_FLASH_BASE:
      pMAL_Read = SPI_If_Read;
 80001de:	4a05      	ldr	r2, [pc, #20]	; (80001f4 <MAL_Read+0x28>)
 80001e0:	4b05      	ldr	r3, [pc, #20]	; (80001f8 <MAL_Read+0x2c>)
 80001e2:	601a      	str	r2, [r3, #0]
#endif

    default:
      return 0;
  }
  return pMAL_Read (SectorAddress, DataLength);
 80001e4:	4a04      	ldr	r2, [pc, #16]	; (80001f8 <MAL_Read+0x2c>)
 80001e6:	6813      	ldr	r3, [r2, #0]
 80001e8:	4798      	blx	r3
 80001ea:	bd08      	pop	{r3, pc}
      pMAL_Read = SPI_If_Read;
      break;
#endif

    default:
      return 0;
 80001ec:	2000      	movs	r0, #0
  }
  return pMAL_Read (SectorAddress, DataLength);
}
 80001ee:	bd08      	pop	{r3, pc}
 80001f0:	08000279 	.word	0x08000279
 80001f4:	0800084d 	.word	0x0800084d
 80001f8:	20000688 	.word	0x20000688

080001fc <MAL_GetStatus>:
* Description    : Get status
* Input          : None
* Output         : None
* Return         : Buffer pointer
*******************************************************************************/
uint16_t MAL_GetStatus(uint32_t SectorAddress , uint8_t Cmd, uint8_t *buffer)
 80001fc:	f010 4f7c 	tst.w	r0, #4227858432	; 0xfc000000
#endif
  }

  uint8_t y = Cmd & 0x01;
  
  SET_POLLING_TIMING(TimingTable[x][y]);  /* Media Erase/Write Timing */
 8000200:	bf0c      	ite	eq
 8000202:	2302      	moveq	r3, #2
 8000204:	2300      	movne	r3, #0
 8000206:	f001 0101 	and.w	r1, r1, #1
 800020a:	1858      	adds	r0, r3, r1
 800020c:	4904      	ldr	r1, [pc, #16]	; (8000220 <MAL_GetStatus+0x24>)
 800020e:	f831 3010 	ldrh.w	r3, [r1, r0, lsl #1]
 8000212:	0a18      	lsrs	r0, r3, #8
 8000214:	7090      	strb	r0, [r2, #2]
 8000216:	2000      	movs	r0, #0
 8000218:	7053      	strb	r3, [r2, #1]
 800021a:	70d0      	strb	r0, [r2, #3]

  return MAL_OK;
}
 800021c:	4770      	bx	lr
 800021e:	bf00      	nop
 8000220:	080025d8 	.word	0x080025d8

08000224 <FLASH_If_Init>:
* Return         : None
*******************************************************************************/
uint16_t FLASH_If_Init(void)
{
  return MAL_OK;
}
 8000224:	2000      	movs	r0, #0
 8000226:	4770      	bx	lr

08000228 <FLASH_If_Erase>:
* Input          : None
* Output         : None
* Return         : None
*******************************************************************************/
uint16_t FLASH_If_Erase(uint32_t SectorAddress)
{
 8000228:	b508      	push	{r3, lr}
  FLASH_ErasePage(SectorAddress);
 800022a:	f002 f867 	bl	80022fc <FLASH_ErasePage>
  
  return MAL_OK;
}
 800022e:	2000      	movs	r0, #0
 8000230:	bd08      	pop	{r3, pc}
	...

08000234 <FLASH_If_Write>:
*******************************************************************************/
uint16_t FLASH_If_Write(uint32_t SectorAddress, uint32_t DataLength)
{
  uint32_t idx = 0;
  
  if  (DataLength & 0x3) /* Not an aligned data */
 8000234:	078b      	lsls	r3, r1, #30
* Input          : None
* Output         : None
* Return         : None
*******************************************************************************/
uint16_t FLASH_If_Write(uint32_t SectorAddress, uint32_t DataLength)
{
 8000236:	b570      	push	{r4, r5, r6, lr}
 8000238:	4606      	mov	r6, r0
 800023a:	460d      	mov	r5, r1
  uint32_t idx = 0;
  
  if  (DataLength & 0x3) /* Not an aligned data */
 800023c:	d001      	beq.n	8000242 <FLASH_If_Write+0xe>
 800023e:	460b      	mov	r3, r1
 8000240:	e001      	b.n	8000246 <FLASH_If_Write+0x12>
 8000242:	2400      	movs	r4, #0
 8000244:	e00a      	b.n	800025c <FLASH_If_Write+0x28>
  {
    for (idx = DataLength; idx < ((DataLength & 0xFFFC) + 4); idx++)
 8000246:	f64f 72fc 	movw	r2, #65532	; 0xfffc
 800024a:	402a      	ands	r2, r5
 800024c:	1d10      	adds	r0, r2, #4
 800024e:	4283      	cmp	r3, r0
 8000250:	d2f7      	bcs.n	8000242 <FLASH_If_Write+0xe>
    {
      MAL_Buffer[idx] = 0xFF;
 8000252:	4c08      	ldr	r4, [pc, #32]	; (8000274 <FLASH_If_Write+0x40>)
 8000254:	21ff      	movs	r1, #255	; 0xff
 8000256:	5519      	strb	r1, [r3, r4]
{
  uint32_t idx = 0;
  
  if  (DataLength & 0x3) /* Not an aligned data */
  {
    for (idx = DataLength; idx < ((DataLength & 0xFFFC) + 4); idx++)
 8000258:	3301      	adds	r3, #1
 800025a:	e7f4      	b.n	8000246 <FLASH_If_Write+0x12>
      MAL_Buffer[idx] = 0xFF;
    }
  } 
  
  /* Data received are Word multiple */    
  for (idx = 0; idx <  DataLength; idx = idx + 4)
 800025c:	42ac      	cmp	r4, r5
 800025e:	eb04 0006 	add.w	r0, r4, r6
 8000262:	d205      	bcs.n	8000270 <FLASH_If_Write+0x3c>
  {
    FLASH_ProgramWord(SectorAddress, *(uint32_t *)(MAL_Buffer + idx));  
 8000264:	4b03      	ldr	r3, [pc, #12]	; (8000274 <FLASH_If_Write+0x40>)
 8000266:	58e1      	ldr	r1, [r4, r3]
 8000268:	f002 f81e 	bl	80022a8 <FLASH_ProgramWord>
      MAL_Buffer[idx] = 0xFF;
    }
  } 
  
  /* Data received are Word multiple */    
  for (idx = 0; idx <  DataLength; idx = idx + 4)
 800026c:	3404      	adds	r4, #4
 800026e:	e7f5      	b.n	800025c <FLASH_If_Write+0x28>
    FLASH_ProgramWord(SectorAddress, *(uint32_t *)(MAL_Buffer + idx));  
    SectorAddress += 4;
  } 
 
  return MAL_OK;
}
 8000270:	2000      	movs	r0, #0
 8000272:	bd70      	pop	{r4, r5, r6, pc}
 8000274:	20000280 	.word	0x20000280

08000278 <FLASH_If_Read>:
* Return         : buffer address pointer
*******************************************************************************/
uint8_t *FLASH_If_Read (uint32_t SectorAddress, uint32_t DataLength)
{
  return  (uint8_t*)(SectorAddress);
}
 8000278:	4770      	bx	lr

0800027a <IntToUnicode>:
* Description    : Convert Hex 32Bits value into char.
* Input          : None.
* Return         : None.
*******************************************************************************/
static void IntToUnicode (uint32_t value , uint8_t *pbuf , uint8_t len)
{
 800027a:	b510      	push	{r4, lr}
* Function Name  : HexToChar.
* Description    : Convert Hex 32Bits value into char.
* Input          : None.
* Return         : None.
*******************************************************************************/
static void IntToUnicode (uint32_t value , uint8_t *pbuf , uint8_t len)
 800027c:	3101      	adds	r1, #1
{
    uint8_t idx = 0;

    for( idx = 0 ; idx < len ; idx ++)
 800027e:	2300      	movs	r3, #0
 8000280:	4293      	cmp	r3, r2
 8000282:	d00e      	beq.n	80002a2 <IntToUnicode+0x28>
    {
        if( ((value >> 28)) < 0xA )
 8000284:	0f04      	lsrs	r4, r0, #28
 8000286:	2c09      	cmp	r4, #9
 8000288:	d801      	bhi.n	800028e <IntToUnicode+0x14>
        {
            pbuf[ 2* idx] = (value >> 28) + '0';
 800028a:	3430      	adds	r4, #48	; 0x30
 800028c:	e000      	b.n	8000290 <IntToUnicode+0x16>
        }
        else
        {
            pbuf[2* idx] = (value >> 28) + 'A' - 10;
 800028e:	3437      	adds	r4, #55	; 0x37
 8000290:	f801 4c01 	strb.w	r4, [r1, #-1]
*******************************************************************************/
static void IntToUnicode (uint32_t value , uint8_t *pbuf , uint8_t len)
{
    uint8_t idx = 0;

    for( idx = 0 ; idx < len ; idx ++)
 8000294:	3301      	adds	r3, #1
            pbuf[2* idx] = (value >> 28) + 'A' - 10;
        }

        value = value << 4;

        pbuf[ 2* idx + 1] = 0;
 8000296:	2400      	movs	r4, #0
        else
        {
            pbuf[2* idx] = (value >> 28) + 'A' - 10;
        }

        value = value << 4;
 8000298:	0100      	lsls	r0, r0, #4

        pbuf[ 2* idx + 1] = 0;
 800029a:	f801 4b02 	strb.w	r4, [r1], #2
*******************************************************************************/
static void IntToUnicode (uint32_t value , uint8_t *pbuf , uint8_t len)
{
    uint8_t idx = 0;

    for( idx = 0 ; idx < len ; idx ++)
 800029e:	b2db      	uxtb	r3, r3
 80002a0:	e7ee      	b.n	8000280 <IntToUnicode+0x6>

        value = value << 4;

        pbuf[ 2* idx + 1] = 0;
    }
}
 80002a2:	bd10      	pop	{r4, pc}

080002a4 <NVIC_Configuration>:
	/* 4 bits for pre-emption priority(0-15 PreemptionPriority) and 0 bits for subpriority(0 SubPriority) */
	//NVIC_PriorityGroupConfig(NVIC_PriorityGroup_4);

	/* Configure the Priority Group to 2 bits */
	/* 2 bits for pre-emption priority(0-3 PreemptionPriority) and 2 bits for subpriority(0-3 SubPriority) */
	NVIC_PriorityGroupConfig(NVIC_PriorityGroup_2);
 80002a4:	f44f 60a0 	mov.w	r0, #1280	; 0x500
 80002a8:	f001 bf1e 	b.w	80020e8 <NVIC_PriorityGroupConfig>

080002ac <LED_Init>:
  *     @arg LED1
  *     @arg LED2
  * @retval None
  */
void LED_Init(Led_TypeDef Led)
{
 80002ac:	b537      	push	{r0, r1, r2, r4, r5, lr}
    GPIO_InitTypeDef  GPIO_InitStructure;

    /* Enable the GPIO_LED Clock */
    RCC_APB2PeriphClockCmd(LED_CLK[Led], ENABLE);
 80002ae:	4d0c      	ldr	r5, [pc, #48]	; (80002e0 <LED_Init+0x34>)
  *     @arg LED1
  *     @arg LED2
  * @retval None
  */
void LED_Init(Led_TypeDef Led)
{
 80002b0:	4604      	mov	r4, r0
    GPIO_InitTypeDef  GPIO_InitStructure;

    /* Enable the GPIO_LED Clock */
    RCC_APB2PeriphClockCmd(LED_CLK[Led], ENABLE);
 80002b2:	2101      	movs	r1, #1
 80002b4:	f855 0020 	ldr.w	r0, [r5, r0, lsl #2]
 80002b8:	f002 f8be 	bl	8002438 <RCC_APB2PeriphClockCmd>

    /* Configure the GPIO_LED pin */
    GPIO_InitStructure.GPIO_Pin = LED_PIN[Led];
 80002bc:	eb05 0544 	add.w	r5, r5, r4, lsl #1
    GPIO_InitStructure.GPIO_Mode = GPIO_Mode_Out_PP;
    GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;

    GPIO_Init(LED_PORT[Led], &GPIO_InitStructure);
 80002c0:	4a08      	ldr	r2, [pc, #32]	; (80002e4 <LED_Init+0x38>)
    /* Enable the GPIO_LED Clock */
    RCC_APB2PeriphClockCmd(LED_CLK[Led], ENABLE);

    /* Configure the GPIO_LED pin */
    GPIO_InitStructure.GPIO_Pin = LED_PIN[Led];
    GPIO_InitStructure.GPIO_Mode = GPIO_Mode_Out_PP;
 80002c2:	2010      	movs	r0, #16
    GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
 80002c4:	2103      	movs	r1, #3

    /* Enable the GPIO_LED Clock */
    RCC_APB2PeriphClockCmd(LED_CLK[Led], ENABLE);

    /* Configure the GPIO_LED pin */
    GPIO_InitStructure.GPIO_Pin = LED_PIN[Led];
 80002c6:	892b      	ldrh	r3, [r5, #8]
    GPIO_InitStructure.GPIO_Mode = GPIO_Mode_Out_PP;
 80002c8:	f88d 0007 	strb.w	r0, [sp, #7]
    GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
 80002cc:	f88d 1006 	strb.w	r1, [sp, #6]

    GPIO_Init(LED_PORT[Led], &GPIO_InitStructure);
 80002d0:	f852 0024 	ldr.w	r0, [r2, r4, lsl #2]
 80002d4:	a901      	add	r1, sp, #4

    /* Enable the GPIO_LED Clock */
    RCC_APB2PeriphClockCmd(LED_CLK[Led], ENABLE);

    /* Configure the GPIO_LED pin */
    GPIO_InitStructure.GPIO_Pin = LED_PIN[Led];
 80002d6:	f8ad 3004 	strh.w	r3, [sp, #4]
    GPIO_InitStructure.GPIO_Mode = GPIO_Mode_Out_PP;
    GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;

    GPIO_Init(LED_PORT[Led], &GPIO_InitStructure);
 80002da:	f002 f82d 	bl	8002338 <GPIO_Init>
}
 80002de:	bd3e      	pop	{r1, r2, r3, r4, r5, pc}
 80002e0:	080025e0 	.word	0x080025e0
 80002e4:	20000000 	.word	0x20000000

080002e8 <LED_Off>:
  *     @arg LED2
  * @retval None
  */
void LED_Off(Led_TypeDef Led)
{
    LED_PORT[Led]->BRR = LED_PIN[Led];
 80002e8:	4b04      	ldr	r3, [pc, #16]	; (80002fc <LED_Off+0x14>)
 80002ea:	4a05      	ldr	r2, [pc, #20]	; (8000300 <LED_Off+0x18>)
 80002ec:	f853 1020 	ldr.w	r1, [r3, r0, lsl #2]
 80002f0:	eb02 0040 	add.w	r0, r2, r0, lsl #1
 80002f4:	8903      	ldrh	r3, [r0, #8]
 80002f6:	614b      	str	r3, [r1, #20]
 80002f8:	4770      	bx	lr
 80002fa:	bf00      	nop
 80002fc:	20000000 	.word	0x20000000
 8000300:	080025e0 	.word	0x080025e0

08000304 <LED_Toggle>:
  *     @arg LED2
  * @retval None
  */
void LED_Toggle(Led_TypeDef Led)
{
    LED_PORT[Led]->ODR ^= LED_PIN[Led];
 8000304:	4b05      	ldr	r3, [pc, #20]	; (800031c <LED_Toggle+0x18>)
 8000306:	4906      	ldr	r1, [pc, #24]	; (8000320 <LED_Toggle+0x1c>)
 8000308:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
 800030c:	eb01 0040 	add.w	r0, r1, r0, lsl #1
 8000310:	68da      	ldr	r2, [r3, #12]
 8000312:	8901      	ldrh	r1, [r0, #8]
 8000314:	404a      	eors	r2, r1
 8000316:	60da      	str	r2, [r3, #12]
 8000318:	4770      	bx	lr
 800031a:	bf00      	nop
 800031c:	20000000 	.word	0x20000000
 8000320:	080025e0 	.word	0x080025e0

08000324 <BUTTON_EXTI_Config>:
        BUTTON_EXTI_Config(Button, ENABLE);
    }
}

void BUTTON_EXTI_Config(Button_TypeDef Button, FunctionalState NewState)
{
 8000324:	b573      	push	{r0, r1, r4, r5, r6, lr}
    EXTI_InitTypeDef EXTI_InitStructure;

	/* Connect Button EXTI Line to Button GPIO Pin */
    GPIO_EXTILineConfig(BUTTON_PORT_SOURCE[Button], BUTTON_PIN_SOURCE[Button]);
 8000326:	4c0e      	ldr	r4, [pc, #56]	; (8000360 <BUTTON_EXTI_Config+0x3c>)
        BUTTON_EXTI_Config(Button, ENABLE);
    }
}

void BUTTON_EXTI_Config(Button_TypeDef Button, FunctionalState NewState)
{
 8000328:	460e      	mov	r6, r1
    EXTI_InitTypeDef EXTI_InitStructure;

	/* Connect Button EXTI Line to Button GPIO Pin */
    GPIO_EXTILineConfig(BUTTON_PORT_SOURCE[Button], BUTTON_PIN_SOURCE[Button]);
 800032a:	eb04 0440 	add.w	r4, r4, r0, lsl #1
 800032e:	7c21      	ldrb	r1, [r4, #16]
        BUTTON_EXTI_Config(Button, ENABLE);
    }
}

void BUTTON_EXTI_Config(Button_TypeDef Button, FunctionalState NewState)
{
 8000330:	4605      	mov	r5, r0
    EXTI_InitTypeDef EXTI_InitStructure;

	/* Connect Button EXTI Line to Button GPIO Pin */
    GPIO_EXTILineConfig(BUTTON_PORT_SOURCE[Button], BUTTON_PIN_SOURCE[Button]);
 8000332:	7b20      	ldrb	r0, [r4, #12]
 8000334:	f002 f85a 	bl	80023ec <GPIO_EXTILineConfig>

	/* Clear the EXTI line pending flag */
	EXTI_ClearFlag(BUTTON_EXTI_LINE[Button]);
 8000338:	8aa4      	ldrh	r4, [r4, #20]
 800033a:	4620      	mov	r0, r4
 800033c:	f001 ff6c 	bl	8002218 <EXTI_ClearFlag>

    /* Configure Button EXTI line */
    EXTI_InitStructure.EXTI_Line = BUTTON_EXTI_LINE[Button];
    EXTI_InitStructure.EXTI_Mode = EXTI_Mode_Interrupt;
	EXTI_InitStructure.EXTI_Trigger = BUTTON_EXTI_TRIGGER[Button];
 8000340:	4808      	ldr	r0, [pc, #32]	; (8000364 <BUTTON_EXTI_Config+0x40>)
	/* Clear the EXTI line pending flag */
	EXTI_ClearFlag(BUTTON_EXTI_LINE[Button]);

    /* Configure Button EXTI line */
    EXTI_InitStructure.EXTI_Line = BUTTON_EXTI_LINE[Button];
    EXTI_InitStructure.EXTI_Mode = EXTI_Mode_Interrupt;
 8000342:	2300      	movs	r3, #0
	EXTI_InitStructure.EXTI_Trigger = BUTTON_EXTI_TRIGGER[Button];
 8000344:	1945      	adds	r5, r0, r5
 8000346:	7a29      	ldrb	r1, [r5, #8]
    EXTI_InitStructure.EXTI_LineCmd = NewState;
    EXTI_Init(&EXTI_InitStructure);
 8000348:	4668      	mov	r0, sp

	/* Clear the EXTI line pending flag */
	EXTI_ClearFlag(BUTTON_EXTI_LINE[Button]);

    /* Configure Button EXTI line */
    EXTI_InitStructure.EXTI_Line = BUTTON_EXTI_LINE[Button];
 800034a:	9400      	str	r4, [sp, #0]
    EXTI_InitStructure.EXTI_Mode = EXTI_Mode_Interrupt;
 800034c:	f88d 3004 	strb.w	r3, [sp, #4]
	EXTI_InitStructure.EXTI_Trigger = BUTTON_EXTI_TRIGGER[Button];
 8000350:	f88d 1005 	strb.w	r1, [sp, #5]
    EXTI_InitStructure.EXTI_LineCmd = NewState;
 8000354:	f88d 6006 	strb.w	r6, [sp, #6]
    EXTI_Init(&EXTI_InitStructure);
 8000358:	f001 ff22 	bl	80021a0 <EXTI_Init>
}
 800035c:	bd7c      	pop	{r2, r3, r4, r5, r6, pc}
 800035e:	bf00      	nop
 8000360:	080025e0 	.word	0x080025e0
 8000364:	20000000 	.word	0x20000000

08000368 <BUTTON_Init>:
  *     @arg BUTTON_MODE_EXTI: Button will be connected to EXTI line with interrupt
  *                     generation capability
  * @retval None
  */
void BUTTON_Init(Button_TypeDef Button, ButtonMode_TypeDef Button_Mode)
{
 8000368:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    GPIO_InitTypeDef GPIO_InitStructure;
    NVIC_InitTypeDef NVIC_InitStructure;
    TIM_TimeBaseInitTypeDef TIM_TimeBaseStructure;

    /* Enable the BUTTON Clock */
    RCC_APB2PeriphClockCmd(BUTTON_CLK[Button] | RCC_APB2Periph_AFIO, ENABLE);
 800036c:	4f35      	ldr	r7, [pc, #212]	; (8000444 <BUTTON_Init+0xdc>)
 800036e:	0086      	lsls	r6, r0, #2
 8000370:	19bb      	adds	r3, r7, r6
  *     @arg BUTTON_MODE_EXTI: Button will be connected to EXTI line with interrupt
  *                     generation capability
  * @retval None
  */
void BUTTON_Init(Button_TypeDef Button, ButtonMode_TypeDef Button_Mode)
{
 8000372:	4605      	mov	r5, r0
    GPIO_InitTypeDef GPIO_InitStructure;
    NVIC_InitTypeDef NVIC_InitStructure;
    TIM_TimeBaseInitTypeDef TIM_TimeBaseStructure;

    /* Enable the BUTTON Clock */
    RCC_APB2PeriphClockCmd(BUTTON_CLK[Button] | RCC_APB2Periph_AFIO, ENABLE);
 8000374:	6998      	ldr	r0, [r3, #24]
  *     @arg BUTTON_MODE_EXTI: Button will be connected to EXTI line with interrupt
  *                     generation capability
  * @retval None
  */
void BUTTON_Init(Button_TypeDef Button, ButtonMode_TypeDef Button_Mode)
{
 8000376:	b086      	sub	sp, #24
 8000378:	460c      	mov	r4, r1
    GPIO_InitTypeDef GPIO_InitStructure;
    NVIC_InitTypeDef NVIC_InitStructure;
    TIM_TimeBaseInitTypeDef TIM_TimeBaseStructure;

    /* Enable the BUTTON Clock */
    RCC_APB2PeriphClockCmd(BUTTON_CLK[Button] | RCC_APB2Periph_AFIO, ENABLE);
 800037a:	f040 0001 	orr.w	r0, r0, #1
 800037e:	2101      	movs	r1, #1
 8000380:	f002 f85a 	bl	8002438 <RCC_APB2PeriphClockCmd>

    /* Configure Button pin as input floating */
    GPIO_InitStructure.GPIO_Mode = BUTTON_GPIO_MODE[Button];
 8000384:	4b30      	ldr	r3, [pc, #192]	; (8000448 <BUTTON_Init+0xe0>)
    GPIO_InitStructure.GPIO_Pin = BUTTON_PIN[Button];
 8000386:	eb07 0745 	add.w	r7, r7, r5, lsl #1

    /* Enable the BUTTON Clock */
    RCC_APB2PeriphClockCmd(BUTTON_CLK[Button] | RCC_APB2Periph_AFIO, ENABLE);

    /* Configure Button pin as input floating */
    GPIO_InitStructure.GPIO_Mode = BUTTON_GPIO_MODE[Button];
 800038a:	195a      	adds	r2, r3, r5
 800038c:	7a91      	ldrb	r1, [r2, #10]
    GPIO_InitStructure.GPIO_Pin = BUTTON_PIN[Button];
 800038e:	8c38      	ldrh	r0, [r7, #32]

    /* Enable the BUTTON Clock */
    RCC_APB2PeriphClockCmd(BUTTON_CLK[Button] | RCC_APB2Periph_AFIO, ENABLE);

    /* Configure Button pin as input floating */
    GPIO_InitStructure.GPIO_Mode = BUTTON_GPIO_MODE[Button];
 8000390:	f88d 1007 	strb.w	r1, [sp, #7]
    GPIO_InitStructure.GPIO_Pin = BUTTON_PIN[Button];
    GPIO_Init(BUTTON_PORT[Button], &GPIO_InitStructure);
 8000394:	199e      	adds	r6, r3, r6
    /* Enable the BUTTON Clock */
    RCC_APB2PeriphClockCmd(BUTTON_CLK[Button] | RCC_APB2Periph_AFIO, ENABLE);

    /* Configure Button pin as input floating */
    GPIO_InitStructure.GPIO_Mode = BUTTON_GPIO_MODE[Button];
    GPIO_InitStructure.GPIO_Pin = BUTTON_PIN[Button];
 8000396:	a906      	add	r1, sp, #24
 8000398:	f821 0d14 	strh.w	r0, [r1, #-20]!
    GPIO_Init(BUTTON_PORT[Button], &GPIO_InitStructure);
 800039c:	68f0      	ldr	r0, [r6, #12]
 800039e:	f001 ffcb 	bl	8002338 <GPIO_Init>

    if (Button_Mode == BUTTON_MODE_EXTI)
 80003a2:	2c01      	cmp	r4, #1
 80003a4:	d14b      	bne.n	800043e <BUTTON_Init+0xd6>
    	DEBOUNCE_TIMER_CLK_CMD(DEBOUNCE_TIMER_CLK, ENABLE);

        /* TIM Update Frequency = 72000000/7200/100 = 100Hz = 10ms */
        /* TIM_Prescaler: 7199 */
        /* TIM_Autoreload: 99 -> 100Hz = 10ms */
        uint16_t TIM_Prescaler = (SystemCoreClock / 10000) - 1;
 80003a6:	4e29      	ldr	r6, [pc, #164]	; (800044c <BUTTON_Init+0xe4>)
    GPIO_Init(BUTTON_PORT[Button], &GPIO_InitStructure);

    if (Button_Mode == BUTTON_MODE_EXTI)
    {
        /* Enable TIM clock */
    	DEBOUNCE_TIMER_CLK_CMD(DEBOUNCE_TIMER_CLK, ENABLE);
 80003a8:	f44f 6000 	mov.w	r0, #2048	; 0x800
 80003ac:	4621      	mov	r1, r4
 80003ae:	f002 f843 	bl	8002438 <RCC_APB2PeriphClockCmd>

        /* TIM Update Frequency = 72000000/7200/100 = 100Hz = 10ms */
        /* TIM_Prescaler: 7199 */
        /* TIM_Autoreload: 99 -> 100Hz = 10ms */
        uint16_t TIM_Prescaler = (SystemCoreClock / 10000) - 1;
 80003b2:	6832      	ldr	r2, [r6, #0]
 80003b4:	f242 7310 	movw	r3, #10000	; 0x2710
 80003b8:	fbb2 f1f3 	udiv	r1, r2, r3
 80003bc:	1e48      	subs	r0, r1, #1
 80003be:	b286      	uxth	r6, r0
        uint16_t TIM_Autoreload = (10000 / DEBOUNCE_FREQ) - 1;

        /* Time Base Configuration */
    	TIM_TimeBaseStructInit(&TIM_TimeBaseStructure);
 80003c0:	a803      	add	r0, sp, #12
 80003c2:	f002 f8d1 	bl	8002568 <TIM_TimeBaseStructInit>
    	TIM_TimeBaseStructure.TIM_Prescaler = TIM_Prescaler;
    	TIM_TimeBaseStructure.TIM_Period = TIM_Autoreload;
    	TIM_TimeBaseStructure.TIM_ClockDivision = 0x0;
 80003c6:	2300      	movs	r3, #0
        uint16_t TIM_Autoreload = (10000 / DEBOUNCE_FREQ) - 1;

        /* Time Base Configuration */
    	TIM_TimeBaseStructInit(&TIM_TimeBaseStructure);
    	TIM_TimeBaseStructure.TIM_Prescaler = TIM_Prescaler;
    	TIM_TimeBaseStructure.TIM_Period = TIM_Autoreload;
 80003c8:	2263      	movs	r2, #99	; 0x63
    	TIM_TimeBaseStructure.TIM_ClockDivision = 0x0;
    	TIM_TimeBaseStructure.TIM_CounterMode = TIM_CounterMode_Up;
    	TIM_TimeBaseInit(DEBOUNCE_TIMER, &TIM_TimeBaseStructure);
 80003ca:	4821      	ldr	r0, [pc, #132]	; (8000450 <BUTTON_Init+0xe8>)
 80003cc:	a903      	add	r1, sp, #12

        /* Time Base Configuration */
    	TIM_TimeBaseStructInit(&TIM_TimeBaseStructure);
    	TIM_TimeBaseStructure.TIM_Prescaler = TIM_Prescaler;
    	TIM_TimeBaseStructure.TIM_Period = TIM_Autoreload;
    	TIM_TimeBaseStructure.TIM_ClockDivision = 0x0;
 80003ce:	f8ad 3012 	strh.w	r3, [sp, #18]
    	TIM_TimeBaseStructure.TIM_CounterMode = TIM_CounterMode_Up;
 80003d2:	f8ad 300e 	strh.w	r3, [sp, #14]
        uint16_t TIM_Autoreload = (10000 / DEBOUNCE_FREQ) - 1;

        /* Time Base Configuration */
    	TIM_TimeBaseStructInit(&TIM_TimeBaseStructure);
    	TIM_TimeBaseStructure.TIM_Prescaler = TIM_Prescaler;
    	TIM_TimeBaseStructure.TIM_Period = TIM_Autoreload;
 80003d6:	f8ad 2010 	strh.w	r2, [sp, #16]
        uint16_t TIM_Prescaler = (SystemCoreClock / 10000) - 1;
        uint16_t TIM_Autoreload = (10000 / DEBOUNCE_FREQ) - 1;

        /* Time Base Configuration */
    	TIM_TimeBaseStructInit(&TIM_TimeBaseStructure);
    	TIM_TimeBaseStructure.TIM_Prescaler = TIM_Prescaler;
 80003da:	f8ad 600c 	strh.w	r6, [sp, #12]
    	TIM_TimeBaseStructure.TIM_Period = TIM_Autoreload;
    	TIM_TimeBaseStructure.TIM_ClockDivision = 0x0;
 80003de:	461e      	mov	r6, r3
    	TIM_TimeBaseStructure.TIM_CounterMode = TIM_CounterMode_Up;
    	TIM_TimeBaseInit(DEBOUNCE_TIMER, &TIM_TimeBaseStructure);
 80003e0:	f002 f878 	bl	80024d4 <TIM_TimeBaseInit>
        /* TIM Configuration */
        //TIM_PrescalerConfig(DEBOUNCE_TIMER, TIM_Prescaler, TIM_PSCReloadMode_Update);
        //TIM_SetAutoreload(DEBOUNCE_TIMER, TIM_Autoreload);

        /* One Pulse Mode selection */
        TIM_SelectOnePulseMode(DEBOUNCE_TIMER, TIM_OPMode_Single);
 80003e4:	481a      	ldr	r0, [pc, #104]	; (8000450 <BUTTON_Init+0xe8>)
 80003e6:	2108      	movs	r1, #8
 80003e8:	f002 f8dc 	bl	80025a4 <TIM_SelectOnePulseMode>

        TIM_ClearITPendingBit(DEBOUNCE_TIMER, DEBOUNCE_TIMER_FLAG);
 80003ec:	4818      	ldr	r0, [pc, #96]	; (8000450 <BUTTON_Init+0xe8>)
 80003ee:	4621      	mov	r1, r4
 80003f0:	f002 f8ee 	bl	80025d0 <TIM_ClearITPendingBit>

        /* TIM IT Enable */
        TIM_ITConfig(DEBOUNCE_TIMER, DEBOUNCE_TIMER_FLAG, ENABLE);
 80003f4:	4622      	mov	r2, r4
 80003f6:	4816      	ldr	r0, [pc, #88]	; (8000450 <BUTTON_Init+0xe8>)
 80003f8:	4621      	mov	r1, r4
 80003fa:	f002 f8ca 	bl	8002592 <TIM_ITConfig>

        /* Enable the TIM Interrupt */
        NVIC_InitStructure.NVIC_IRQChannel = DEBOUNCE_TIMER_IRQn;
        NVIC_InitStructure.NVIC_IRQChannelPreemptionPriority = 0x02;
 80003fe:	f04f 0802 	mov.w	r8, #2

        /* TIM IT Enable */
        TIM_ITConfig(DEBOUNCE_TIMER, DEBOUNCE_TIMER_FLAG, ENABLE);

        /* Enable the TIM Interrupt */
        NVIC_InitStructure.NVIC_IRQChannel = DEBOUNCE_TIMER_IRQn;
 8000402:	2119      	movs	r1, #25
        NVIC_InitStructure.NVIC_IRQChannelPreemptionPriority = 0x02;
        NVIC_InitStructure.NVIC_IRQChannelSubPriority = 0x00;
        NVIC_InitStructure.NVIC_IRQChannelCmd = ENABLE;

        NVIC_Init(&NVIC_InitStructure);
 8000404:	a802      	add	r0, sp, #8

        /* TIM IT Enable */
        TIM_ITConfig(DEBOUNCE_TIMER, DEBOUNCE_TIMER_FLAG, ENABLE);

        /* Enable the TIM Interrupt */
        NVIC_InitStructure.NVIC_IRQChannel = DEBOUNCE_TIMER_IRQn;
 8000406:	f88d 1008 	strb.w	r1, [sp, #8]
        NVIC_InitStructure.NVIC_IRQChannelPreemptionPriority = 0x02;
 800040a:	f88d 8009 	strb.w	r8, [sp, #9]
        NVIC_InitStructure.NVIC_IRQChannelSubPriority = 0x00;
 800040e:	f88d 600a 	strb.w	r6, [sp, #10]
        NVIC_InitStructure.NVIC_IRQChannelCmd = ENABLE;
 8000412:	f88d 400b 	strb.w	r4, [sp, #11]

        NVIC_Init(&NVIC_InitStructure);
 8000416:	f001 fe71 	bl	80020fc <NVIC_Init>

        /* Enable the Button EXTI Interrupt */
        NVIC_InitStructure.NVIC_IRQChannel = BUTTON_IRQn[Button];
 800041a:	8cb8      	ldrh	r0, [r7, #36]	; 0x24
        NVIC_InitStructure.NVIC_IRQChannelPreemptionPriority = 0x02;
 800041c:	f88d 8009 	strb.w	r8, [sp, #9]
        NVIC_InitStructure.NVIC_IRQChannelCmd = ENABLE;

        NVIC_Init(&NVIC_InitStructure);

        /* Enable the Button EXTI Interrupt */
        NVIC_InitStructure.NVIC_IRQChannel = BUTTON_IRQn[Button];
 8000420:	f88d 0008 	strb.w	r0, [sp, #8]
        NVIC_InitStructure.NVIC_IRQChannelPreemptionPriority = 0x02;
        NVIC_InitStructure.NVIC_IRQChannelSubPriority = 0x01;
        NVIC_InitStructure.NVIC_IRQChannelCmd = ENABLE;

        NVIC_Init(&NVIC_InitStructure);
 8000424:	a802      	add	r0, sp, #8
        NVIC_Init(&NVIC_InitStructure);

        /* Enable the Button EXTI Interrupt */
        NVIC_InitStructure.NVIC_IRQChannel = BUTTON_IRQn[Button];
        NVIC_InitStructure.NVIC_IRQChannelPreemptionPriority = 0x02;
        NVIC_InitStructure.NVIC_IRQChannelSubPriority = 0x01;
 8000426:	f88d 400a 	strb.w	r4, [sp, #10]
        NVIC_InitStructure.NVIC_IRQChannelCmd = ENABLE;
 800042a:	f88d 400b 	strb.w	r4, [sp, #11]

        NVIC_Init(&NVIC_InitStructure);
 800042e:	f001 fe65 	bl	80020fc <NVIC_Init>

        BUTTON_DEBOUNCED[Button] = 0x00;
 8000432:	4a08      	ldr	r2, [pc, #32]	; (8000454 <BUTTON_Init+0xec>)

        BUTTON_EXTI_Config(Button, ENABLE);
 8000434:	4628      	mov	r0, r5
 8000436:	4621      	mov	r1, r4
        NVIC_InitStructure.NVIC_IRQChannelSubPriority = 0x01;
        NVIC_InitStructure.NVIC_IRQChannelCmd = ENABLE;

        NVIC_Init(&NVIC_InitStructure);

        BUTTON_DEBOUNCED[Button] = 0x00;
 8000438:	5556      	strb	r6, [r2, r5]

        BUTTON_EXTI_Config(Button, ENABLE);
 800043a:	f7ff ff73 	bl	8000324 <BUTTON_EXTI_Config>
    }
}
 800043e:	b006      	add	sp, #24
 8000440:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8000444:	080025e0 	.word	0x080025e0
 8000448:	20000000 	.word	0x20000000
 800044c:	20000014 	.word	0x20000014
 8000450:	40012c00 	.word	0x40012c00
 8000454:	20000254 	.word	0x20000254

08000458 <Set_System>:
 * @brief  Configures Main system clocks & power.
 * @param  None
 * @retval None
 */
void Set_System(void)
{
 8000458:	b508      	push	{r3, lr}
	 To reconfigure the default setting of SystemInit() function, refer to
	 system_stm32f10x.c file
	 */

	/* Enable PWR and BKP clock */
	RCC_APB1PeriphClockCmd(RCC_APB1Periph_PWR | RCC_APB1Periph_BKP, ENABLE);
 800045a:	2101      	movs	r1, #1
 800045c:	f04f 50c0 	mov.w	r0, #402653184	; 0x18000000
 8000460:	f001 fff6 	bl	8002450 <RCC_APB1PeriphClockCmd>

	/* Enable write access to Backup domain */
	PWR_BackupAccessCmd(ENABLE);
 8000464:	2001      	movs	r0, #1
 8000466:	f001 ffdb 	bl	8002420 <PWR_BackupAccessCmd>

	/* NVIC configuration */
	NVIC_Configuration();
 800046a:	f7ff ff1b 	bl	80002a4 <NVIC_Configuration>

	/* Configure the LEDs and set the default states */
	int LEDx;
	for(LEDx = 0; LEDx < LEDn; ++LEDx)
	{
	    LED_Init(LEDx);
 800046e:	2000      	movs	r0, #0
 8000470:	f7ff ff1c 	bl	80002ac <LED_Init>
	    LED_Off(LEDx);
 8000474:	2000      	movs	r0, #0
 8000476:	f7ff ff37 	bl	80002e8 <LED_Off>

	/* Configure the LEDs and set the default states */
	int LEDx;
	for(LEDx = 0; LEDx < LEDn; ++LEDx)
	{
	    LED_Init(LEDx);
 800047a:	2001      	movs	r0, #1
 800047c:	f7ff ff16 	bl	80002ac <LED_Init>
	    LED_Off(LEDx);
 8000480:	2001      	movs	r0, #1
 8000482:	f7ff ff31 	bl	80002e8 <LED_Off>
	}

    /* Configure the Button */
    BUTTON_Init(BUTTON1, BUTTON_MODE_GPIO);
 8000486:	2000      	movs	r0, #0
 8000488:	4601      	mov	r1, r0
 800048a:	f7ff ff6d 	bl	8000368 <BUTTON_Init>

	/* Setup SysTick Timer for 1 msec interrupts */
	if (SysTick_Config(SystemCoreClock / 1000))
 800048e:	4b15      	ldr	r3, [pc, #84]	; (80004e4 <Set_System+0x8c>)
 8000490:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000494:	681a      	ldr	r2, [r3, #0]
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if (ticks > SysTick_LOAD_RELOAD_Msk)  return (1);            /* Reload value impossible */

  SysTick->LOAD  = (ticks & SysTick_LOAD_RELOAD_Msk) - 1;      /* set reload register */
 8000496:	4b14      	ldr	r3, [pc, #80]	; (80004e8 <Set_System+0x90>)
 8000498:	fbb2 f1f0 	udiv	r1, r2, r0
 800049c:	1e4a      	subs	r2, r1, #1
    \param [in]  priority  Priority to set.
 */
__STATIC_INLINE void NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
  if(IRQn < 0) {
    SCB->SHP[((uint32_t)(IRQn) & 0xF)-4] = ((priority << (8 - __NVIC_PRIO_BITS)) & 0xff); } /* set Priority for Cortex-M  System Interrupts */
 800049e:	4913      	ldr	r1, [pc, #76]	; (80004ec <Set_System+0x94>)
 80004a0:	20f0      	movs	r0, #240	; 0xf0
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if (ticks > SysTick_LOAD_RELOAD_Msk)  return (1);            /* Reload value impossible */

  SysTick->LOAD  = (ticks & SysTick_LOAD_RELOAD_Msk) - 1;      /* set reload register */
 80004a2:	605a      	str	r2, [r3, #4]
    \param [in]  priority  Priority to set.
 */
__STATIC_INLINE void NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
  if(IRQn < 0) {
    SCB->SHP[((uint32_t)(IRQn) & 0xF)-4] = ((priority << (8 - __NVIC_PRIO_BITS)) & 0xff); } /* set Priority for Cortex-M  System Interrupts */
 80004a4:	f881 0023 	strb.w	r0, [r1, #35]	; 0x23
{
  if (ticks > SysTick_LOAD_RELOAD_Msk)  return (1);            /* Reload value impossible */

  SysTick->LOAD  = (ticks & SysTick_LOAD_RELOAD_Msk) - 1;      /* set reload register */
  NVIC_SetPriority (SysTick_IRQn, (1<<__NVIC_PRIO_BITS) - 1);  /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0;                                          /* Load the SysTick Counter Value */
 80004a8:	2200      	movs	r2, #0
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80004aa:	2007      	movs	r0, #7
{
  if (ticks > SysTick_LOAD_RELOAD_Msk)  return (1);            /* Reload value impossible */

  SysTick->LOAD  = (ticks & SysTick_LOAD_RELOAD_Msk) - 1;      /* set reload register */
  NVIC_SetPriority (SysTick_IRQn, (1<<__NVIC_PRIO_BITS) - 1);  /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0;                                          /* Load the SysTick Counter Value */
 80004ac:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80004ae:	6018      	str	r0, [r3, #0]

    \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t NVIC_GetPriorityGrouping(void)
{
  return ((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos);   /* read priority grouping field */
 80004b0:	68cb      	ldr	r3, [r1, #12]
 80004b2:	f3c3 2002 	ubfx	r0, r3, #8, #3
  uint32_t PriorityGroupTmp = (PriorityGroup & 0x07);          /* only values 0..7 are used          */
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7 - PriorityGroupTmp) > __NVIC_PRIO_BITS) ? __NVIC_PRIO_BITS : 7 - PriorityGroupTmp;
  SubPriorityBits     = ((PriorityGroupTmp + __NVIC_PRIO_BITS) < 7) ? 0 : PriorityGroupTmp - 7 + __NVIC_PRIO_BITS;
 80004b6:	1d01      	adds	r1, r0, #4
 80004b8:	2906      	cmp	r1, #6
{
  uint32_t PriorityGroupTmp = (PriorityGroup & 0x07);          /* only values 0..7 are used          */
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7 - PriorityGroupTmp) > __NVIC_PRIO_BITS) ? __NVIC_PRIO_BITS : 7 - PriorityGroupTmp;
 80004ba:	f1c0 0307 	rsb	r3, r0, #7
  SubPriorityBits     = ((PriorityGroupTmp + __NVIC_PRIO_BITS) < 7) ? 0 : PriorityGroupTmp - 7 + __NVIC_PRIO_BITS;
 80004be:	bf88      	it	hi
 80004c0:	1ec2      	subhi	r2, r0, #3
{
  uint32_t PriorityGroupTmp = (PriorityGroup & 0x07);          /* only values 0..7 are used          */
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7 - PriorityGroupTmp) > __NVIC_PRIO_BITS) ? __NVIC_PRIO_BITS : 7 - PriorityGroupTmp;
 80004c2:	2b04      	cmp	r3, #4
 80004c4:	bf28      	it	cs
 80004c6:	2304      	movcs	r3, #4
  SubPriorityBits     = ((PriorityGroupTmp + __NVIC_PRIO_BITS) < 7) ? 0 : PriorityGroupTmp - 7 + __NVIC_PRIO_BITS;

  return (
           ((PreemptPriority & ((1 << (PreemptPriorityBits)) - 1)) << SubPriorityBits) |
 80004c8:	2001      	movs	r0, #1
 80004ca:	fa00 f103 	lsl.w	r1, r0, r3
 80004ce:	1e4b      	subs	r3, r1, #1
 80004d0:	f003 0003 	and.w	r0, r3, #3
 80004d4:	fa00 f202 	lsl.w	r2, r0, r2
    \param [in]  priority  Priority to set.
 */
__STATIC_INLINE void NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
  if(IRQn < 0) {
    SCB->SHP[((uint32_t)(IRQn) & 0xF)-4] = ((priority << (8 - __NVIC_PRIO_BITS)) & 0xff); } /* set Priority for Cortex-M  System Interrupts */
 80004d8:	4b04      	ldr	r3, [pc, #16]	; (80004ec <Set_System+0x94>)
 80004da:	0111      	lsls	r1, r2, #4
 80004dc:	b2c8      	uxtb	r0, r1
 80004de:	f883 0023 	strb.w	r0, [r3, #35]	; 0x23
 80004e2:	bd08      	pop	{r3, pc}
 80004e4:	20000014 	.word	0x20000014
 80004e8:	e000e010 	.word	0xe000e010
 80004ec:	e000ed00 	.word	0xe000ed00

080004f0 <BUTTON_GetState>:
  *     @arg BUTTON2: Button2
  * @retval Actual Button Pressed state.
  */
uint8_t BUTTON_GetState(Button_TypeDef Button)
{
    return GPIO_ReadInputDataBit(BUTTON_PORT[Button], BUTTON_PIN[Button]);
 80004f0:	4a04      	ldr	r2, [pc, #16]	; (8000504 <BUTTON_GetState+0x14>)
 80004f2:	4b05      	ldr	r3, [pc, #20]	; (8000508 <BUTTON_GetState+0x18>)
 80004f4:	eb02 0180 	add.w	r1, r2, r0, lsl #2
 80004f8:	eb03 0240 	add.w	r2, r3, r0, lsl #1
 80004fc:	68c8      	ldr	r0, [r1, #12]
 80004fe:	8c11      	ldrh	r1, [r2, #32]
 8000500:	f001 bf6a 	b.w	80023d8 <GPIO_ReadInputDataBit>
 8000504:	20000000 	.word	0x20000000
 8000508:	080025e0 	.word	0x080025e0

0800050c <BUTTON_GetDebouncedState>:
  *     @arg BUTTON2: Button2
  * @retval Button Debounced state.
  */
uint8_t BUTTON_GetDebouncedState(Button_TypeDef Button)
{
	if(BUTTON_DEBOUNCED[BUTTON1] != 0x00)
 800050c:	4b03      	ldr	r3, [pc, #12]	; (800051c <BUTTON_GetDebouncedState+0x10>)
 800050e:	7818      	ldrb	r0, [r3, #0]
 8000510:	b110      	cbz	r0, 8000518 <BUTTON_GetDebouncedState+0xc>
	{
		BUTTON_DEBOUNCED[BUTTON1] = 0x00;
 8000512:	2200      	movs	r2, #0
 8000514:	701a      	strb	r2, [r3, #0]
		return 0x01;
 8000516:	2001      	movs	r0, #1
	}
	return 0x00;
}
 8000518:	4770      	bx	lr
 800051a:	bf00      	nop
 800051c:	20000254 	.word	0x20000254

08000520 <sFLASH_SPI_Init>:
  * @brief  Initializes the peripherals used by the SPI FLASH driver.
  * @param  None
  * @retval None
  */
void sFLASH_SPI_Init(void)
{
 8000520:	b530      	push	{r4, r5, lr}
	GPIO_InitTypeDef GPIO_InitStructure;
	SPI_InitTypeDef  SPI_InitStructure;

	/* sFLASH_MEM_CS_GPIO, sFLASH_SPI_MOSI_GPIO, sFLASH_SPI_MISO_GPIO
	   and sFLASH_SPI_SCK_GPIO Periph clock enable */
	RCC_APB2PeriphClockCmd(sFLASH_MEM_CS_GPIO_CLK | sFLASH_SPI_MOSI_GPIO_CLK | sFLASH_SPI_MISO_GPIO_CLK |
 8000522:	2008      	movs	r0, #8
  * @brief  Initializes the peripherals used by the SPI FLASH driver.
  * @param  None
  * @retval None
  */
void sFLASH_SPI_Init(void)
{
 8000524:	b087      	sub	sp, #28
	GPIO_InitTypeDef GPIO_InitStructure;
	SPI_InitTypeDef  SPI_InitStructure;

	/* sFLASH_MEM_CS_GPIO, sFLASH_SPI_MOSI_GPIO, sFLASH_SPI_MISO_GPIO
	   and sFLASH_SPI_SCK_GPIO Periph clock enable */
	RCC_APB2PeriphClockCmd(sFLASH_MEM_CS_GPIO_CLK | sFLASH_SPI_MOSI_GPIO_CLK | sFLASH_SPI_MISO_GPIO_CLK |
 8000526:	2101      	movs	r1, #1
 8000528:	f001 ff86 	bl	8002438 <RCC_APB2PeriphClockCmd>

	/* Configure sFLASH_SPI pins: SCK */
	GPIO_InitStructure.GPIO_Pin = sFLASH_SPI_SCK_PIN;
	GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
	GPIO_InitStructure.GPIO_Mode = GPIO_Mode_AF_PP;
	GPIO_Init(sFLASH_SPI_SCK_GPIO_PORT, &GPIO_InitStructure);
 800052c:	4c2c      	ldr	r4, [pc, #176]	; (80005e0 <sFLASH_SPI_Init+0xc0>)
	   and sFLASH_SPI_SCK_GPIO Periph clock enable */
	RCC_APB2PeriphClockCmd(sFLASH_MEM_CS_GPIO_CLK | sFLASH_SPI_MOSI_GPIO_CLK | sFLASH_SPI_MISO_GPIO_CLK |
						 sFLASH_SPI_SCK_GPIO_CLK, ENABLE);

	/* sFLASH_SPI Periph clock enable */
	sFLASH_SPI_CLK_CMD(sFLASH_SPI_CLK, ENABLE);
 800052e:	2101      	movs	r1, #1
 8000530:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 8000534:	f001 ff8c 	bl	8002450 <RCC_APB1PeriphClockCmd>

	/* Configure sFLASH_SPI pins: SCK */
	GPIO_InitStructure.GPIO_Pin = sFLASH_SPI_SCK_PIN;
	GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
 8000538:	2003      	movs	r0, #3
	GPIO_InitStructure.GPIO_Mode = GPIO_Mode_AF_PP;
 800053a:	2118      	movs	r1, #24

	/* sFLASH_SPI Periph clock enable */
	sFLASH_SPI_CLK_CMD(sFLASH_SPI_CLK, ENABLE);

	/* Configure sFLASH_SPI pins: SCK */
	GPIO_InitStructure.GPIO_Pin = sFLASH_SPI_SCK_PIN;
 800053c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
	GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
 8000540:	f88d 0002 	strb.w	r0, [sp, #2]
	GPIO_InitStructure.GPIO_Mode = GPIO_Mode_AF_PP;
 8000544:	f88d 1003 	strb.w	r1, [sp, #3]
	GPIO_Init(sFLASH_SPI_SCK_GPIO_PORT, &GPIO_InitStructure);
 8000548:	4620      	mov	r0, r4
 800054a:	4669      	mov	r1, sp

	/* sFLASH_SPI Periph clock enable */
	sFLASH_SPI_CLK_CMD(sFLASH_SPI_CLK, ENABLE);

	/* Configure sFLASH_SPI pins: SCK */
	GPIO_InitStructure.GPIO_Pin = sFLASH_SPI_SCK_PIN;
 800054c:	f8ad 3000 	strh.w	r3, [sp]
	GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
	GPIO_InitStructure.GPIO_Mode = GPIO_Mode_AF_PP;
	GPIO_Init(sFLASH_SPI_SCK_GPIO_PORT, &GPIO_InitStructure);
 8000550:	f001 fef2 	bl	8002338 <GPIO_Init>

	/* Configure sFLASH_SPI pins: MOSI */
	GPIO_InitStructure.GPIO_Pin = sFLASH_SPI_MOSI_PIN;
 8000554:	f44f 4200 	mov.w	r2, #32768	; 0x8000
	GPIO_Init(sFLASH_SPI_MOSI_GPIO_PORT, &GPIO_InitStructure);
 8000558:	4620      	mov	r0, r4
 800055a:	4669      	mov	r1, sp
	GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
	GPIO_InitStructure.GPIO_Mode = GPIO_Mode_AF_PP;
	GPIO_Init(sFLASH_SPI_SCK_GPIO_PORT, &GPIO_InitStructure);

	/* Configure sFLASH_SPI pins: MOSI */
	GPIO_InitStructure.GPIO_Pin = sFLASH_SPI_MOSI_PIN;
 800055c:	f8ad 2000 	strh.w	r2, [sp]
	GPIO_Init(sFLASH_SPI_MOSI_GPIO_PORT, &GPIO_InitStructure);

	/* Configure sFLASH_SPI pins: MISO */
	GPIO_InitStructure.GPIO_Pin = sFLASH_SPI_MISO_PIN;
 8000560:	f44f 4580 	mov.w	r5, #16384	; 0x4000
	GPIO_InitStructure.GPIO_Mode = GPIO_Mode_AF_PP;
	GPIO_Init(sFLASH_SPI_SCK_GPIO_PORT, &GPIO_InitStructure);

	/* Configure sFLASH_SPI pins: MOSI */
	GPIO_InitStructure.GPIO_Pin = sFLASH_SPI_MOSI_PIN;
	GPIO_Init(sFLASH_SPI_MOSI_GPIO_PORT, &GPIO_InitStructure);
 8000564:	f001 fee8 	bl	8002338 <GPIO_Init>

	/* Configure sFLASH_SPI pins: MISO */
	GPIO_InitStructure.GPIO_Pin = sFLASH_SPI_MISO_PIN;
	GPIO_InitStructure.GPIO_Mode = GPIO_Mode_IN_FLOATING;
 8000568:	2304      	movs	r3, #4
	GPIO_Init(sFLASH_SPI_MISO_GPIO_PORT, &GPIO_InitStructure);
 800056a:	4620      	mov	r0, r4
 800056c:	4669      	mov	r1, sp
	GPIO_InitStructure.GPIO_Pin = sFLASH_SPI_MOSI_PIN;
	GPIO_Init(sFLASH_SPI_MOSI_GPIO_PORT, &GPIO_InitStructure);

	/* Configure sFLASH_SPI pins: MISO */
	GPIO_InitStructure.GPIO_Pin = sFLASH_SPI_MISO_PIN;
	GPIO_InitStructure.GPIO_Mode = GPIO_Mode_IN_FLOATING;
 800056e:	f88d 3003 	strb.w	r3, [sp, #3]
	/* Configure sFLASH_SPI pins: MOSI */
	GPIO_InitStructure.GPIO_Pin = sFLASH_SPI_MOSI_PIN;
	GPIO_Init(sFLASH_SPI_MOSI_GPIO_PORT, &GPIO_InitStructure);

	/* Configure sFLASH_SPI pins: MISO */
	GPIO_InitStructure.GPIO_Pin = sFLASH_SPI_MISO_PIN;
 8000572:	f8ad 5000 	strh.w	r5, [sp]
	GPIO_InitStructure.GPIO_Mode = GPIO_Mode_IN_FLOATING;
	GPIO_Init(sFLASH_SPI_MISO_GPIO_PORT, &GPIO_InitStructure);
 8000576:	f001 fedf 	bl	8002338 <GPIO_Init>

	/* Configure sFLASH_MEM_CS_PIN pin: sFLASH CS pin */
	GPIO_InitStructure.GPIO_Pin = sFLASH_MEM_CS_PIN;
	GPIO_InitStructure.GPIO_Mode = GPIO_Mode_Out_PP;
 800057a:	2010      	movs	r0, #16
	GPIO_InitStructure.GPIO_Pin = sFLASH_SPI_MISO_PIN;
	GPIO_InitStructure.GPIO_Mode = GPIO_Mode_IN_FLOATING;
	GPIO_Init(sFLASH_SPI_MISO_GPIO_PORT, &GPIO_InitStructure);

	/* Configure sFLASH_MEM_CS_PIN pin: sFLASH CS pin */
	GPIO_InitStructure.GPIO_Pin = sFLASH_MEM_CS_PIN;
 800057c:	f44f 7500 	mov.w	r5, #512	; 0x200
	GPIO_InitStructure.GPIO_Mode = GPIO_Mode_Out_PP;
 8000580:	f88d 0003 	strb.w	r0, [sp, #3]
	GPIO_Init(sFLASH_MEM_CS_GPIO_PORT, &GPIO_InitStructure);
 8000584:	4669      	mov	r1, sp
 8000586:	4620      	mov	r0, r4
	GPIO_InitStructure.GPIO_Pin = sFLASH_SPI_MISO_PIN;
	GPIO_InitStructure.GPIO_Mode = GPIO_Mode_IN_FLOATING;
	GPIO_Init(sFLASH_SPI_MISO_GPIO_PORT, &GPIO_InitStructure);

	/* Configure sFLASH_MEM_CS_PIN pin: sFLASH CS pin */
	GPIO_InitStructure.GPIO_Pin = sFLASH_MEM_CS_PIN;
 8000588:	f8ad 5000 	strh.w	r5, [sp]
	GPIO_InitStructure.GPIO_Mode = GPIO_Mode_Out_PP;
	GPIO_Init(sFLASH_MEM_CS_GPIO_PORT, &GPIO_InitStructure);
 800058c:	f001 fed4 	bl	8002338 <GPIO_Init>

	/* Deselect the FLASH: Chip Select high */
	sFLASH_CS_HIGH();
 8000590:	4620      	mov	r0, r4
 8000592:	4629      	mov	r1, r5
 8000594:	f001 ff26 	bl	80023e4 <GPIO_SetBits>
	SPI_InitStructure.SPI_Direction = SPI_Direction_2Lines_FullDuplex;
	SPI_InitStructure.SPI_Mode = SPI_Mode_Master;
	SPI_InitStructure.SPI_DataSize = SPI_DataSize_8b;
	SPI_InitStructure.SPI_CPOL = SPI_CPOL_High;
	SPI_InitStructure.SPI_CPHA = SPI_CPHA_2Edge;
	SPI_InitStructure.SPI_NSS = SPI_NSS_Soft;
 8000598:	f8ad 500e 	strh.w	r5, [sp, #14]
	SPI_InitStructure.SPI_BaudRatePrescaler = sFLASH_SPI_BAUDRATE_PRESCALER;
	SPI_InitStructure.SPI_FirstBit = SPI_FirstBit_MSB;
	SPI_InitStructure.SPI_CRCPolynomial = 7;
 800059c:	2507      	movs	r5, #7
 800059e:	f8ad 5014 	strh.w	r5, [sp, #20]
	SPI_Init(sFLASH_SPI, &SPI_InitStructure);
 80005a2:	4d10      	ldr	r5, [pc, #64]	; (80005e4 <sFLASH_SPI_Init+0xc4>)

	/* Deselect the FLASH: Chip Select high */
	sFLASH_CS_HIGH();

	/* SPI configuration */
	SPI_InitStructure.SPI_Direction = SPI_Direction_2Lines_FullDuplex;
 80005a4:	2100      	movs	r1, #0
	SPI_InitStructure.SPI_Mode = SPI_Mode_Master;
 80005a6:	f44f 7482 	mov.w	r4, #260	; 0x104

	/* Deselect the FLASH: Chip Select high */
	sFLASH_CS_HIGH();

	/* SPI configuration */
	SPI_InitStructure.SPI_Direction = SPI_Direction_2Lines_FullDuplex;
 80005aa:	f8ad 1004 	strh.w	r1, [sp, #4]
	SPI_InitStructure.SPI_Mode = SPI_Mode_Master;
 80005ae:	f8ad 4006 	strh.w	r4, [sp, #6]
	SPI_InitStructure.SPI_DataSize = SPI_DataSize_8b;
 80005b2:	f8ad 1008 	strh.w	r1, [sp, #8]
	SPI_InitStructure.SPI_CPOL = SPI_CPOL_High;
 80005b6:	2202      	movs	r2, #2
	SPI_InitStructure.SPI_CPHA = SPI_CPHA_2Edge;
 80005b8:	2401      	movs	r4, #1
	SPI_InitStructure.SPI_NSS = SPI_NSS_Soft;
	SPI_InitStructure.SPI_BaudRatePrescaler = sFLASH_SPI_BAUDRATE_PRESCALER;
 80005ba:	2320      	movs	r3, #32
	SPI_InitStructure.SPI_FirstBit = SPI_FirstBit_MSB;
 80005bc:	f8ad 1012 	strh.w	r1, [sp, #18]
	SPI_InitStructure.SPI_CRCPolynomial = 7;
	SPI_Init(sFLASH_SPI, &SPI_InitStructure);
 80005c0:	4628      	mov	r0, r5
 80005c2:	a901      	add	r1, sp, #4

	/* SPI configuration */
	SPI_InitStructure.SPI_Direction = SPI_Direction_2Lines_FullDuplex;
	SPI_InitStructure.SPI_Mode = SPI_Mode_Master;
	SPI_InitStructure.SPI_DataSize = SPI_DataSize_8b;
	SPI_InitStructure.SPI_CPOL = SPI_CPOL_High;
 80005c4:	f8ad 200a 	strh.w	r2, [sp, #10]
	SPI_InitStructure.SPI_CPHA = SPI_CPHA_2Edge;
 80005c8:	f8ad 400c 	strh.w	r4, [sp, #12]
	SPI_InitStructure.SPI_NSS = SPI_NSS_Soft;
	SPI_InitStructure.SPI_BaudRatePrescaler = sFLASH_SPI_BAUDRATE_PRESCALER;
 80005cc:	f8ad 3010 	strh.w	r3, [sp, #16]
	SPI_InitStructure.SPI_FirstBit = SPI_FirstBit_MSB;
	SPI_InitStructure.SPI_CRCPolynomial = 7;
	SPI_Init(sFLASH_SPI, &SPI_InitStructure);
 80005d0:	f001 ff4a 	bl	8002468 <SPI_Init>

	/* Enable the sFLASH_SPI */
	SPI_Cmd(sFLASH_SPI, ENABLE);
 80005d4:	4628      	mov	r0, r5
 80005d6:	4621      	mov	r1, r4
 80005d8:	f001 ff65 	bl	80024a6 <SPI_Cmd>
}
 80005dc:	b007      	add	sp, #28
 80005de:	bd30      	pop	{r4, r5, pc}
 80005e0:	40010c00 	.word	0x40010c00
 80005e4:	40003800 	.word	0x40003800

080005e8 <USB_Disconnect_Config>:
* Description    : Disconnect pin configuration
* Input          : None.
* Return         : None.
*******************************************************************************/
void USB_Disconnect_Config(void)
{
 80005e8:	b507      	push	{r0, r1, r2, lr}
	GPIO_InitTypeDef GPIO_InitStructure;

	/* Enable USB_DISCONNECT GPIO clock */
	RCC_APB2PeriphClockCmd(USB_DISCONNECT_GPIO_CLK, ENABLE);
 80005ea:	2008      	movs	r0, #8
 80005ec:	2101      	movs	r1, #1
 80005ee:	f001 ff23 	bl	8002438 <RCC_APB2PeriphClockCmd>

	/* USB_DISCONNECT_PIN used as USB pull-up */
	GPIO_InitStructure.GPIO_Pin = USB_DISCONNECT_PIN;
	GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
 80005f2:	2003      	movs	r0, #3
	GPIO_InitStructure.GPIO_Mode = GPIO_Mode_Out_OD;
 80005f4:	2114      	movs	r1, #20

	/* Enable USB_DISCONNECT GPIO clock */
	RCC_APB2PeriphClockCmd(USB_DISCONNECT_GPIO_CLK, ENABLE);

	/* USB_DISCONNECT_PIN used as USB pull-up */
	GPIO_InitStructure.GPIO_Pin = USB_DISCONNECT_PIN;
 80005f6:	f44f 6380 	mov.w	r3, #1024	; 0x400
	GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
 80005fa:	f88d 0006 	strb.w	r0, [sp, #6]
	GPIO_InitStructure.GPIO_Mode = GPIO_Mode_Out_OD;
 80005fe:	f88d 1007 	strb.w	r1, [sp, #7]
	GPIO_Init(USB_DISCONNECT_GPIO_PORT, &GPIO_InitStructure);
 8000602:	4803      	ldr	r0, [pc, #12]	; (8000610 <USB_Disconnect_Config+0x28>)
 8000604:	a901      	add	r1, sp, #4

	/* Enable USB_DISCONNECT GPIO clock */
	RCC_APB2PeriphClockCmd(USB_DISCONNECT_GPIO_CLK, ENABLE);

	/* USB_DISCONNECT_PIN used as USB pull-up */
	GPIO_InitStructure.GPIO_Pin = USB_DISCONNECT_PIN;
 8000606:	f8ad 3004 	strh.w	r3, [sp, #4]
	GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
	GPIO_InitStructure.GPIO_Mode = GPIO_Mode_Out_OD;
	GPIO_Init(USB_DISCONNECT_GPIO_PORT, &GPIO_InitStructure);
 800060a:	f001 fe95 	bl	8002338 <GPIO_Init>
}
 800060e:	bd0e      	pop	{r1, r2, r3, pc}
 8000610:	40010c00 	.word	0x40010c00

08000614 <Set_USBClock>:
* Return         : None.
*******************************************************************************/
void Set_USBClock(void)
{
	/* Select USBCLK source */
	RCC_USBCLKConfig(RCC_USBCLKSource_PLLCLK_1Div5);
 8000614:	2000      	movs	r0, #0
* Description    : Configures USB Clock input (48MHz)
* Input          : None.
* Return         : None.
*******************************************************************************/
void Set_USBClock(void)
{
 8000616:	b508      	push	{r3, lr}
	/* Select USBCLK source */
	RCC_USBCLKConfig(RCC_USBCLKSource_PLLCLK_1Div5);
 8000618:	f001 ff08 	bl	800242c <RCC_USBCLKConfig>

	/* Enable the USB clock */
	RCC_APB1PeriphClockCmd(RCC_APB1Periph_USB, ENABLE);
 800061c:	f44f 0000 	mov.w	r0, #8388608	; 0x800000
 8000620:	2101      	movs	r1, #1
}
 8000622:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
{
	/* Select USBCLK source */
	RCC_USBCLKConfig(RCC_USBCLKSource_PLLCLK_1Div5);

	/* Enable the USB clock */
	RCC_APB1PeriphClockCmd(RCC_APB1Periph_USB, ENABLE);
 8000626:	f001 bf13 	b.w	8002450 <RCC_APB1PeriphClockCmd>
	...

0800062c <Enter_LowPowerMode>:
* Return         : None.
*******************************************************************************/
void Enter_LowPowerMode(void)
{
	/* Set the device state to suspend */
	bDeviceState = SUSPENDED;
 800062c:	4b01      	ldr	r3, [pc, #4]	; (8000634 <Enter_LowPowerMode+0x8>)
 800062e:	2203      	movs	r2, #3
 8000630:	601a      	str	r2, [r3, #0]
 8000632:	4770      	bx	lr
 8000634:	20000278 	.word	0x20000278

08000638 <Leave_LowPowerMode>:
void Leave_LowPowerMode(void)
{
	DEVICE_INFO *pInfo = &Device_Info;

	/* Set the device state to the correct state */
	if (pInfo->Current_Configuration != 0)
 8000638:	4b04      	ldr	r3, [pc, #16]	; (800064c <Leave_LowPowerMode+0x14>)
 800063a:	4805      	ldr	r0, [pc, #20]	; (8000650 <Leave_LowPowerMode+0x18>)
 800063c:	7a9a      	ldrb	r2, [r3, #10]
 800063e:	b10a      	cbz	r2, 8000644 <Leave_LowPowerMode+0xc>
	{
		/* Device configured */
		bDeviceState = CONFIGURED;
 8000640:	2105      	movs	r1, #5
 8000642:	e000      	b.n	8000646 <Leave_LowPowerMode+0xe>
	}
	else
	{
		bDeviceState = ATTACHED;
 8000644:	2101      	movs	r1, #1
 8000646:	6001      	str	r1, [r0, #0]
 8000648:	4770      	bx	lr
 800064a:	bf00      	nop
 800064c:	200006b8 	.word	0x200006b8
 8000650:	20000278 	.word	0x20000278

08000654 <USB_Interrupts_Config>:
* Description    : Configures the USB interrupts
* Input          : None.
* Return         : None.
*******************************************************************************/
void USB_Interrupts_Config(void)
{
 8000654:	b507      	push	{r0, r1, r2, lr}
	NVIC_InitTypeDef NVIC_InitStructure;

	/* Enable the USB interrupt */
	NVIC_InitStructure.NVIC_IRQChannel = USB_LP_CAN1_RX0_IRQn;
	NVIC_InitStructure.NVIC_IRQChannelPreemptionPriority = 0x01;
 8000656:	2001      	movs	r0, #1
void USB_Interrupts_Config(void)
{
	NVIC_InitTypeDef NVIC_InitStructure;

	/* Enable the USB interrupt */
	NVIC_InitStructure.NVIC_IRQChannel = USB_LP_CAN1_RX0_IRQn;
 8000658:	2314      	movs	r3, #20
	NVIC_InitStructure.NVIC_IRQChannelPreemptionPriority = 0x01;
 800065a:	f88d 0005 	strb.w	r0, [sp, #5]
	NVIC_InitStructure.NVIC_IRQChannelSubPriority = 0x00;
 800065e:	2200      	movs	r2, #0
	NVIC_InitStructure.NVIC_IRQChannelCmd = ENABLE;
 8000660:	f88d 0007 	strb.w	r0, [sp, #7]
	NVIC_Init(&NVIC_InitStructure);
 8000664:	a801      	add	r0, sp, #4
void USB_Interrupts_Config(void)
{
	NVIC_InitTypeDef NVIC_InitStructure;

	/* Enable the USB interrupt */
	NVIC_InitStructure.NVIC_IRQChannel = USB_LP_CAN1_RX0_IRQn;
 8000666:	f88d 3004 	strb.w	r3, [sp, #4]
	NVIC_InitStructure.NVIC_IRQChannelPreemptionPriority = 0x01;
	NVIC_InitStructure.NVIC_IRQChannelSubPriority = 0x00;
 800066a:	f88d 2006 	strb.w	r2, [sp, #6]
	NVIC_InitStructure.NVIC_IRQChannelCmd = ENABLE;
	NVIC_Init(&NVIC_InitStructure);
 800066e:	f001 fd45 	bl	80020fc <NVIC_Init>
}
 8000672:	bd0e      	pop	{r1, r2, r3, pc}

08000674 <USB_Cable_Config>:
* Input          : None.
* Return         : Status
*******************************************************************************/
void USB_Cable_Config (FunctionalState NewState)
{
	if (NewState != DISABLE)
 8000674:	b120      	cbz	r0, 8000680 <USB_Cable_Config+0xc>
	{
		GPIO_ResetBits(USB_DISCONNECT_GPIO_PORT, USB_DISCONNECT_PIN);
 8000676:	4805      	ldr	r0, [pc, #20]	; (800068c <USB_Cable_Config+0x18>)
 8000678:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800067c:	f001 beb4 	b.w	80023e8 <GPIO_ResetBits>
	}
	else
	{
		GPIO_SetBits(USB_DISCONNECT_GPIO_PORT, USB_DISCONNECT_PIN);
 8000680:	4802      	ldr	r0, [pc, #8]	; (800068c <USB_Cable_Config+0x18>)
 8000682:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000686:	f001 bead 	b.w	80023e4 <GPIO_SetBits>
 800068a:	bf00      	nop
 800068c:	40010c00 	.word	0x40010c00

08000690 <Reset_Device>:
* Description    : Reset the device.
* Input          : None.
* Return         : None.
*******************************************************************************/
void Reset_Device(void)
{
 8000690:	b508      	push	{r3, lr}
	BKP_WriteBackupRegister(BKP_DR10, 0xA000);
 8000692:	2028      	movs	r0, #40	; 0x28
 8000694:	f44f 4120 	mov.w	r1, #40960	; 0xa000
 8000698:	f001 fd64 	bl	8002164 <BKP_WriteBackupRegister>
    USB_Cable_Config(DISABLE);
 800069c:	2000      	movs	r0, #0
 800069e:	f7ff ffe9 	bl	8000674 <USB_Cable_Config>
    This function acts as a special kind of Data Memory Barrier.
    It completes when all explicit memory accesses before this instruction complete.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __DSB(void)
{
  __ASM volatile ("dsb");
 80006a2:	f3bf 8f4f 	dsb	sy
__STATIC_INLINE void NVIC_SystemReset(void)
{
  __DSB();                                                     /* Ensure all outstanding memory accesses included
                                                                  buffered write are completed before reset */
  SCB->AIRCR  = ((0x5FA << SCB_AIRCR_VECTKEY_Pos)      |
                 (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
 80006a6:	4a05      	ldr	r2, [pc, #20]	; (80006bc <Reset_Device+0x2c>)
 80006a8:	4b05      	ldr	r3, [pc, #20]	; (80006c0 <Reset_Device+0x30>)
 80006aa:	68d1      	ldr	r1, [r2, #12]
 80006ac:	f401 60e0 	and.w	r0, r1, #1792	; 0x700
 80006b0:	ea40 0103 	orr.w	r1, r0, r3
 */
__STATIC_INLINE void NVIC_SystemReset(void)
{
  __DSB();                                                     /* Ensure all outstanding memory accesses included
                                                                  buffered write are completed before reset */
  SCB->AIRCR  = ((0x5FA << SCB_AIRCR_VECTKEY_Pos)      |
 80006b4:	60d1      	str	r1, [r2, #12]
 80006b6:	f3bf 8f4f 	dsb	sy
 80006ba:	e7fe      	b.n	80006ba <Reset_Device+0x2a>
 80006bc:	e000ed00 	.word	0xe000ed00
 80006c0:	05fa0004 	.word	0x05fa0004

080006c4 <Get_SerialNum>:
*******************************************************************************/
void Get_SerialNum(void)
{
    uint32_t Device_Serial0, Device_Serial1, Device_Serial2;

    Device_Serial0 = *(uint32_t*)ID1;
 80006c4:	4b09      	ldr	r3, [pc, #36]	; (80006ec <Get_SerialNum+0x28>)
* Description    : Create the serial number string descriptor.
* Input          : None.
* Return         : None.
*******************************************************************************/
void Get_SerialNum(void)
{
 80006c6:	b510      	push	{r4, lr}
    uint32_t Device_Serial0, Device_Serial1, Device_Serial2;

    Device_Serial0 = *(uint32_t*)ID1;
    Device_Serial1 = *(uint32_t*)ID2;
 80006c8:	e893 0014 	ldmia.w	r3, {r2, r4}
    Device_Serial2 = *(uint32_t*)ID3;
 80006cc:	3308      	adds	r3, #8

    Device_Serial0 += Device_Serial2;
 80006ce:	6818      	ldr	r0, [r3, #0]

    if (Device_Serial0 != 0)
 80006d0:	1810      	adds	r0, r2, r0
 80006d2:	d00a      	beq.n	80006ea <Get_SerialNum+0x26>
    {
        IntToUnicode (Device_Serial0, &DFU_StringSerial[2] , 8);
 80006d4:	2208      	movs	r2, #8
 80006d6:	4906      	ldr	r1, [pc, #24]	; (80006f0 <Get_SerialNum+0x2c>)
 80006d8:	f7ff fdcf 	bl	800027a <IntToUnicode>
        IntToUnicode (Device_Serial1, &DFU_StringSerial[18], 4);
 80006dc:	4905      	ldr	r1, [pc, #20]	; (80006f4 <Get_SerialNum+0x30>)
 80006de:	4620      	mov	r0, r4
 80006e0:	2204      	movs	r2, #4
    }
}
 80006e2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    Device_Serial0 += Device_Serial2;

    if (Device_Serial0 != 0)
    {
        IntToUnicode (Device_Serial0, &DFU_StringSerial[2] , 8);
        IntToUnicode (Device_Serial1, &DFU_StringSerial[18], 4);
 80006e6:	f7ff bdc8 	b.w	800027a <IntToUnicode>
 80006ea:	bd10      	pop	{r4, pc}
 80006ec:	1ffff7e8 	.word	0x1ffff7e8
 80006f0:	200000ee 	.word	0x200000ee
 80006f4:	200000fe 	.word	0x200000fe

080006f8 <main>:
* Input          : None.
* Output         : None.
* Return         : None.
*******************************************************************************/
int main(void)
{
 80006f8:	b508      	push	{r3, lr}
        file (startup_stm32f10x_md.s) before to branch to application main.
        To reconfigure the default setting of SystemInit() function, refer to
        system_stm32f10x.c file
    */

	Set_System();
 80006fa:	f7ff fead 	bl	8000458 <Set_System>

	switch(BKP_ReadBackupRegister(BKP_DR10))
 80006fe:	2028      	movs	r0, #40	; 0x28
 8000700:	f001 fd3e 	bl	8002180 <BKP_ReadBackupRegister>
 8000704:	f5b0 4fa0 	cmp.w	r0, #20480	; 0x5000
 8000708:	bf14      	ite	ne
 800070a:	4a31      	ldrne	r2, [pc, #196]	; (80007d0 <main+0xd8>)
	{
		case 0x5000:
			ApplicationAddress = OTA_DFU_ADDRESS;
 800070c:	4a31      	ldreq	r2, [pc, #196]	; (80007d4 <main+0xdc>)
 800070e:	4b32      	ldr	r3, [pc, #200]	; (80007d8 <main+0xe0>)
	 * If true, set DFUDeviceMode = 0x01
	 * TO DO...
	 */

	/* Check if BUTTON1 is pressed for 1 sec to enter DFU Mode */
	if (BUTTON_GetState(BUTTON1) == BUTTON1_PRESSED)
 8000710:	2000      	movs	r0, #0
	Set_System();

	switch(BKP_ReadBackupRegister(BKP_DR10))
	{
		case 0x5000:
			ApplicationAddress = OTA_DFU_ADDRESS;
 8000712:	601a      	str	r2, [r3, #0]
	 * If true, set DFUDeviceMode = 0x01
	 * TO DO...
	 */

	/* Check if BUTTON1 is pressed for 1 sec to enter DFU Mode */
	if (BUTTON_GetState(BUTTON1) == BUTTON1_PRESSED)
 8000714:	f7ff feec 	bl	80004f0 <BUTTON_GetState>
 8000718:	b980      	cbnz	r0, 800073c <main+0x44>
	{
		TimingDelay = 1000;
 800071a:	4930      	ldr	r1, [pc, #192]	; (80007dc <main+0xe4>)
 800071c:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000720:	6008      	str	r0, [r1, #0]
		while (BUTTON_GetState(BUTTON1) == BUTTON1_PRESSED)
 8000722:	2000      	movs	r0, #0
 8000724:	f7ff fee4 	bl	80004f0 <BUTTON_GetState>
 8000728:	b940      	cbnz	r0, 800073c <main+0x44>
		{
			if(TimingDelay == 0x00)
 800072a:	4b2c      	ldr	r3, [pc, #176]	; (80007dc <main+0xe4>)
 800072c:	681a      	ldr	r2, [r3, #0]
 800072e:	2a00      	cmp	r2, #0
 8000730:	d1f7      	bne.n	8000722 <main+0x2a>
			{
				DFUDeviceMode = 0x01;
 8000732:	2001      	movs	r0, #1
				TimingBUTTON = 5000;	//To prevent immediate exit from DFU
 8000734:	f241 3188 	movw	r1, #5000	; 0x1388
		TimingDelay = 1000;
		while (BUTTON_GetState(BUTTON1) == BUTTON1_PRESSED)
		{
			if(TimingDelay == 0x00)
			{
				DFUDeviceMode = 0x01;
 8000738:	7118      	strb	r0, [r3, #4]
				TimingBUTTON = 5000;	//To prevent immediate exit from DFU
 800073a:	6099      	str	r1, [r3, #8]
				break;
			}
		}
	}

	if (DFUDeviceMode != 0x01)
 800073c:	4b27      	ldr	r3, [pc, #156]	; (80007dc <main+0xe4>)
 800073e:	791a      	ldrb	r2, [r3, #4]
 8000740:	2a01      	cmp	r2, #1
 8000742:	d010      	beq.n	8000766 <main+0x6e>
	{
		/* Test if user code is programmed starting from ApplicationAddress */
		if (((*(__IO uint32_t*)ApplicationAddress) & 0x2FFE0000 ) == 0x20000000)
 8000744:	4824      	ldr	r0, [pc, #144]	; (80007d8 <main+0xe0>)
 8000746:	4a26      	ldr	r2, [pc, #152]	; (80007e0 <main+0xe8>)
 8000748:	6803      	ldr	r3, [r0, #0]
 800074a:	6819      	ldr	r1, [r3, #0]
 800074c:	400a      	ands	r2, r1
 800074e:	f1b2 5f00 	cmp.w	r2, #536870912	; 0x20000000
 8000752:	d108      	bne.n	8000766 <main+0x6e>
		{
			/* Jump to user application */
			JumpAddress = *(__IO uint32_t*) (ApplicationAddress + 4);
 8000754:	6858      	ldr	r0, [r3, #4]
 8000756:	4923      	ldr	r1, [pc, #140]	; (80007e4 <main+0xec>)
			Jump_To_Application = (pFunction) JumpAddress;
 8000758:	4a23      	ldr	r2, [pc, #140]	; (80007e8 <main+0xf0>)
	{
		/* Test if user code is programmed starting from ApplicationAddress */
		if (((*(__IO uint32_t*)ApplicationAddress) & 0x2FFE0000 ) == 0x20000000)
		{
			/* Jump to user application */
			JumpAddress = *(__IO uint32_t*) (ApplicationAddress + 4);
 800075a:	6008      	str	r0, [r1, #0]
			Jump_To_Application = (pFunction) JumpAddress;
 800075c:	6010      	str	r0, [r2, #0]
			/* Initialize user application's Stack Pointer */
			__set_MSP(*(__IO uint32_t*) ApplicationAddress);
 800075e:	681b      	ldr	r3, [r3, #0]

    \param [in]    topOfMainStack  Main Stack Pointer value to set
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __set_MSP(uint32_t topOfMainStack)
{
  __ASM volatile ("MSR msp, %0\n" : : "r" (topOfMainStack) );
 8000760:	f383 8808 	msr	MSP, r3
			Jump_To_Application();
 8000764:	4780      	blx	r0
	}
    /* Otherwise enters DFU mode to allow user to program his application */

    /* Enter DFU mode */
    DeviceState = STATE_dfuERROR;
    DeviceStatus[0] = STATUS_ERRFIRMWARE;
 8000766:	4a21      	ldr	r2, [pc, #132]	; (80007ec <main+0xf4>)
		}
	}
    /* Otherwise enters DFU mode to allow user to program his application */

    /* Enter DFU mode */
    DeviceState = STATE_dfuERROR;
 8000768:	4921      	ldr	r1, [pc, #132]	; (80007f0 <main+0xf8>)
 800076a:	200a      	movs	r0, #10
    DeviceStatus[0] = STATUS_ERRFIRMWARE;
 800076c:	7010      	strb	r0, [r2, #0]
    DeviceStatus[4] = DeviceState;
 800076e:	7110      	strb	r0, [r2, #4]
		}
	}
    /* Otherwise enters DFU mode to allow user to program his application */

    /* Enter DFU mode */
    DeviceState = STATE_dfuERROR;
 8000770:	7008      	strb	r0, [r1, #0]
    DeviceStatus[0] = STATUS_ERRFIRMWARE;
    DeviceStatus[4] = DeviceState;

    /* Reconfigure the Button using EXTI */
    BUTTON_Init(BUTTON1, BUTTON_MODE_EXTI);
 8000772:	2101      	movs	r1, #1
 8000774:	2000      	movs	r0, #0
 8000776:	f7ff fdf7 	bl	8000368 <BUTTON_Init>

    /* Unlock the internal flash */
    FLASH_Unlock();
 800077a:	f001 fd63 	bl	8002244 <FLASH_Unlock>

    /* USB Disconnect configuration */
    USB_Disconnect_Config();
 800077e:	f7ff ff33 	bl	80005e8 <USB_Disconnect_Config>

    /* Disable the USB connection till initialization phase end */
    USB_Cable_Config(DISABLE);
 8000782:	2000      	movs	r0, #0
 8000784:	f7ff ff76 	bl	8000674 <USB_Cable_Config>

    /* Init the media interface */
    MAL_Init();
 8000788:	f7ff fce8 	bl	800015c <MAL_Init>

    /* Enable the USB connection */
    USB_Cable_Config(ENABLE);
 800078c:	2001      	movs	r0, #1
 800078e:	f7ff ff71 	bl	8000674 <USB_Cable_Config>

    /* USB Clock configuration */
    Set_USBClock();
 8000792:	f7ff ff3f 	bl	8000614 <Set_USBClock>

    /* USB System initialization */
    USB_Init();
 8000796:	f001 fadd 	bl	8001d54 <USB_Init>

    /* Main loop */
    while (1)
    {
    	if(TimingBUTTON == 0x00 && BUTTON_GetDebouncedState(BUTTON1) != 0x00)
 800079a:	4b10      	ldr	r3, [pc, #64]	; (80007dc <main+0xe4>)
 800079c:	6898      	ldr	r0, [r3, #8]
 800079e:	b950      	cbnz	r0, 80007b6 <main+0xbe>
 80007a0:	f7ff feb4 	bl	800050c <BUTTON_GetDebouncedState>
 80007a4:	b138      	cbz	r0, 80007b6 <main+0xbe>
    	{
			if (DeviceState == STATE_dfuIDLE || DeviceState == STATE_dfuERROR)
 80007a6:	4812      	ldr	r0, [pc, #72]	; (80007f0 <main+0xf8>)
 80007a8:	7801      	ldrb	r1, [r0, #0]
 80007aa:	2902      	cmp	r1, #2
 80007ac:	d001      	beq.n	80007b2 <main+0xba>
 80007ae:	290a      	cmp	r1, #10
 80007b0:	d101      	bne.n	80007b6 <main+0xbe>
			{
				Reset_Device();	//Reset Device to enter User Application
 80007b2:	f7ff ff6d 	bl	8000690 <Reset_Device>
			}
    	}

        if (TimingLED == 0x00)
 80007b6:	4b09      	ldr	r3, [pc, #36]	; (80007dc <main+0xe4>)
 80007b8:	68d8      	ldr	r0, [r3, #12]
 80007ba:	2800      	cmp	r0, #0
 80007bc:	d1ed      	bne.n	800079a <main+0xa2>
        {
            TimingLED = 250;
 80007be:	22fa      	movs	r2, #250	; 0xfa
 80007c0:	60da      	str	r2, [r3, #12]
            LED_Toggle(LED1);
 80007c2:	f7ff fd9f 	bl	8000304 <LED_Toggle>
            LED_Toggle(LED2);
 80007c6:	2001      	movs	r0, #1
 80007c8:	f7ff fd9c 	bl	8000304 <LED_Toggle>
 80007cc:	e7e5      	b.n	800079a <main+0xa2>
 80007ce:	bf00      	nop
 80007d0:	0800a000 	.word	0x0800a000
 80007d4:	08005000 	.word	0x08005000
 80007d8:	2000069c 	.word	0x2000069c
 80007dc:	20000258 	.word	0x20000258
 80007e0:	2ffe0000 	.word	0x2ffe0000
 80007e4:	20000694 	.word	0x20000694
 80007e8:	20000698 	.word	0x20000698
 80007ec:	200006a0 	.word	0x200006a0
 80007f0:	20000690 	.word	0x20000690

080007f4 <Timing_Decrement>:
* Output         : Timing
* Return         : None
*******************************************************************************/
void Timing_Decrement(void)
{
    if (TimingDelay != 0x00)
 80007f4:	4b09      	ldr	r3, [pc, #36]	; (800081c <Timing_Decrement+0x28>)
 80007f6:	681a      	ldr	r2, [r3, #0]
 80007f8:	b112      	cbz	r2, 8000800 <Timing_Decrement+0xc>
    { 
        TimingDelay--;
 80007fa:	6818      	ldr	r0, [r3, #0]
 80007fc:	1e41      	subs	r1, r0, #1
 80007fe:	6019      	str	r1, [r3, #0]
    }

    if (TimingBUTTON != 0x00)
 8000800:	6898      	ldr	r0, [r3, #8]
 8000802:	4a06      	ldr	r2, [pc, #24]	; (800081c <Timing_Decrement+0x28>)
 8000804:	b110      	cbz	r0, 800080c <Timing_Decrement+0x18>
    {
    	TimingBUTTON--;
 8000806:	6891      	ldr	r1, [r2, #8]
 8000808:	1e48      	subs	r0, r1, #1
 800080a:	6090      	str	r0, [r2, #8]
    }

    if (TimingLED != 0x00)
 800080c:	68db      	ldr	r3, [r3, #12]
 800080e:	4a03      	ldr	r2, [pc, #12]	; (800081c <Timing_Decrement+0x28>)
 8000810:	b113      	cbz	r3, 8000818 <Timing_Decrement+0x24>
    {
        TimingLED--;
 8000812:	68d1      	ldr	r1, [r2, #12]
 8000814:	1e48      	subs	r0, r1, #1
 8000816:	60d0      	str	r0, [r2, #12]
 8000818:	4770      	bx	lr
 800081a:	bf00      	nop
 800081c:	20000258 	.word	0x20000258

08000820 <SPI_If_Init>:
* Input          : None
* Output         : None
* Return         : None
*******************************************************************************/
uint16_t SPI_If_Init(void)
{
 8000820:	b508      	push	{r3, lr}
  sFLASH_Init();
 8000822:	f000 f8ad 	bl	8000980 <sFLASH_Init>
  return MAL_OK;
}
 8000826:	2000      	movs	r0, #0
 8000828:	bd08      	pop	{r3, pc}

0800082a <SPI_If_Erase>:
* Input          : None
* Output         : None
* Return         : None
*******************************************************************************/
uint16_t SPI_If_Erase(uint32_t SectorAddress)
{
 800082a:	b508      	push	{r3, lr}
  sFLASH_EraseSector(SectorAddress);
 800082c:	f000 f9b6 	bl	8000b9c <sFLASH_EraseSector>
  return MAL_OK;
}
 8000830:	2000      	movs	r0, #0
 8000832:	bd08      	pop	{r3, pc}

08000834 <SPI_If_Write>:
* Input          : None
* Output         : None
* Return         : None
*******************************************************************************/
uint16_t SPI_If_Write(uint32_t SectorAddress, uint32_t DataLength)
{
 8000834:	b508      	push	{r3, lr}
 8000836:	4603      	mov	r3, r0
  sFLASH_WriteBuffer(MAL_Buffer, SectorAddress, (uint16_t)DataLength);
 8000838:	b28a      	uxth	r2, r1
 800083a:	4803      	ldr	r0, [pc, #12]	; (8000848 <SPI_If_Write+0x14>)
 800083c:	4619      	mov	r1, r3
 800083e:	f000 f943 	bl	8000ac8 <sFLASH_WriteBuffer>
  return MAL_OK;
}
 8000842:	2000      	movs	r0, #0
 8000844:	bd08      	pop	{r3, pc}
 8000846:	bf00      	nop
 8000848:	20000280 	.word	0x20000280

0800084c <SPI_If_Read>:
* Input          : None
* Output         : None
* Return         : buffer address pointer
*******************************************************************************/
uint8_t *SPI_If_Read(uint32_t SectorAddress, uint32_t DataLength)
{
 800084c:	b510      	push	{r4, lr}
  sFLASH_ReadBuffer(MAL_Buffer, SectorAddress, (uint16_t)DataLength);
 800084e:	4c04      	ldr	r4, [pc, #16]	; (8000860 <SPI_If_Read+0x14>)
* Input          : None
* Output         : None
* Return         : buffer address pointer
*******************************************************************************/
uint8_t *SPI_If_Read(uint32_t SectorAddress, uint32_t DataLength)
{
 8000850:	4603      	mov	r3, r0
  sFLASH_ReadBuffer(MAL_Buffer, SectorAddress, (uint16_t)DataLength);
 8000852:	b28a      	uxth	r2, r1
 8000854:	4620      	mov	r0, r4
 8000856:	4619      	mov	r1, r3
 8000858:	f000 f840 	bl	80008dc <sFLASH_ReadBuffer>
  return MAL_Buffer;
}
 800085c:	4620      	mov	r0, r4
 800085e:	bd10      	pop	{r4, pc}
 8000860:	20000280 	.word	0x20000280

08000864 <sFLASH_SendByte>:
  *         from the SPI bus.
  * @param  byte: byte to send.
  * @retval The value of the received byte.
  */
uint8_t sFLASH_SendByte(uint8_t byte)
{
 8000864:	b510      	push	{r4, lr}
 8000866:	4604      	mov	r4, r0
  /* Loop while DR register in not empty */
  while (SPI_I2S_GetFlagStatus(sFLASH_SPI, SPI_I2S_FLAG_TXE) == RESET);
 8000868:	480a      	ldr	r0, [pc, #40]	; (8000894 <sFLASH_SendByte+0x30>)
 800086a:	2102      	movs	r1, #2
 800086c:	f001 fe2c 	bl	80024c8 <SPI_I2S_GetFlagStatus>
 8000870:	2800      	cmp	r0, #0
 8000872:	d0f9      	beq.n	8000868 <sFLASH_SendByte+0x4>

  /* Send byte through the SPI peripheral */
  SPI_I2S_SendData(sFLASH_SPI, byte);
 8000874:	4807      	ldr	r0, [pc, #28]	; (8000894 <sFLASH_SendByte+0x30>)
 8000876:	4621      	mov	r1, r4
 8000878:	f001 fe21 	bl	80024be <SPI_I2S_SendData>

  /* Wait to receive a byte */
  while (SPI_I2S_GetFlagStatus(sFLASH_SPI, SPI_I2S_FLAG_RXNE) == RESET);
 800087c:	4805      	ldr	r0, [pc, #20]	; (8000894 <sFLASH_SendByte+0x30>)
 800087e:	2101      	movs	r1, #1
 8000880:	f001 fe22 	bl	80024c8 <SPI_I2S_GetFlagStatus>
 8000884:	2800      	cmp	r0, #0
 8000886:	d0f9      	beq.n	800087c <sFLASH_SendByte+0x18>

  /* Return the byte read from the SPI bus */
  return SPI_I2S_ReceiveData(sFLASH_SPI);
 8000888:	4802      	ldr	r0, [pc, #8]	; (8000894 <sFLASH_SendByte+0x30>)
 800088a:	f001 fe1a 	bl	80024c2 <SPI_I2S_ReceiveData>
}
 800088e:	b2c0      	uxtb	r0, r0
 8000890:	bd10      	pop	{r4, pc}
 8000892:	bf00      	nop
 8000894:	40003800 	.word	0x40003800

08000898 <sFLASH_ReadID>:
  * @brief  Reads FLASH identification.
  * @param  None
  * @retval FLASH identification
  */
uint32_t sFLASH_ReadID(void)
{
 8000898:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  uint32_t Temp = 0, Temp0 = 0, Temp1 = 0, Temp2 = 0;

  /* Select the FLASH: Chip Select low */
  sFLASH_CS_LOW();
 800089a:	4c0f      	ldr	r4, [pc, #60]	; (80008d8 <sFLASH_ReadID+0x40>)
 800089c:	f44f 7100 	mov.w	r1, #512	; 0x200
 80008a0:	4620      	mov	r0, r4
 80008a2:	f001 fda1 	bl	80023e8 <GPIO_ResetBits>

  /* Send "JEDEC ID Read" instruction */
  sFLASH_SendByte(sFLASH_CMD_RDID);
 80008a6:	209f      	movs	r0, #159	; 0x9f
 80008a8:	f7ff ffdc 	bl	8000864 <sFLASH_SendByte>

  /* Read a byte from the FLASH */
  Temp0 = sFLASH_SendByte(sFLASH_DUMMY_BYTE);
 80008ac:	20ff      	movs	r0, #255	; 0xff
 80008ae:	f7ff ffd9 	bl	8000864 <sFLASH_SendByte>
 80008b2:	4606      	mov	r6, r0

  /* Read a byte from the FLASH */
  Temp1 = sFLASH_SendByte(sFLASH_DUMMY_BYTE);
 80008b4:	20ff      	movs	r0, #255	; 0xff
 80008b6:	f7ff ffd5 	bl	8000864 <sFLASH_SendByte>
 80008ba:	4607      	mov	r7, r0

  /* Read a byte from the FLASH */
  Temp2 = sFLASH_SendByte(sFLASH_DUMMY_BYTE);
 80008bc:	20ff      	movs	r0, #255	; 0xff
 80008be:	f7ff ffd1 	bl	8000864 <sFLASH_SendByte>

  /* Deselect the FLASH: Chip Select high */
  sFLASH_CS_HIGH();

  Temp = (Temp0 << 16) | (Temp1 << 8) | Temp2;
 80008c2:	023f      	lsls	r7, r7, #8

  /* Read a byte from the FLASH */
  Temp1 = sFLASH_SendByte(sFLASH_DUMMY_BYTE);

  /* Read a byte from the FLASH */
  Temp2 = sFLASH_SendByte(sFLASH_DUMMY_BYTE);
 80008c4:	4605      	mov	r5, r0

  /* Deselect the FLASH: Chip Select high */
  sFLASH_CS_HIGH();
 80008c6:	f44f 7100 	mov.w	r1, #512	; 0x200
 80008ca:	4620      	mov	r0, r4
 80008cc:	f001 fd8a 	bl	80023e4 <GPIO_SetBits>

  Temp = (Temp0 << 16) | (Temp1 << 8) | Temp2;
 80008d0:	ea47 4006 	orr.w	r0, r7, r6, lsl #16

  return Temp;
}
 80008d4:	4328      	orrs	r0, r5
 80008d6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80008d8:	40010c00 	.word	0x40010c00

080008dc <sFLASH_ReadBuffer>:
  * @param  ReadAddr: FLASH's internal address to read from.
  * @param  NumByteToRead: number of bytes to read from the FLASH.
  * @retval None
  */
void sFLASH_ReadBuffer(uint8_t* pBuffer, uint32_t ReadAddr, uint16_t NumByteToRead)
{
 80008dc:	b570      	push	{r4, r5, r6, lr}
 80008de:	460c      	mov	r4, r1
 80008e0:	4606      	mov	r6, r0
  /* Select the FLASH: Chip Select low */
  sFLASH_CS_LOW();
 80008e2:	f44f 7100 	mov.w	r1, #512	; 0x200
 80008e6:	4811      	ldr	r0, [pc, #68]	; (800092c <sFLASH_ReadBuffer+0x50>)
  * @param  ReadAddr: FLASH's internal address to read from.
  * @param  NumByteToRead: number of bytes to read from the FLASH.
  * @retval None
  */
void sFLASH_ReadBuffer(uint8_t* pBuffer, uint32_t ReadAddr, uint16_t NumByteToRead)
{
 80008e8:	4615      	mov	r5, r2
  /* Select the FLASH: Chip Select low */
  sFLASH_CS_LOW();
 80008ea:	f001 fd7d 	bl	80023e8 <GPIO_ResetBits>

  /* Send "Read from Memory " instruction */
  sFLASH_SendByte(sFLASH_CMD_READ);
 80008ee:	2003      	movs	r0, #3
 80008f0:	f7ff ffb8 	bl	8000864 <sFLASH_SendByte>

  /* Send ReadAddr high nibble address byte to read from */
  sFLASH_SendByte((ReadAddr & 0xFF0000) >> 16);
 80008f4:	f3c4 4007 	ubfx	r0, r4, #16, #8
 80008f8:	f7ff ffb4 	bl	8000864 <sFLASH_SendByte>
  /* Send ReadAddr medium nibble address byte to read from */
  sFLASH_SendByte((ReadAddr& 0xFF00) >> 8);
 80008fc:	f3c4 2007 	ubfx	r0, r4, #8, #8
 8000900:	f7ff ffb0 	bl	8000864 <sFLASH_SendByte>
  /* Send ReadAddr low nibble address byte to read from */
  sFLASH_SendByte(ReadAddr & 0xFF);
 8000904:	b2e0      	uxtb	r0, r4
 8000906:	f7ff ffad 	bl	8000864 <sFLASH_SendByte>

  while (NumByteToRead) /* while there is data to be read */
 800090a:	b13d      	cbz	r5, 800091c <sFLASH_ReadBuffer+0x40>
  {
    /* Read a byte from the FLASH and point to the next location */
    *pBuffer++ = sFLASH_SendByte(sFLASH_DUMMY_BYTE);
 800090c:	20ff      	movs	r0, #255	; 0xff
 800090e:	f7ff ffa9 	bl	8000864 <sFLASH_SendByte>
    /* Decrement NumByteToRead */
    NumByteToRead--;
 8000912:	3d01      	subs	r5, #1
  sFLASH_SendByte(ReadAddr & 0xFF);

  while (NumByteToRead) /* while there is data to be read */
  {
    /* Read a byte from the FLASH and point to the next location */
    *pBuffer++ = sFLASH_SendByte(sFLASH_DUMMY_BYTE);
 8000914:	f806 0b01 	strb.w	r0, [r6], #1
    /* Decrement NumByteToRead */
    NumByteToRead--;
 8000918:	b2ad      	uxth	r5, r5
 800091a:	e7f6      	b.n	800090a <sFLASH_ReadBuffer+0x2e>
  }

  /* Deselect the FLASH: Chip Select high */
  sFLASH_CS_HIGH();
 800091c:	4803      	ldr	r0, [pc, #12]	; (800092c <sFLASH_ReadBuffer+0x50>)
 800091e:	f44f 7100 	mov.w	r1, #512	; 0x200
}
 8000922:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    /* Decrement NumByteToRead */
    NumByteToRead--;
  }

  /* Deselect the FLASH: Chip Select high */
  sFLASH_CS_HIGH();
 8000926:	f001 bd5d 	b.w	80023e4 <GPIO_SetBits>
 800092a:	bf00      	nop
 800092c:	40010c00 	.word	0x40010c00

08000930 <sFLASH_WriteEnable>:
  * @brief  Enables the write access to the FLASH.
  * @param  None
  * @retval None
  */
void sFLASH_WriteEnable(void)
{
 8000930:	b510      	push	{r4, lr}
  /* Select the FLASH: Chip Select low */
  sFLASH_CS_LOW();
 8000932:	4c08      	ldr	r4, [pc, #32]	; (8000954 <sFLASH_WriteEnable+0x24>)
 8000934:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000938:	4620      	mov	r0, r4
 800093a:	f001 fd55 	bl	80023e8 <GPIO_ResetBits>

  /* Send "Write Enable" instruction */
  sFLASH_SendByte(sFLASH_CMD_WREN);
 800093e:	2006      	movs	r0, #6
 8000940:	f7ff ff90 	bl	8000864 <sFLASH_SendByte>

  /* Deselect the FLASH: Chip Select high */
  sFLASH_CS_HIGH();
 8000944:	4620      	mov	r0, r4
 8000946:	f44f 7100 	mov.w	r1, #512	; 0x200
}
 800094a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}

  /* Send "Write Enable" instruction */
  sFLASH_SendByte(sFLASH_CMD_WREN);

  /* Deselect the FLASH: Chip Select high */
  sFLASH_CS_HIGH();
 800094e:	f001 bd49 	b.w	80023e4 <GPIO_SetBits>
 8000952:	bf00      	nop
 8000954:	40010c00 	.word	0x40010c00

08000958 <sFLASH_WriteDisable>:
  * @brief  Disables the write access to the FLASH.
  * @param  None
  * @retval None
  */
void sFLASH_WriteDisable(void)
{
 8000958:	b510      	push	{r4, lr}
  /* Select the FLASH: Chip Select low */
  sFLASH_CS_LOW();
 800095a:	4c08      	ldr	r4, [pc, #32]	; (800097c <sFLASH_WriteDisable+0x24>)
 800095c:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000960:	4620      	mov	r0, r4
 8000962:	f001 fd41 	bl	80023e8 <GPIO_ResetBits>

  /* Send "Write Disable" instruction */
  sFLASH_SendByte(sFLASH_CMD_WRDI);
 8000966:	2004      	movs	r0, #4
 8000968:	f7ff ff7c 	bl	8000864 <sFLASH_SendByte>

  /* Deselect the FLASH: Chip Select high */
  sFLASH_CS_HIGH();
 800096c:	4620      	mov	r0, r4
 800096e:	f44f 7100 	mov.w	r1, #512	; 0x200
}
 8000972:	e8bd 4010 	ldmia.w	sp!, {r4, lr}

  /* Send "Write Disable" instruction */
  sFLASH_SendByte(sFLASH_CMD_WRDI);

  /* Deselect the FLASH: Chip Select high */
  sFLASH_CS_HIGH();
 8000976:	f001 bd35 	b.w	80023e4 <GPIO_SetBits>
 800097a:	bf00      	nop
 800097c:	40010c00 	.word	0x40010c00

08000980 <sFLASH_Init>:
  * @brief Initializes SPI Flash
  * @param void
  * @return void
  */
void sFLASH_Init(void)
{
 8000980:	b508      	push	{r3, lr}
  uint32_t Device_ID = 0;

  /* Initializes the peripherals used by the SPI FLASH driver */
  sFLASH_SPI_Init();
 8000982:	f7ff fdcd 	bl	8000520 <sFLASH_SPI_Init>

  /* Disable the write access to the FLASH */
  sFLASH_WriteDisable();
 8000986:	f7ff ffe7 	bl	8000958 <sFLASH_WriteDisable>

  /* Read FLASH identification */
  Device_ID = sFLASH_ReadID();
 800098a:	f7ff ff85 	bl	8000898 <sFLASH_ReadID>

  if(Device_ID == sFLASH_SST25VF040_ID || Device_ID == sFLASH_SST25VF016_ID)
 800098e:	4b19      	ldr	r3, [pc, #100]	; (80009f4 <sFLASH_Init+0x74>)
 8000990:	4298      	cmp	r0, r3
 8000992:	d002      	beq.n	800099a <sFLASH_Init+0x1a>
 8000994:	3b4c      	subs	r3, #76	; 0x4c
 8000996:	4298      	cmp	r0, r3
 8000998:	d12b      	bne.n	80009f2 <sFLASH_Init+0x72>
  {
    /* Select the FLASH: Chip Select low */
    sFLASH_CS_LOW();
 800099a:	f44f 7100 	mov.w	r1, #512	; 0x200
 800099e:	4816      	ldr	r0, [pc, #88]	; (80009f8 <sFLASH_Init+0x78>)
 80009a0:	f001 fd22 	bl	80023e8 <GPIO_ResetBits>
    /* Send "Disable SO RY/BY# Status" instruction */
    sFLASH_SendByte(sFLASH_CMD_DBSY);
 80009a4:	2080      	movs	r0, #128	; 0x80
 80009a6:	f7ff ff5d 	bl	8000864 <sFLASH_SendByte>
    /* Deselect the FLASH: Chip Select high */
    sFLASH_CS_HIGH();
 80009aa:	4813      	ldr	r0, [pc, #76]	; (80009f8 <sFLASH_Init+0x78>)
 80009ac:	f44f 7100 	mov.w	r1, #512	; 0x200
 80009b0:	f001 fd18 	bl	80023e4 <GPIO_SetBits>

    /* Select the FLASH: Chip Select low */
    sFLASH_CS_LOW();
 80009b4:	f44f 7100 	mov.w	r1, #512	; 0x200
 80009b8:	480f      	ldr	r0, [pc, #60]	; (80009f8 <sFLASH_Init+0x78>)
 80009ba:	f001 fd15 	bl	80023e8 <GPIO_ResetBits>
    /* Send "Write Enable Status" instruction */
    sFLASH_SendByte(sFLASH_CMD_EWSR);
 80009be:	2050      	movs	r0, #80	; 0x50
 80009c0:	f7ff ff50 	bl	8000864 <sFLASH_SendByte>
    /* Deselect the FLASH: Chip Select high */
    sFLASH_CS_HIGH();
 80009c4:	480c      	ldr	r0, [pc, #48]	; (80009f8 <sFLASH_Init+0x78>)
 80009c6:	f44f 7100 	mov.w	r1, #512	; 0x200
 80009ca:	f001 fd0b 	bl	80023e4 <GPIO_SetBits>

    /* Select the FLASH: Chip Select low */
    sFLASH_CS_LOW();
 80009ce:	f44f 7100 	mov.w	r1, #512	; 0x200
 80009d2:	4809      	ldr	r0, [pc, #36]	; (80009f8 <sFLASH_Init+0x78>)
 80009d4:	f001 fd08 	bl	80023e8 <GPIO_ResetBits>
    /* Send "Write Status Register" instruction */
    sFLASH_SendByte(sFLASH_CMD_WRSR);
 80009d8:	2001      	movs	r0, #1
 80009da:	f7ff ff43 	bl	8000864 <sFLASH_SendByte>
    sFLASH_SendByte(0);
 80009de:	2000      	movs	r0, #0
 80009e0:	f7ff ff40 	bl	8000864 <sFLASH_SendByte>
    /* Deselect the FLASH: Chip Select high */
    sFLASH_CS_HIGH();
 80009e4:	4804      	ldr	r0, [pc, #16]	; (80009f8 <sFLASH_Init+0x78>)
 80009e6:	f44f 7100 	mov.w	r1, #512	; 0x200
  }
}
 80009ea:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    sFLASH_CS_LOW();
    /* Send "Write Status Register" instruction */
    sFLASH_SendByte(sFLASH_CMD_WRSR);
    sFLASH_SendByte(0);
    /* Deselect the FLASH: Chip Select high */
    sFLASH_CS_HIGH();
 80009ee:	f001 bcf9 	b.w	80023e4 <GPIO_SetBits>
 80009f2:	bd08      	pop	{r3, pc}
 80009f4:	00bf258d 	.word	0x00bf258d
 80009f8:	40010c00 	.word	0x40010c00

080009fc <sFLASH_WaitForWriteEnd>:
void sFLASH_WaitForWriteEnd(void)
{
  uint8_t flashstatus = 0;

  /* Select the FLASH: Chip Select low */
  sFLASH_CS_LOW();
 80009fc:	480a      	ldr	r0, [pc, #40]	; (8000a28 <sFLASH_WaitForWriteEnd+0x2c>)
  *         status register and loop until write operation has completed.
  * @param  None
  * @retval None
  */
void sFLASH_WaitForWriteEnd(void)
{
 80009fe:	b508      	push	{r3, lr}
  uint8_t flashstatus = 0;

  /* Select the FLASH: Chip Select low */
  sFLASH_CS_LOW();
 8000a00:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000a04:	f001 fcf0 	bl	80023e8 <GPIO_ResetBits>

  /* Send "Read Status Register" instruction */
  sFLASH_SendByte(sFLASH_CMD_RDSR);
 8000a08:	2005      	movs	r0, #5
 8000a0a:	f7ff ff2b 	bl	8000864 <sFLASH_SendByte>
  /* Loop as long as the memory is busy with a write cycle */
  do
  {
    /* Send a dummy byte to generate the clock needed by the FLASH
    and put the value of the status register in FLASH_Status variable */
    flashstatus = sFLASH_SendByte(sFLASH_DUMMY_BYTE);
 8000a0e:	20ff      	movs	r0, #255	; 0xff
 8000a10:	f7ff ff28 	bl	8000864 <sFLASH_SendByte>
  }
  while ((flashstatus & sFLASH_WIP_FLAG) == SET); /* Write in progress */
 8000a14:	07c3      	lsls	r3, r0, #31
 8000a16:	d4fa      	bmi.n	8000a0e <sFLASH_WaitForWriteEnd+0x12>

  /* Deselect the FLASH: Chip Select high */
  sFLASH_CS_HIGH();
 8000a18:	4803      	ldr	r0, [pc, #12]	; (8000a28 <sFLASH_WaitForWriteEnd+0x2c>)
 8000a1a:	f44f 7100 	mov.w	r1, #512	; 0x200
}
 8000a1e:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    flashstatus = sFLASH_SendByte(sFLASH_DUMMY_BYTE);
  }
  while ((flashstatus & sFLASH_WIP_FLAG) == SET); /* Write in progress */

  /* Deselect the FLASH: Chip Select high */
  sFLASH_CS_HIGH();
 8000a22:	f001 bcdf 	b.w	80023e4 <GPIO_SetBits>
 8000a26:	bf00      	nop
 8000a28:	40010c00 	.word	0x40010c00

08000a2c <sFLASH_WritePage>:
  * @param  NumByteToWrite: number of bytes to write to the FLASH, must be even,
  *         equal or less than "sFLASH_PAGESIZE" value.
  * @retval None
  */
void sFLASH_WritePage(uint8_t* pBuffer, uint32_t WriteAddr, uint16_t NumByteToWrite)
{
 8000a2c:	b570      	push	{r4, r5, r6, lr}
 8000a2e:	4616      	mov	r6, r2
 8000a30:	4604      	mov	r4, r0
 8000a32:	460d      	mov	r5, r1
  /* Enable the write access to the FLASH */
  sFLASH_WriteEnable();
 8000a34:	f7ff ff7c 	bl	8000930 <sFLASH_WriteEnable>

  /* Select the FLASH: Chip Select low */
  sFLASH_CS_LOW();
 8000a38:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000a3c:	4821      	ldr	r0, [pc, #132]	; (8000ac4 <sFLASH_WritePage+0x98>)
 8000a3e:	f001 fcd3 	bl	80023e8 <GPIO_ResetBits>
  /* Send "Auto Address Increment Word-Program" instruction */
  sFLASH_SendByte(sFLASH_CMD_AAIP);
 8000a42:	20ad      	movs	r0, #173	; 0xad
 8000a44:	f7ff ff0e 	bl	8000864 <sFLASH_SendByte>
  /* Send WriteAddr high nibble address byte to write to */
  sFLASH_SendByte((WriteAddr & 0xFF0000) >> 16);
 8000a48:	f3c5 4007 	ubfx	r0, r5, #16, #8
 8000a4c:	f7ff ff0a 	bl	8000864 <sFLASH_SendByte>
  /* Send WriteAddr medium nibble address byte to write to */
  sFLASH_SendByte((WriteAddr & 0xFF00) >> 8);
 8000a50:	f3c5 2007 	ubfx	r0, r5, #8, #8
 8000a54:	f7ff ff06 	bl	8000864 <sFLASH_SendByte>
  /* Send WriteAddr low nibble address byte to write to */
  sFLASH_SendByte(WriteAddr & 0xFF);
 8000a58:	b2e8      	uxtb	r0, r5
 8000a5a:	f7ff ff03 	bl	8000864 <sFLASH_SendByte>
  /* Send the first byte */
  sFLASH_SendByte(*pBuffer++);
 8000a5e:	7820      	ldrb	r0, [r4, #0]
 8000a60:	f7ff ff00 	bl	8000864 <sFLASH_SendByte>
  /* Send the second byte */
  sFLASH_SendByte(*pBuffer++);
 8000a64:	7860      	ldrb	r0, [r4, #1]
 8000a66:	f7ff fefd 	bl	8000864 <sFLASH_SendByte>
  /* Update NumByteToWrite */
  NumByteToWrite -= 2;
  /* Deselect the FLASH: Chip Select high */
  sFLASH_CS_HIGH();
 8000a6a:	4816      	ldr	r0, [pc, #88]	; (8000ac4 <sFLASH_WritePage+0x98>)
 8000a6c:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000a70:	f001 fcb8 	bl	80023e4 <GPIO_SetBits>
  /* Wait till the end of Flash writing */
  sFLASH_WaitForWriteEnd();
 8000a74:	f7ff ffc2 	bl	80009fc <sFLASH_WaitForWriteEnd>
  /* Send WriteAddr low nibble address byte to write to */
  sFLASH_SendByte(WriteAddr & 0xFF);
  /* Send the first byte */
  sFLASH_SendByte(*pBuffer++);
  /* Send the second byte */
  sFLASH_SendByte(*pBuffer++);
 8000a78:	1ca5      	adds	r5, r4, #2
  sFLASH_CS_HIGH();
  /* Wait till the end of Flash writing */
  sFLASH_WaitForWriteEnd();

  /* while there is data to be written on the FLASH */
  while (NumByteToWrite)
 8000a7a:	462c      	mov	r4, r5
 8000a7c:	3402      	adds	r4, #2
  * @param  WriteAddr: FLASH's internal address to write to.
  * @param  NumByteToWrite: number of bytes to write to the FLASH, must be even,
  *         equal or less than "sFLASH_PAGESIZE" value.
  * @retval None
  */
void sFLASH_WritePage(uint8_t* pBuffer, uint32_t WriteAddr, uint16_t NumByteToWrite)
 8000a7e:	1b2b      	subs	r3, r5, r4
  sFLASH_CS_HIGH();
  /* Wait till the end of Flash writing */
  sFLASH_WaitForWriteEnd();

  /* while there is data to be written on the FLASH */
  while (NumByteToWrite)
 8000a80:	18f0      	adds	r0, r6, r3
 8000a82:	b282      	uxth	r2, r0
  {
	/* Select the FLASH: Chip Select low */
	sFLASH_CS_LOW();
 8000a84:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000a88:	480e      	ldr	r0, [pc, #56]	; (8000ac4 <sFLASH_WritePage+0x98>)
  sFLASH_CS_HIGH();
  /* Wait till the end of Flash writing */
  sFLASH_WaitForWriteEnd();

  /* while there is data to be written on the FLASH */
  while (NumByteToWrite)
 8000a8a:	b1a2      	cbz	r2, 8000ab6 <sFLASH_WritePage+0x8a>
  {
	/* Select the FLASH: Chip Select low */
	sFLASH_CS_LOW();
 8000a8c:	f001 fcac 	bl	80023e8 <GPIO_ResetBits>
	/* Send "Auto Address Increment Word-Program" instruction */
	sFLASH_SendByte(sFLASH_CMD_AAIP);
 8000a90:	20ad      	movs	r0, #173	; 0xad
 8000a92:	f7ff fee7 	bl	8000864 <sFLASH_SendByte>
    /* Send the next byte and point on the next byte */
    sFLASH_SendByte(*pBuffer++);
 8000a96:	f814 0c02 	ldrb.w	r0, [r4, #-2]
 8000a9a:	f7ff fee3 	bl	8000864 <sFLASH_SendByte>
    /* Send the next byte and point on the next byte */
    sFLASH_SendByte(*pBuffer++);
 8000a9e:	f814 0c01 	ldrb.w	r0, [r4, #-1]
 8000aa2:	f7ff fedf 	bl	8000864 <sFLASH_SendByte>
    /* Update NumByteToWrite */
    NumByteToWrite -= 2;
    /* Deselect the FLASH: Chip Select high */
    sFLASH_CS_HIGH();
 8000aa6:	4807      	ldr	r0, [pc, #28]	; (8000ac4 <sFLASH_WritePage+0x98>)
 8000aa8:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000aac:	f001 fc9a 	bl	80023e4 <GPIO_SetBits>
    /* Wait till the end of Flash writing */
    sFLASH_WaitForWriteEnd();
 8000ab0:	f7ff ffa4 	bl	80009fc <sFLASH_WaitForWriteEnd>
 8000ab4:	e7e2      	b.n	8000a7c <sFLASH_WritePage+0x50>
  }

  /* Deselect the FLASH: Chip Select high */
  sFLASH_CS_HIGH();
 8000ab6:	f001 fc95 	bl	80023e4 <GPIO_SetBits>

  /* Disable the write access to the FLASH */
  sFLASH_WriteDisable();
}
 8000aba:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}

  /* Deselect the FLASH: Chip Select high */
  sFLASH_CS_HIGH();

  /* Disable the write access to the FLASH */
  sFLASH_WriteDisable();
 8000abe:	f7ff bf4b 	b.w	8000958 <sFLASH_WriteDisable>
 8000ac2:	bf00      	nop
 8000ac4:	40010c00 	.word	0x40010c00

08000ac8 <sFLASH_WriteBuffer>:
  * @param  WriteAddr: FLASH's internal address to write to.
  * @param  NumByteToWrite: number of bytes to write to the FLASH.
  * @retval None
  */
void sFLASH_WriteBuffer(uint8_t* pBuffer, uint32_t WriteAddr, uint16_t NumByteToWrite)
{
 8000ac8:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
  Addr = WriteAddr % sFLASH_PAGESIZE;
  count = sFLASH_PAGESIZE - Addr;
  NumOfPage =  NumByteToWrite / sFLASH_PAGESIZE;
  NumOfSingle = NumByteToWrite % sFLASH_PAGESIZE;

  if (Addr == 0) /* WriteAddr is sFLASH_PAGESIZE aligned  */
 8000acc:	f011 09ff 	ands.w	r9, r1, #255	; 0xff
  * @param  WriteAddr: FLASH's internal address to write to.
  * @param  NumByteToWrite: number of bytes to write to the FLASH.
  * @retval None
  */
void sFLASH_WriteBuffer(uint8_t* pBuffer, uint32_t WriteAddr, uint16_t NumByteToWrite)
{
 8000ad0:	4606      	mov	r6, r0
 8000ad2:	460d      	mov	r5, r1
 8000ad4:	4617      	mov	r7, r2
  uint8_t NumOfPage = 0, NumOfSingle = 0, Addr = 0, count = 0, temp = 0;

  Addr = WriteAddr % sFLASH_PAGESIZE;
  count = sFLASH_PAGESIZE - Addr;
  NumOfPage =  NumByteToWrite / sFLASH_PAGESIZE;
 8000ad6:	ea4f 3812 	mov.w	r8, r2, lsr #12
  NumOfSingle = NumByteToWrite % sFLASH_PAGESIZE;

  if (Addr == 0) /* WriteAddr is sFLASH_PAGESIZE aligned  */
 8000ada:	d11d      	bne.n	8000b18 <sFLASH_WriteBuffer+0x50>
  {
    if (NumOfPage == 0) /* NumByteToWrite < sFLASH_PAGESIZE */
 8000adc:	f1b8 0f00 	cmp.w	r8, #0
 8000ae0:	d103      	bne.n	8000aea <sFLASH_WriteBuffer+0x22>
    {
      sFLASH_WritePage(pBuffer, WriteAddr, NumByteToWrite);
 8000ae2:	4630      	mov	r0, r6
 8000ae4:	4629      	mov	r1, r5
 8000ae6:	463a      	mov	r2, r7
 8000ae8:	e051      	b.n	8000b8e <sFLASH_WriteBuffer+0xc6>
  NumOfPage =  NumByteToWrite / sFLASH_PAGESIZE;
  NumOfSingle = NumByteToWrite % sFLASH_PAGESIZE;

  if (Addr == 0) /* WriteAddr is sFLASH_PAGESIZE aligned  */
  {
    if (NumOfPage == 0) /* NumByteToWrite < sFLASH_PAGESIZE */
 8000aea:	4604      	mov	r4, r0
    {
      sFLASH_WritePage(pBuffer, WriteAddr, NumByteToWrite);
    }
    else /* NumByteToWrite > sFLASH_PAGESIZE */
    {
      while (NumOfPage--)
 8000aec:	fa5f f289 	uxtb.w	r2, r9
  *         to the FLASH.
  * @param  WriteAddr: FLASH's internal address to write to.
  * @param  NumByteToWrite: number of bytes to write to the FLASH.
  * @retval None
  */
void sFLASH_WriteBuffer(uint8_t* pBuffer, uint32_t WriteAddr, uint16_t NumByteToWrite)
 8000af0:	1ba8      	subs	r0, r5, r6
    {
      sFLASH_WritePage(pBuffer, WriteAddr, NumByteToWrite);
    }
    else /* NumByteToWrite > sFLASH_PAGESIZE */
    {
      while (NumOfPage--)
 8000af2:	4590      	cmp	r8, r2
  *         to the FLASH.
  * @param  WriteAddr: FLASH's internal address to write to.
  * @param  NumByteToWrite: number of bytes to write to the FLASH.
  * @retval None
  */
void sFLASH_WriteBuffer(uint8_t* pBuffer, uint32_t WriteAddr, uint16_t NumByteToWrite)
 8000af4:	eb04 0100 	add.w	r1, r4, r0
    {
      sFLASH_WritePage(pBuffer, WriteAddr, NumByteToWrite);
    }
    else /* NumByteToWrite > sFLASH_PAGESIZE */
    {
      while (NumOfPage--)
 8000af8:	d009      	beq.n	8000b0e <sFLASH_WriteBuffer+0x46>
      {
        sFLASH_WritePage(pBuffer, WriteAddr, sFLASH_PAGESIZE);
 8000afa:	4620      	mov	r0, r4
 8000afc:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8000b00:	f7ff ff94 	bl	8000a2c <sFLASH_WritePage>
        WriteAddr +=  sFLASH_PAGESIZE;
        pBuffer += sFLASH_PAGESIZE;
 8000b04:	f504 5480 	add.w	r4, r4, #4096	; 0x1000
 8000b08:	f109 0901 	add.w	r9, r9, #1
 8000b0c:	e7ee      	b.n	8000aec <sFLASH_WriteBuffer+0x24>
  *         to the FLASH.
  * @param  WriteAddr: FLASH's internal address to write to.
  * @param  NumByteToWrite: number of bytes to write to the FLASH.
  * @retval None
  */
void sFLASH_WriteBuffer(uint8_t* pBuffer, uint32_t WriteAddr, uint16_t NumByteToWrite)
 8000b0e:	ea4f 3108 	mov.w	r1, r8, lsl #12
        sFLASH_WritePage(pBuffer, WriteAddr, sFLASH_PAGESIZE);
        WriteAddr +=  sFLASH_PAGESIZE;
        pBuffer += sFLASH_PAGESIZE;
      }

      sFLASH_WritePage(pBuffer, WriteAddr, NumOfSingle);
 8000b12:	1870      	adds	r0, r6, r1
 8000b14:	1949      	adds	r1, r1, r5
 8000b16:	e039      	b.n	8000b8c <sFLASH_WriteBuffer+0xc4>
void sFLASH_WriteBuffer(uint8_t* pBuffer, uint32_t WriteAddr, uint16_t NumByteToWrite)
{
  uint8_t NumOfPage = 0, NumOfSingle = 0, Addr = 0, count = 0, temp = 0;

  Addr = WriteAddr % sFLASH_PAGESIZE;
  count = sFLASH_PAGESIZE - Addr;
 8000b18:	f1c9 0400 	rsb	r4, r9, #0
 8000b1c:	b2e4      	uxtb	r4, r4
      sFLASH_WritePage(pBuffer, WriteAddr, NumOfSingle);
    }
  }
  else /* WriteAddr is not sFLASH_PAGESIZE aligned  */
  {
    if (NumOfPage == 0) /* NumByteToWrite < sFLASH_PAGESIZE */
 8000b1e:	f1b8 0f00 	cmp.w	r8, #0
 8000b22:	d10d      	bne.n	8000b40 <sFLASH_WriteBuffer+0x78>
  uint8_t NumOfPage = 0, NumOfSingle = 0, Addr = 0, count = 0, temp = 0;

  Addr = WriteAddr % sFLASH_PAGESIZE;
  count = sFLASH_PAGESIZE - Addr;
  NumOfPage =  NumByteToWrite / sFLASH_PAGESIZE;
  NumOfSingle = NumByteToWrite % sFLASH_PAGESIZE;
 8000b24:	b2d2      	uxtb	r2, r2
  }
  else /* WriteAddr is not sFLASH_PAGESIZE aligned  */
  {
    if (NumOfPage == 0) /* NumByteToWrite < sFLASH_PAGESIZE */
    {
      if (NumOfSingle > count) /* (NumByteToWrite + WriteAddr) > sFLASH_PAGESIZE */
 8000b26:	42a2      	cmp	r2, r4
 8000b28:	d9db      	bls.n	8000ae2 <sFLASH_WriteBuffer+0x1a>
      {
        temp = NumOfSingle - count;
 8000b2a:	eb02 0309 	add.w	r3, r2, r9
 8000b2e:	fa5f f983 	uxtb.w	r9, r3

        sFLASH_WritePage(pBuffer, WriteAddr, count);
 8000b32:	4622      	mov	r2, r4
 8000b34:	f7ff ff7a 	bl	8000a2c <sFLASH_WritePage>
        WriteAddr +=  count;
        pBuffer += count;

        sFLASH_WritePage(pBuffer, WriteAddr, temp);
 8000b38:	1930      	adds	r0, r6, r4
 8000b3a:	1961      	adds	r1, r4, r5
 8000b3c:	464a      	mov	r2, r9
 8000b3e:	e026      	b.n	8000b8e <sFLASH_WriteBuffer+0xc6>
        sFLASH_WritePage(pBuffer, WriteAddr, NumByteToWrite);
      }
    }
    else /* NumByteToWrite > sFLASH_PAGESIZE */
    {
      NumByteToWrite -= count;
 8000b40:	1b17      	subs	r7, r2, r4
      NumOfPage =  NumByteToWrite / sFLASH_PAGESIZE;
      NumOfSingle = NumByteToWrite % sFLASH_PAGESIZE;

      sFLASH_WritePage(pBuffer, WriteAddr, count);
 8000b42:	4622      	mov	r2, r4
 8000b44:	f7ff ff72 	bl	8000a2c <sFLASH_WritePage>
        sFLASH_WritePage(pBuffer, WriteAddr, NumByteToWrite);
      }
    }
    else /* NumByteToWrite > sFLASH_PAGESIZE */
    {
      NumByteToWrite -= count;
 8000b48:	b2bf      	uxth	r7, r7
      NumOfPage =  NumByteToWrite / sFLASH_PAGESIZE;
 8000b4a:	ea4f 3917 	mov.w	r9, r7, lsr #12
      NumOfSingle = NumByteToWrite % sFLASH_PAGESIZE;

      sFLASH_WritePage(pBuffer, WriteAddr, count);
      WriteAddr +=  count;
 8000b4e:	1965      	adds	r5, r4, r5
      pBuffer += count;
 8000b50:	1934      	adds	r4, r6, r4
      }
    }
    else /* NumByteToWrite > sFLASH_PAGESIZE */
    {
      NumByteToWrite -= count;
      NumOfPage =  NumByteToWrite / sFLASH_PAGESIZE;
 8000b52:	fa5f fb89 	uxtb.w	fp, r9
      NumOfSingle = NumByteToWrite % sFLASH_PAGESIZE;
 8000b56:	fa5f fa87 	uxtb.w	sl, r7

      sFLASH_WritePage(pBuffer, WriteAddr, count);
      WriteAddr +=  count;
      pBuffer += count;
 8000b5a:	46a0      	mov	r8, r4

      while (NumOfPage--)
 8000b5c:	2600      	movs	r6, #0
 8000b5e:	b2f3      	uxtb	r3, r6
  *         to the FLASH.
  * @param  WriteAddr: FLASH's internal address to write to.
  * @param  NumByteToWrite: number of bytes to write to the FLASH.
  * @retval None
  */
void sFLASH_WriteBuffer(uint8_t* pBuffer, uint32_t WriteAddr, uint16_t NumByteToWrite)
 8000b60:	1b29      	subs	r1, r5, r4

      sFLASH_WritePage(pBuffer, WriteAddr, count);
      WriteAddr +=  count;
      pBuffer += count;

      while (NumOfPage--)
 8000b62:	459b      	cmp	fp, r3
  *         to the FLASH.
  * @param  WriteAddr: FLASH's internal address to write to.
  * @param  NumByteToWrite: number of bytes to write to the FLASH.
  * @retval None
  */
void sFLASH_WriteBuffer(uint8_t* pBuffer, uint32_t WriteAddr, uint16_t NumByteToWrite)
 8000b64:	4441      	add	r1, r8

      sFLASH_WritePage(pBuffer, WriteAddr, count);
      WriteAddr +=  count;
      pBuffer += count;

      while (NumOfPage--)
 8000b66:	d008      	beq.n	8000b7a <sFLASH_WriteBuffer+0xb2>
      {
        sFLASH_WritePage(pBuffer, WriteAddr, sFLASH_PAGESIZE);
 8000b68:	4640      	mov	r0, r8
 8000b6a:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8000b6e:	f7ff ff5d 	bl	8000a2c <sFLASH_WritePage>
        WriteAddr +=  sFLASH_PAGESIZE;
        pBuffer += sFLASH_PAGESIZE;
 8000b72:	f508 5880 	add.w	r8, r8, #4096	; 0x1000
 8000b76:	3601      	adds	r6, #1
 8000b78:	e7f1      	b.n	8000b5e <sFLASH_WriteBuffer+0x96>
  *         to the FLASH.
  * @param  WriteAddr: FLASH's internal address to write to.
  * @param  NumByteToWrite: number of bytes to write to the FLASH.
  * @retval None
  */
void sFLASH_WriteBuffer(uint8_t* pBuffer, uint32_t WriteAddr, uint16_t NumByteToWrite)
 8000b7a:	ea4f 3909 	mov.w	r9, r9, lsl #12
 8000b7e:	eb04 0009 	add.w	r0, r4, r9
 8000b82:	eb09 0105 	add.w	r1, r9, r5
        sFLASH_WritePage(pBuffer, WriteAddr, sFLASH_PAGESIZE);
        WriteAddr +=  sFLASH_PAGESIZE;
        pBuffer += sFLASH_PAGESIZE;
      }

      if (NumOfSingle != 0)
 8000b86:	f1ba 0f00 	cmp.w	sl, #0
 8000b8a:	d004      	beq.n	8000b96 <sFLASH_WriteBuffer+0xce>
      {
        sFLASH_WritePage(pBuffer, WriteAddr, NumOfSingle);
 8000b8c:	b2fa      	uxtb	r2, r7
      }
    }
  }
}
 8000b8e:	e8bd 4ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
        pBuffer += sFLASH_PAGESIZE;
      }

      if (NumOfSingle != 0)
      {
        sFLASH_WritePage(pBuffer, WriteAddr, NumOfSingle);
 8000b92:	f7ff bf4b 	b.w	8000a2c <sFLASH_WritePage>
 8000b96:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
	...

08000b9c <sFLASH_EraseSector>:
  * @brief  Erases the specified FLASH sector.
  * @param  SectorAddr: address of the sector to erase.
  * @retval None
  */
void sFLASH_EraseSector(uint32_t SectorAddr)
{
 8000b9c:	b538      	push	{r3, r4, r5, lr}
  /* Enable the write access to the FLASH */
  sFLASH_WriteEnable();

  /* Sector Erase */
  /* Select the FLASH: Chip Select low */
  sFLASH_CS_LOW();
 8000b9e:	4d10      	ldr	r5, [pc, #64]	; (8000be0 <sFLASH_EraseSector+0x44>)
  * @brief  Erases the specified FLASH sector.
  * @param  SectorAddr: address of the sector to erase.
  * @retval None
  */
void sFLASH_EraseSector(uint32_t SectorAddr)
{
 8000ba0:	4604      	mov	r4, r0
  /* Enable the write access to the FLASH */
  sFLASH_WriteEnable();
 8000ba2:	f7ff fec5 	bl	8000930 <sFLASH_WriteEnable>

  /* Sector Erase */
  /* Select the FLASH: Chip Select low */
  sFLASH_CS_LOW();
 8000ba6:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000baa:	4628      	mov	r0, r5
 8000bac:	f001 fc1c 	bl	80023e8 <GPIO_ResetBits>
  /* Send Sector Erase instruction */
  sFLASH_SendByte(sFLASH_CMD_SE);
 8000bb0:	2020      	movs	r0, #32
 8000bb2:	f7ff fe57 	bl	8000864 <sFLASH_SendByte>
  /* Send SectorAddr high nibble address byte */
  sFLASH_SendByte((SectorAddr & 0xFF0000) >> 16);
 8000bb6:	f3c4 4007 	ubfx	r0, r4, #16, #8
 8000bba:	f7ff fe53 	bl	8000864 <sFLASH_SendByte>
  /* Send SectorAddr medium nibble address byte */
  sFLASH_SendByte((SectorAddr & 0xFF00) >> 8);
 8000bbe:	f3c4 2007 	ubfx	r0, r4, #8, #8
 8000bc2:	f7ff fe4f 	bl	8000864 <sFLASH_SendByte>
  /* Send SectorAddr low nibble address byte */
  sFLASH_SendByte(SectorAddr & 0xFF);
 8000bc6:	b2e0      	uxtb	r0, r4
 8000bc8:	f7ff fe4c 	bl	8000864 <sFLASH_SendByte>
  /* Deselect the FLASH: Chip Select high */
  sFLASH_CS_HIGH();
 8000bcc:	4628      	mov	r0, r5
 8000bce:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000bd2:	f001 fc07 	bl	80023e4 <GPIO_SetBits>

  /* Wait till the end of Flash writing */
  sFLASH_WaitForWriteEnd();
}
 8000bd6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  sFLASH_SendByte(SectorAddr & 0xFF);
  /* Deselect the FLASH: Chip Select high */
  sFLASH_CS_HIGH();

  /* Wait till the end of Flash writing */
  sFLASH_WaitForWriteEnd();
 8000bda:	f7ff bf0f 	b.w	80009fc <sFLASH_WaitForWriteEnd>
 8000bde:	bf00      	nop
 8000be0:	40010c00 	.word	0x40010c00

08000be4 <NMI_Handler>:
 * Input          : None
 * Output         : None
 * Return         : None
 *******************************************************************************/
void NMI_Handler(void)
{
 8000be4:	4770      	bx	lr

08000be6 <HardFault_Handler>:
 * Input          : None
 * Output         : None
 * Return         : None
 *******************************************************************************/
void HardFault_Handler(void)
{
 8000be6:	e7fe      	b.n	8000be6 <HardFault_Handler>

08000be8 <MemManage_Handler>:
 * Input          : None
 * Output         : None
 * Return         : None
 *******************************************************************************/
void MemManage_Handler(void)
{
 8000be8:	e7fe      	b.n	8000be8 <MemManage_Handler>

08000bea <BusFault_Handler>:
 * Input          : None
 * Output         : None
 * Return         : None
 *******************************************************************************/
void BusFault_Handler(void)
{
 8000bea:	e7fe      	b.n	8000bea <BusFault_Handler>

08000bec <UsageFault_Handler>:
 * Input          : None
 * Output         : None
 * Return         : None
 *******************************************************************************/
void UsageFault_Handler(void)
{
 8000bec:	e7fe      	b.n	8000bec <UsageFault_Handler>

08000bee <SVC_Handler>:
 * Input          : None
 * Output         : None
 * Return         : None
 *******************************************************************************/
void SVC_Handler(void)
{
 8000bee:	4770      	bx	lr

08000bf0 <DebugMon_Handler>:
 * Input          : None
 * Output         : None
 * Return         : None
 *******************************************************************************/
void DebugMon_Handler(void)
{
 8000bf0:	4770      	bx	lr

08000bf2 <PendSV_Handler>:
 * Input          : None
 * Output         : None
 * Return         : None
 *******************************************************************************/
void PendSV_Handler(void)
{
 8000bf2:	4770      	bx	lr

08000bf4 <SysTick_Handler>:
 * Output         : None
 * Return         : None
 *******************************************************************************/
void SysTick_Handler(void)
{
	Timing_Decrement();
 8000bf4:	f7ff bdfe 	b.w	80007f4 <Timing_Decrement>

08000bf8 <EXTI0_IRQHandler>:
 * Input          : None
 * Output         : None
 * Return         : None
 *******************************************************************************/
void EXTI0_IRQHandler(void)
{
 8000bf8:	b508      	push	{r3, lr}
	if (EXTI_GetITStatus(BUTTON1_EXTI_LINE ) != RESET)
 8000bfa:	f44f 6080 	mov.w	r0, #1024	; 0x400
 8000bfe:	f001 fb11 	bl	8002224 <EXTI_GetITStatus>
 8000c02:	b168      	cbz	r0, 8000c20 <EXTI0_IRQHandler+0x28>
	{
		/* Clear the EXTI line pending flag */
		EXTI_ClearFlag(BUTTON1_EXTI_LINE );
 8000c04:	f44f 6080 	mov.w	r0, #1024	; 0x400
 8000c08:	f001 fb06 	bl	8002218 <EXTI_ClearFlag>

		/* Disable BUTTON1 Interrupts */
		BUTTON_EXTI_Config(BUTTON1, DISABLE);
 8000c0c:	2000      	movs	r0, #0
 8000c0e:	4601      	mov	r1, r0
 8000c10:	f7ff fb88 	bl	8000324 <BUTTON_EXTI_Config>

	    /* DEBOUNCE_TIMER Enable Counter */
	    TIM_Cmd(DEBOUNCE_TIMER, ENABLE);
 8000c14:	4803      	ldr	r0, [pc, #12]	; (8000c24 <EXTI0_IRQHandler+0x2c>)
 8000c16:	2101      	movs	r1, #1
	}
}
 8000c18:	e8bd 4008 	ldmia.w	sp!, {r3, lr}

		/* Disable BUTTON1 Interrupts */
		BUTTON_EXTI_Config(BUTTON1, DISABLE);

	    /* DEBOUNCE_TIMER Enable Counter */
	    TIM_Cmd(DEBOUNCE_TIMER, ENABLE);
 8000c1c:	f001 bcad 	b.w	800257a <TIM_Cmd>
 8000c20:	bd08      	pop	{r3, pc}
 8000c22:	bf00      	nop
 8000c24:	40012c00 	.word	0x40012c00

08000c28 <EXTI15_10_IRQHandler>:
 * Input          : None
 * Output         : None
 * Return         : None
 *******************************************************************************/
void EXTI15_10_IRQHandler(void)
{
 8000c28:	b508      	push	{r3, lr}
	if (EXTI_GetITStatus(BUTTON1_EXTI_LINE ) != RESET)
 8000c2a:	f44f 6080 	mov.w	r0, #1024	; 0x400
 8000c2e:	f001 faf9 	bl	8002224 <EXTI_GetITStatus>
 8000c32:	b168      	cbz	r0, 8000c50 <EXTI15_10_IRQHandler+0x28>
	{
		/* Clear the EXTI line pending flag */
		EXTI_ClearFlag(BUTTON1_EXTI_LINE );
 8000c34:	f44f 6080 	mov.w	r0, #1024	; 0x400
 8000c38:	f001 faee 	bl	8002218 <EXTI_ClearFlag>

		/* Disable BUTTON1 Interrupts */
		BUTTON_EXTI_Config(BUTTON1, DISABLE);
 8000c3c:	2000      	movs	r0, #0
 8000c3e:	4601      	mov	r1, r0
 8000c40:	f7ff fb70 	bl	8000324 <BUTTON_EXTI_Config>

	    /* DEBOUNCE_TIMER Enable Counter */
	    TIM_Cmd(DEBOUNCE_TIMER, ENABLE);
 8000c44:	4803      	ldr	r0, [pc, #12]	; (8000c54 <EXTI15_10_IRQHandler+0x2c>)
 8000c46:	2101      	movs	r1, #1
	}
}
 8000c48:	e8bd 4008 	ldmia.w	sp!, {r3, lr}

		/* Disable BUTTON1 Interrupts */
		BUTTON_EXTI_Config(BUTTON1, DISABLE);

	    /* DEBOUNCE_TIMER Enable Counter */
	    TIM_Cmd(DEBOUNCE_TIMER, ENABLE);
 8000c4c:	f001 bc95 	b.w	800257a <TIM_Cmd>
 8000c50:	bd08      	pop	{r3, pc}
 8000c52:	bf00      	nop
 8000c54:	40012c00 	.word	0x40012c00

08000c58 <TIM1_UP_IRQHandler>:
 * Input          : None
 * Output         : None
 * Return         : None
 *******************************************************************************/
void TIM1_UP_IRQHandler(void)
{
 8000c58:	b508      	push	{r3, lr}
	if (TIM_GetITStatus(DEBOUNCE_TIMER, DEBOUNCE_TIMER_FLAG) != RESET)
 8000c5a:	480c      	ldr	r0, [pc, #48]	; (8000c8c <TIM1_UP_IRQHandler+0x34>)
 8000c5c:	2101      	movs	r1, #1
 8000c5e:	f001 fcac 	bl	80025ba <TIM_GetITStatus>
 8000c62:	b190      	cbz	r0, 8000c8a <TIM1_UP_IRQHandler+0x32>
	{
		TIM_ClearITPendingBit(DEBOUNCE_TIMER, DEBOUNCE_TIMER_FLAG);
 8000c64:	4809      	ldr	r0, [pc, #36]	; (8000c8c <TIM1_UP_IRQHandler+0x34>)
 8000c66:	2101      	movs	r1, #1
 8000c68:	f001 fcb2 	bl	80025d0 <TIM_ClearITPendingBit>

		if (BUTTON_GetState(BUTTON1) == BUTTON1_PRESSED)
 8000c6c:	2000      	movs	r0, #0
 8000c6e:	f7ff fc3f 	bl	80004f0 <BUTTON_GetState>
 8000c72:	4b07      	ldr	r3, [pc, #28]	; (8000c90 <TIM1_UP_IRQHandler+0x38>)
 8000c74:	b908      	cbnz	r0, 8000c7a <TIM1_UP_IRQHandler+0x22>
			BUTTON_DEBOUNCED[BUTTON1] = 0x01;
 8000c76:	2201      	movs	r2, #1
 8000c78:	e000      	b.n	8000c7c <TIM1_UP_IRQHandler+0x24>
		else
			BUTTON_DEBOUNCED[BUTTON1] = 0x00;
 8000c7a:	2200      	movs	r2, #0

		/* Enable BUTTON1 Interrupts */
		BUTTON_EXTI_Config(BUTTON1, ENABLE);
 8000c7c:	2000      	movs	r0, #0
 8000c7e:	2101      	movs	r1, #1
		TIM_ClearITPendingBit(DEBOUNCE_TIMER, DEBOUNCE_TIMER_FLAG);

		if (BUTTON_GetState(BUTTON1) == BUTTON1_PRESSED)
			BUTTON_DEBOUNCED[BUTTON1] = 0x01;
		else
			BUTTON_DEBOUNCED[BUTTON1] = 0x00;
 8000c80:	701a      	strb	r2, [r3, #0]

		/* Enable BUTTON1 Interrupts */
		BUTTON_EXTI_Config(BUTTON1, ENABLE);
	}
}
 8000c82:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
			BUTTON_DEBOUNCED[BUTTON1] = 0x01;
		else
			BUTTON_DEBOUNCED[BUTTON1] = 0x00;

		/* Enable BUTTON1 Interrupts */
		BUTTON_EXTI_Config(BUTTON1, ENABLE);
 8000c86:	f7ff bb4d 	b.w	8000324 <BUTTON_EXTI_Config>
 8000c8a:	bd08      	pop	{r3, pc}
 8000c8c:	40012c00 	.word	0x40012c00
 8000c90:	20000254 	.word	0x20000254

08000c94 <USB_LP_CAN1_RX0_IRQHandler>:
* Output         : None
* Return         : None
*******************************************************************************/
void USB_LP_CAN1_RX0_IRQHandler(void)
{
	USB_Istr();
 8000c94:	f000 b87e 	b.w	8000d94 <USB_Istr>

08000c98 <SystemInit>:
  */
void SystemInit (void)
{
  /* Reset the RCC clock configuration to the default reset state(for debug purpose) */
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;
 8000c98:	4b3a      	ldr	r3, [pc, #232]	; (8000d84 <SystemInit+0xec>)
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000c9a:	b082      	sub	sp, #8
  /* Reset the RCC clock configuration to the default reset state(for debug purpose) */
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;
 8000c9c:	681a      	ldr	r2, [r3, #0]
 8000c9e:	f042 0001 	orr.w	r0, r2, #1
 8000ca2:	6018      	str	r0, [r3, #0]

  /* Reset SW, HPRE, PPRE1, PPRE2, ADCPRE and MCO bits */

  RCC->CFGR &= (uint32_t)0xF8FF0000;
 8000ca4:	6859      	ldr	r1, [r3, #4]
 8000ca6:	4a38      	ldr	r2, [pc, #224]	; (8000d88 <SystemInit+0xf0>)
 8000ca8:	400a      	ands	r2, r1
 8000caa:	605a      	str	r2, [r3, #4]
  
  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFF;
 8000cac:	6818      	ldr	r0, [r3, #0]
 8000cae:	f020 7184 	bic.w	r1, r0, #17301504	; 0x1080000
 8000cb2:	f421 3280 	bic.w	r2, r1, #65536	; 0x10000
 8000cb6:	601a      	str	r2, [r3, #0]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 8000cb8:	6818      	ldr	r0, [r3, #0]
 8000cba:	f420 2180 	bic.w	r1, r0, #262144	; 0x40000
 8000cbe:	6019      	str	r1, [r3, #0]

  /* Reset PLLSRC, PLLXTPRE, PLLMUL and USBPRE/OTGFSPRE bits */
  RCC->CFGR &= (uint32_t)0xFF80FFFF;
 8000cc0:	685a      	ldr	r2, [r3, #4]

  /* Reset CFGR2 register */
  RCC->CFGR2 = 0x00000000;      
#else
  /* Disable all interrupts and clear pending bits  */
  RCC->CIR = 0x009F0000;
 8000cc2:	f44f 011f 	mov.w	r1, #10420224	; 0x9f0000

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;

  /* Reset PLLSRC, PLLXTPRE, PLLMUL and USBPRE/OTGFSPRE bits */
  RCC->CFGR &= (uint32_t)0xFF80FFFF;
 8000cc6:	f422 00fe 	bic.w	r0, r2, #8323072	; 0x7f0000
  * @param  None
  * @retval None
  */
static void SetSysClockTo72(void)
{
  __IO uint32_t StartUpCounter = 0, HSEStatus = 0;
 8000cca:	2200      	movs	r2, #0

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;

  /* Reset PLLSRC, PLLXTPRE, PLLMUL and USBPRE/OTGFSPRE bits */
  RCC->CFGR &= (uint32_t)0xFF80FFFF;
 8000ccc:	6058      	str	r0, [r3, #4]

  /* Reset CFGR2 register */
  RCC->CFGR2 = 0x00000000;      
#else
  /* Disable all interrupts and clear pending bits  */
  RCC->CIR = 0x009F0000;
 8000cce:	6099      	str	r1, [r3, #8]
  * @param  None
  * @retval None
  */
static void SetSysClockTo72(void)
{
  __IO uint32_t StartUpCounter = 0, HSEStatus = 0;
 8000cd0:	9200      	str	r2, [sp, #0]
 8000cd2:	9201      	str	r2, [sp, #4]
  
  /* SYSCLK, HCLK, PCLK2 and PCLK1 configuration ---------------------------*/    
  /* Enable HSE */    
  RCC->CR |= ((uint32_t)RCC_CR_HSEON);
 8000cd4:	6818      	ldr	r0, [r3, #0]
 8000cd6:	f440 3180 	orr.w	r1, r0, #65536	; 0x10000
 8000cda:	6019      	str	r1, [r3, #0]
 
  /* Wait till HSE is ready and if Time out is reached exit */
  do
  {
    HSEStatus = RCC->CR & RCC_CR_HSERDY;
 8000cdc:	4b29      	ldr	r3, [pc, #164]	; (8000d84 <SystemInit+0xec>)
 8000cde:	681a      	ldr	r2, [r3, #0]
 8000ce0:	f402 3000 	and.w	r0, r2, #131072	; 0x20000
 8000ce4:	9001      	str	r0, [sp, #4]
    StartUpCounter++;  
 8000ce6:	9900      	ldr	r1, [sp, #0]
 8000ce8:	1c4a      	adds	r2, r1, #1
 8000cea:	9200      	str	r2, [sp, #0]
  } while((HSEStatus == 0) && (StartUpCounter != HSE_STARTUP_TIMEOUT));
 8000cec:	9801      	ldr	r0, [sp, #4]
 8000cee:	b918      	cbnz	r0, 8000cf8 <SystemInit+0x60>
 8000cf0:	9900      	ldr	r1, [sp, #0]
 8000cf2:	f5b1 6fa0 	cmp.w	r1, #1280	; 0x500
 8000cf6:	d1f1      	bne.n	8000cdc <SystemInit+0x44>

  if ((RCC->CR & RCC_CR_HSERDY) != RESET)
 8000cf8:	681b      	ldr	r3, [r3, #0]
 8000cfa:	f413 3200 	ands.w	r2, r3, #131072	; 0x20000
  {
    HSEStatus = (uint32_t)0x01;
 8000cfe:	bf18      	it	ne
 8000d00:	2201      	movne	r2, #1
  }
  else
  {
    HSEStatus = (uint32_t)0x00;
 8000d02:	9201      	str	r2, [sp, #4]
  }  

  if (HSEStatus == (uint32_t)0x01)
 8000d04:	9801      	ldr	r0, [sp, #4]
 8000d06:	2801      	cmp	r0, #1
 8000d08:	d005      	beq.n	8000d16 <SystemInit+0x7e>
  SetSysClock();

#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH. */
 8000d0a:	4b20      	ldr	r3, [pc, #128]	; (8000d8c <SystemInit+0xf4>)
 8000d0c:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8000d10:	609a      	str	r2, [r3, #8]
#endif 
}
 8000d12:	b002      	add	sp, #8
 8000d14:	4770      	bx	lr
  }  

  if (HSEStatus == (uint32_t)0x01)
  {
    /* Enable Prefetch Buffer */
    FLASH->ACR |= FLASH_ACR_PRFTBE;
 8000d16:	491e      	ldr	r1, [pc, #120]	; (8000d90 <SystemInit+0xf8>)
 8000d18:	680b      	ldr	r3, [r1, #0]
 8000d1a:	f043 0210 	orr.w	r2, r3, #16
 8000d1e:	600a      	str	r2, [r1, #0]

    /* Flash 2 wait state */
    FLASH->ACR &= (uint32_t)((uint32_t)~FLASH_ACR_LATENCY);
 8000d20:	6808      	ldr	r0, [r1, #0]
 8000d22:	f020 0303 	bic.w	r3, r0, #3
 8000d26:	600b      	str	r3, [r1, #0]
    FLASH->ACR |= (uint32_t)FLASH_ACR_LATENCY_2;    
 8000d28:	680a      	ldr	r2, [r1, #0]

 
    /* HCLK = SYSCLK */
    RCC->CFGR |= (uint32_t)RCC_CFGR_HPRE_DIV1;
 8000d2a:	f5a1 5380 	sub.w	r3, r1, #4096	; 0x1000
    /* Enable Prefetch Buffer */
    FLASH->ACR |= FLASH_ACR_PRFTBE;

    /* Flash 2 wait state */
    FLASH->ACR &= (uint32_t)((uint32_t)~FLASH_ACR_LATENCY);
    FLASH->ACR |= (uint32_t)FLASH_ACR_LATENCY_2;    
 8000d2e:	f042 0002 	orr.w	r0, r2, #2
 8000d32:	6008      	str	r0, [r1, #0]

 
    /* HCLK = SYSCLK */
    RCC->CFGR |= (uint32_t)RCC_CFGR_HPRE_DIV1;
 8000d34:	6859      	ldr	r1, [r3, #4]
 8000d36:	6059      	str	r1, [r3, #4]
      
    /* PCLK2 = HCLK */
    RCC->CFGR |= (uint32_t)RCC_CFGR_PPRE2_DIV1;
 8000d38:	685a      	ldr	r2, [r3, #4]
 8000d3a:	605a      	str	r2, [r3, #4]
    
    /* PCLK1 = HCLK */
    RCC->CFGR |= (uint32_t)RCC_CFGR_PPRE1_DIV2;
 8000d3c:	6858      	ldr	r0, [r3, #4]
 8000d3e:	f440 6180 	orr.w	r1, r0, #1024	; 0x400
 8000d42:	6059      	str	r1, [r3, #4]

    /*  PLL configuration: PLLCLK = HSE * 9 = 72 MHz */
    RCC->CFGR &= (uint32_t)((uint32_t)~(RCC_CFGR_PLLSRC | RCC_CFGR_PLLXTPRE |
 8000d44:	685a      	ldr	r2, [r3, #4]
 8000d46:	f422 107c 	bic.w	r0, r2, #4128768	; 0x3f0000
 8000d4a:	6058      	str	r0, [r3, #4]
                                        RCC_CFGR_PLLMULL));
    RCC->CFGR |= (uint32_t)(RCC_CFGR_PLLSRC_HSE | RCC_CFGR_PLLMULL9);
 8000d4c:	6859      	ldr	r1, [r3, #4]
 8000d4e:	f441 12e8 	orr.w	r2, r1, #1900544	; 0x1d0000
 8000d52:	605a      	str	r2, [r3, #4]

    /* Enable PLL */
    RCC->CR |= RCC_CR_PLLON;
 8000d54:	6818      	ldr	r0, [r3, #0]
 8000d56:	f040 7180 	orr.w	r1, r0, #16777216	; 0x1000000
 8000d5a:	6019      	str	r1, [r3, #0]

    /* Wait till PLL is ready */
    while((RCC->CR & RCC_CR_PLLRDY) == 0)
 8000d5c:	6818      	ldr	r0, [r3, #0]
 8000d5e:	4a09      	ldr	r2, [pc, #36]	; (8000d84 <SystemInit+0xec>)
 8000d60:	0181      	lsls	r1, r0, #6
 8000d62:	d5fb      	bpl.n	8000d5c <SystemInit+0xc4>
    {
    }
    
    /* Select PLL as system clock source */
    RCC->CFGR &= (uint32_t)((uint32_t)~(RCC_CFGR_SW));
 8000d64:	6853      	ldr	r3, [r2, #4]
 8000d66:	f023 0103 	bic.w	r1, r3, #3
 8000d6a:	6051      	str	r1, [r2, #4]
    RCC->CFGR |= (uint32_t)RCC_CFGR_SW_PLL;    
 8000d6c:	6850      	ldr	r0, [r2, #4]
 8000d6e:	f040 0302 	orr.w	r3, r0, #2
 8000d72:	6053      	str	r3, [r2, #4]

    /* Wait till PLL is used as system clock source */
    while ((RCC->CFGR & (uint32_t)RCC_CFGR_SWS) != (uint32_t)0x08)
 8000d74:	4a03      	ldr	r2, [pc, #12]	; (8000d84 <SystemInit+0xec>)
 8000d76:	6851      	ldr	r1, [r2, #4]
 8000d78:	f001 000c 	and.w	r0, r1, #12
 8000d7c:	2808      	cmp	r0, #8
 8000d7e:	d1f9      	bne.n	8000d74 <SystemInit+0xdc>
 8000d80:	e7c3      	b.n	8000d0a <SystemInit+0x72>
 8000d82:	bf00      	nop
 8000d84:	40021000 	.word	0x40021000
 8000d88:	f8ff0000 	.word	0xf8ff0000
 8000d8c:	e000ed00 	.word	0xe000ed00
 8000d90:	40022000 	.word	0x40022000

08000d94 <USB_Istr>:
* Input          : None.
* Output         : None.
* Return         : None.
*******************************************************************************/
void USB_Istr(void)
{
 8000d94:	b538      	push	{r3, r4, r5, lr}

  wIstr = _GetISTR();
 8000d96:	4b39      	ldr	r3, [pc, #228]	; (8000e7c <USB_Istr+0xe8>)
 8000d98:	4c39      	ldr	r4, [pc, #228]	; (8000e80 <USB_Istr+0xec>)
 8000d9a:	681a      	ldr	r2, [r3, #0]

#if (IMR_MSK & ISTR_CTR)
  if (wIstr & ISTR_CTR & wInterrupt_Mask)
 8000d9c:	4b39      	ldr	r3, [pc, #228]	; (8000e84 <USB_Istr+0xf0>)
* Return         : None.
*******************************************************************************/
void USB_Istr(void)
{

  wIstr = _GetISTR();
 8000d9e:	b290      	uxth	r0, r2
 8000da0:	8020      	strh	r0, [r4, #0]

#if (IMR_MSK & ISTR_CTR)
  if (wIstr & ISTR_CTR & wInterrupt_Mask)
 8000da2:	8825      	ldrh	r5, [r4, #0]
 8000da4:	8819      	ldrh	r1, [r3, #0]
 8000da6:	4029      	ands	r1, r5
 8000da8:	f401 4200 	and.w	r2, r1, #32768	; 0x8000
 8000dac:	b290      	uxth	r0, r2
 8000dae:	4625      	mov	r5, r4
 8000db0:	461c      	mov	r4, r3
 8000db2:	b108      	cbz	r0, 8000db8 <USB_Istr+0x24>
  {
    /* servicing of the endpoint correct transfer interrupt */
    /* clear of the CTR flag into the sub */
    CTR_LP();
 8000db4:	f000 ffea 	bl	8001d8c <CTR_LP>
#endif
  }
#endif
  /*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*/  
#if (IMR_MSK & ISTR_RESET)
  if (wIstr & ISTR_RESET & wInterrupt_Mask)
 8000db8:	8829      	ldrh	r1, [r5, #0]
 8000dba:	8823      	ldrh	r3, [r4, #0]
 8000dbc:	400b      	ands	r3, r1
 8000dbe:	f403 6280 	and.w	r2, r3, #1024	; 0x400
 8000dc2:	b290      	uxth	r0, r2
 8000dc4:	b130      	cbz	r0, 8000dd4 <USB_Istr+0x40>
  {
    _SetISTR((uint16_t)CLR_RESET);
 8000dc6:	4b2d      	ldr	r3, [pc, #180]	; (8000e7c <USB_Istr+0xe8>)
    Device_Property.Reset();
 8000dc8:	4a2f      	ldr	r2, [pc, #188]	; (8000e88 <USB_Istr+0xf4>)
#endif
  /*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*/  
#if (IMR_MSK & ISTR_RESET)
  if (wIstr & ISTR_RESET & wInterrupt_Mask)
  {
    _SetISTR((uint16_t)CLR_RESET);
 8000dca:	f64f 31ff 	movw	r1, #64511	; 0xfbff
 8000dce:	6019      	str	r1, [r3, #0]
    Device_Property.Reset();
 8000dd0:	6850      	ldr	r0, [r2, #4]
 8000dd2:	4780      	blx	r0
#endif
  }
#endif
  /*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*/
#if (IMR_MSK & ISTR_ERR)
  if (wIstr & ISTR_ERR & wInterrupt_Mask)
 8000dd4:	4a2a      	ldr	r2, [pc, #168]	; (8000e80 <USB_Istr+0xec>)
 8000dd6:	4b2b      	ldr	r3, [pc, #172]	; (8000e84 <USB_Istr+0xf0>)
 8000dd8:	8811      	ldrh	r1, [r2, #0]
 8000dda:	881b      	ldrh	r3, [r3, #0]
 8000ddc:	4019      	ands	r1, r3
 8000dde:	f401 5000 	and.w	r0, r1, #8192	; 0x2000
 8000de2:	b281      	uxth	r1, r0
 8000de4:	b119      	cbz	r1, 8000dee <USB_Istr+0x5a>
  {
    _SetISTR((uint16_t)CLR_ERR);
 8000de6:	4925      	ldr	r1, [pc, #148]	; (8000e7c <USB_Istr+0xe8>)
 8000de8:	f64d 70ff 	movw	r0, #57343	; 0xdfff
 8000dec:	6008      	str	r0, [r1, #0]
#endif
  }
#endif
  /*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*/
#if (IMR_MSK & ISTR_WKUP)
  if (wIstr & ISTR_WKUP & wInterrupt_Mask)
 8000dee:	8812      	ldrh	r2, [r2, #0]
 8000df0:	4013      	ands	r3, r2
 8000df2:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8000df6:	b298      	uxth	r0, r3
 8000df8:	b130      	cbz	r0, 8000e08 <USB_Istr+0x74>
  {
    _SetISTR((uint16_t)CLR_WKUP);
 8000dfa:	4a20      	ldr	r2, [pc, #128]	; (8000e7c <USB_Istr+0xe8>)
 8000dfc:	f64e 71ff 	movw	r1, #61439	; 0xefff
 8000e00:	6011      	str	r1, [r2, #0]
    Resume(RESUME_EXTERNAL);
 8000e02:	2000      	movs	r0, #0
 8000e04:	f000 fb34 	bl	8001470 <Resume>
#endif
  }
#endif
  /*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*/
#if (IMR_MSK & ISTR_SUSP)
  if (wIstr & ISTR_SUSP & wInterrupt_Mask)
 8000e08:	4b1d      	ldr	r3, [pc, #116]	; (8000e80 <USB_Istr+0xec>)
 8000e0a:	491e      	ldr	r1, [pc, #120]	; (8000e84 <USB_Istr+0xf0>)
 8000e0c:	8818      	ldrh	r0, [r3, #0]
 8000e0e:	880a      	ldrh	r2, [r1, #0]
 8000e10:	4002      	ands	r2, r0
 8000e12:	f402 6300 	and.w	r3, r2, #2048	; 0x800
 8000e16:	b298      	uxth	r0, r3
 8000e18:	b160      	cbz	r0, 8000e34 <USB_Istr+0xa0>
  {

    /* check if SUSPEND is possible */
    if (fSuspendEnabled)
 8000e1a:	491c      	ldr	r1, [pc, #112]	; (8000e8c <USB_Istr+0xf8>)
 8000e1c:	780a      	ldrb	r2, [r1, #0]
 8000e1e:	b112      	cbz	r2, 8000e26 <USB_Istr+0x92>
    {
      Suspend();
 8000e20:	f000 fb06 	bl	8001430 <Suspend>
 8000e24:	e002      	b.n	8000e2c <USB_Istr+0x98>
    }
    else
    {
      /* if not possible then resume after xx ms */
      Resume(RESUME_LATER);
 8000e26:	2002      	movs	r0, #2
 8000e28:	f000 fb22 	bl	8001470 <Resume>
    }
    /* clear of the ISTR bit must be done after setting of CNTR_FSUSP */
    _SetISTR((uint16_t)CLR_SUSP);
 8000e2c:	4b13      	ldr	r3, [pc, #76]	; (8000e7c <USB_Istr+0xe8>)
 8000e2e:	f24f 70ff 	movw	r0, #63487	; 0xf7ff
 8000e32:	6018      	str	r0, [r3, #0]
#endif
  }
#endif
  /*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*/
#if (IMR_MSK & ISTR_SOF)
  if (wIstr & ISTR_SOF & wInterrupt_Mask)
 8000e34:	4912      	ldr	r1, [pc, #72]	; (8000e80 <USB_Istr+0xec>)
 8000e36:	4813      	ldr	r0, [pc, #76]	; (8000e84 <USB_Istr+0xf0>)
 8000e38:	880a      	ldrh	r2, [r1, #0]
 8000e3a:	8803      	ldrh	r3, [r0, #0]
 8000e3c:	401a      	ands	r2, r3
 8000e3e:	f402 7100 	and.w	r1, r2, #512	; 0x200
 8000e42:	b28a      	uxth	r2, r1
 8000e44:	b142      	cbz	r2, 8000e58 <USB_Istr+0xc4>
  {
    _SetISTR((uint16_t)CLR_SOF);
 8000e46:	490d      	ldr	r1, [pc, #52]	; (8000e7c <USB_Istr+0xe8>)
 8000e48:	f64f 50ff 	movw	r0, #65023	; 0xfdff
    bIntPackSOF++;
 8000e4c:	4a10      	ldr	r2, [pc, #64]	; (8000e90 <USB_Istr+0xfc>)
#endif
  /*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*/
#if (IMR_MSK & ISTR_SOF)
  if (wIstr & ISTR_SOF & wInterrupt_Mask)
  {
    _SetISTR((uint16_t)CLR_SOF);
 8000e4e:	6008      	str	r0, [r1, #0]
    bIntPackSOF++;
 8000e50:	7810      	ldrb	r0, [r2, #0]
 8000e52:	1c41      	adds	r1, r0, #1
 8000e54:	b2c8      	uxtb	r0, r1
 8000e56:	7010      	strb	r0, [r2, #0]
#endif
  }
#endif
  /*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*/
#if (IMR_MSK & ISTR_ESOF)
  if (wIstr & ISTR_ESOF & wInterrupt_Mask)
 8000e58:	4a09      	ldr	r2, [pc, #36]	; (8000e80 <USB_Istr+0xec>)
 8000e5a:	8811      	ldrh	r1, [r2, #0]
 8000e5c:	400b      	ands	r3, r1
 8000e5e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000e62:	b298      	uxth	r0, r3
 8000e64:	b140      	cbz	r0, 8000e78 <USB_Istr+0xe4>
  {
    _SetISTR((uint16_t)CLR_ESOF);
 8000e66:	4905      	ldr	r1, [pc, #20]	; (8000e7c <USB_Istr+0xe8>)
 8000e68:	f64f 62ff 	movw	r2, #65279	; 0xfeff
    /* resume handling timing is made with ESOFs */
    Resume(RESUME_ESOF); /* request without change of the machine state */
 8000e6c:	2007      	movs	r0, #7
#endif
  /*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*/
#if (IMR_MSK & ISTR_ESOF)
  if (wIstr & ISTR_ESOF & wInterrupt_Mask)
  {
    _SetISTR((uint16_t)CLR_ESOF);
 8000e6e:	600a      	str	r2, [r1, #0]
#ifdef ESOF_CALLBACK
    ESOF_Callback();
#endif
  }
#endif
} /* USB_Istr */
 8000e70:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
#if (IMR_MSK & ISTR_ESOF)
  if (wIstr & ISTR_ESOF & wInterrupt_Mask)
  {
    _SetISTR((uint16_t)CLR_ESOF);
    /* resume handling timing is made with ESOFs */
    Resume(RESUME_ESOF); /* request without change of the machine state */
 8000e74:	f000 bafc 	b.w	8001470 <Resume>
 8000e78:	bd38      	pop	{r3, r4, r5, pc}
 8000e7a:	bf00      	nop
 8000e7c:	40005c44 	.word	0x40005c44
 8000e80:	200006a6 	.word	0x200006a6
 8000e84:	200006dc 	.word	0x200006dc
 8000e88:	200001f8 	.word	0x200001f8
 8000e8c:	20000250 	.word	0x20000250
 8000e90:	20000268 	.word	0x20000268

08000e94 <DFU_SetConfiguration>:
*******************************************************************************/
void DFU_SetConfiguration(void)
{
  DEVICE_INFO *pInfo = &Device_Info;

  if (pInfo->Current_Configuration != 0)
 8000e94:	4b03      	ldr	r3, [pc, #12]	; (8000ea4 <DFU_SetConfiguration+0x10>)
 8000e96:	7a98      	ldrb	r0, [r3, #10]
 8000e98:	b110      	cbz	r0, 8000ea0 <DFU_SetConfiguration+0xc>
  {
    /* Device configured */
    bDeviceState = CONFIGURED;
 8000e9a:	4903      	ldr	r1, [pc, #12]	; (8000ea8 <DFU_SetConfiguration+0x14>)
 8000e9c:	2205      	movs	r2, #5
 8000e9e:	600a      	str	r2, [r1, #0]
 8000ea0:	4770      	bx	lr
 8000ea2:	bf00      	nop
 8000ea4:	200006b8 	.word	0x200006b8
 8000ea8:	20000278 	.word	0x20000278

08000eac <DFU_SetDeviceAddress>:
* Output         : None.
* Return         : None.
*******************************************************************************/
void DFU_SetDeviceAddress (void)
{
  bDeviceState = ADDRESSED;
 8000eac:	4b01      	ldr	r3, [pc, #4]	; (8000eb4 <DFU_SetDeviceAddress+0x8>)
 8000eae:	2204      	movs	r2, #4
 8000eb0:	601a      	str	r2, [r3, #0]
 8000eb2:	4770      	bx	lr
 8000eb4:	20000278 	.word	0x20000278

08000eb8 <DFU_Status_In>:
* Input          : None.
* Output         : None.
* Return         : None.
*******************************************************************************/
void DFU_Status_In(void)
{}
 8000eb8:	4770      	bx	lr
	...

08000ebc <DFU_Data_Setup>:
* Input          : RequestNb.
* Output         : None.
* Return         : USB_SUCCESS or USB_UNSUPPORT.
*******************************************************************************/
RESULT DFU_Data_Setup(uint8_t RequestNo)
{
 8000ebc:	b510      	push	{r4, lr}
  uint8_t *(*CopyRoutine)(uint16_t);
  CopyRoutine = NULL;

  if (Type_Recipient == (CLASS_REQUEST | INTERFACE_RECIPIENT))
 8000ebe:	4b17      	ldr	r3, [pc, #92]	; (8000f1c <DFU_Data_Setup+0x60>)
 8000ec0:	681a      	ldr	r2, [r3, #0]
 8000ec2:	7811      	ldrb	r1, [r2, #0]
 8000ec4:	f001 037f 	and.w	r3, r1, #127	; 0x7f
 8000ec8:	2b21      	cmp	r3, #33	; 0x21
 8000eca:	d124      	bne.n	8000f16 <DFU_Data_Setup+0x5a>
  {
    if (RequestNo == DFU_UPLOAD && (DeviceState == STATE_dfuIDLE
 8000ecc:	2802      	cmp	r0, #2
 8000ece:	d106      	bne.n	8000ede <DFU_Data_Setup+0x22>
 8000ed0:	4913      	ldr	r1, [pc, #76]	; (8000f20 <DFU_Data_Setup+0x64>)
 8000ed2:	780b      	ldrb	r3, [r1, #0]
 8000ed4:	2b02      	cmp	r3, #2
 8000ed6:	d014      	beq.n	8000f02 <DFU_Data_Setup+0x46>
                                    || DeviceState == STATE_dfuUPLOAD_IDLE ))
 8000ed8:	2b09      	cmp	r3, #9
 8000eda:	d012      	beq.n	8000f02 <DFU_Data_Setup+0x46>
 8000edc:	bd10      	pop	{r4, pc}
    {
      CopyRoutine = UPLOAD;
      //CopyRoutine = NULL;   //Disable UPLOAD process
    }
    else if (RequestNo == DFU_DNLOAD && (DeviceState == STATE_dfuIDLE
 8000ede:	2801      	cmp	r0, #1
 8000ee0:	d109      	bne.n	8000ef6 <DFU_Data_Setup+0x3a>
 8000ee2:	480f      	ldr	r0, [pc, #60]	; (8000f20 <DFU_Data_Setup+0x64>)
 8000ee4:	7803      	ldrb	r3, [r0, #0]
 8000ee6:	2b02      	cmp	r3, #2
 8000ee8:	d001      	beq.n	8000eee <DFU_Data_Setup+0x32>
                                         || DeviceState == STATE_dfuDNLOAD_IDLE))
 8000eea:	2b05      	cmp	r3, #5
 8000eec:	d113      	bne.n	8000f16 <DFU_Data_Setup+0x5a>
    {
      DeviceState = STATE_dfuDNLOAD_SYNC;
 8000eee:	2403      	movs	r4, #3
 8000ef0:	7004      	strb	r4, [r0, #0]
      CopyRoutine = DNLOAD;
 8000ef2:	490c      	ldr	r1, [pc, #48]	; (8000f24 <DFU_Data_Setup+0x68>)
 8000ef4:	e008      	b.n	8000f08 <DFU_Data_Setup+0x4c>
    }
    else if (RequestNo == DFU_GETSTATE)
 8000ef6:	2805      	cmp	r0, #5
 8000ef8:	d005      	beq.n	8000f06 <DFU_Data_Setup+0x4a>
    {
      CopyRoutine = GETSTATE;
    }
    else if (RequestNo == DFU_GETSTATUS)
 8000efa:	2803      	cmp	r0, #3
 8000efc:	d10b      	bne.n	8000f16 <DFU_Data_Setup+0x5a>
    {
      CopyRoutine = GETSTATUS;
 8000efe:	490a      	ldr	r1, [pc, #40]	; (8000f28 <DFU_Data_Setup+0x6c>)
 8000f00:	e002      	b.n	8000f08 <DFU_Data_Setup+0x4c>
  if (Type_Recipient == (CLASS_REQUEST | INTERFACE_RECIPIENT))
  {
    if (RequestNo == DFU_UPLOAD && (DeviceState == STATE_dfuIDLE
                                    || DeviceState == STATE_dfuUPLOAD_IDLE ))
    {
      CopyRoutine = UPLOAD;
 8000f02:	490a      	ldr	r1, [pc, #40]	; (8000f2c <DFU_Data_Setup+0x70>)
 8000f04:	e000      	b.n	8000f08 <DFU_Data_Setup+0x4c>
      DeviceState = STATE_dfuDNLOAD_SYNC;
      CopyRoutine = DNLOAD;
    }
    else if (RequestNo == DFU_GETSTATE)
    {
      CopyRoutine = GETSTATE;
 8000f06:	490a      	ldr	r1, [pc, #40]	; (8000f30 <DFU_Data_Setup+0x74>)
  {
    return USB_UNSUPPORT;
  }

  pInformation->Ctrl_Info.CopyData = CopyRoutine;
  pInformation->Ctrl_Info.Usb_wOffset = 0;
 8000f08:	2400      	movs	r4, #0
  (*CopyRoutine)(0);
 8000f0a:	4620      	mov	r0, r4
  if (CopyRoutine == NULL)
  {
    return USB_UNSUPPORT;
  }

  pInformation->Ctrl_Info.CopyData = CopyRoutine;
 8000f0c:	6191      	str	r1, [r2, #24]
  pInformation->Ctrl_Info.Usb_wOffset = 0;
 8000f0e:	8254      	strh	r4, [r2, #18]
  (*CopyRoutine)(0);
 8000f10:	4788      	blx	r1

  return USB_SUCCESS;
 8000f12:	4620      	mov	r0, r4
 8000f14:	bd10      	pop	{r4, pc}
      return USB_UNSUPPORT;
    }
  }
  else
  {
    return USB_UNSUPPORT;
 8000f16:	2002      	movs	r0, #2
  pInformation->Ctrl_Info.CopyData = CopyRoutine;
  pInformation->Ctrl_Info.Usb_wOffset = 0;
  (*CopyRoutine)(0);

  return USB_SUCCESS;
}
 8000f18:	bd10      	pop	{r4, pc}
 8000f1a:	bf00      	nop
 8000f1c:	200006d8 	.word	0x200006d8
 8000f20:	20000690 	.word	0x20000690
 8000f24:	08000f45 	.word	0x08000f45
 8000f28:	08000fad 	.word	0x08000fad
 8000f2c:	08001051 	.word	0x08001051
 8000f30:	08000f95 	.word	0x08000f95

08000f34 <DFU_Get_Interface_Setting>:
* Output         : None.
* Return         : USB_SUCCESS or USB_UNSUPPORT.
*******************************************************************************/
RESULT DFU_Get_Interface_Setting(uint8_t Interface, uint8_t AlternateSetting)
{
  if (AlternateSetting > 3)
 8000f34:	2903      	cmp	r1, #3
 8000f36:	d901      	bls.n	8000f3c <DFU_Get_Interface_Setting+0x8>
  {
    return USB_UNSUPPORT;   /* In this application we don't have more than 3 AlternateSettings */
 8000f38:	2002      	movs	r0, #2
 8000f3a:	4770      	bx	lr
  }
  else if (Interface > 2)
 8000f3c:	2802      	cmp	r0, #2
 8000f3e:	d8fb      	bhi.n	8000f38 <DFU_Get_Interface_Setting+0x4>
  {
    return USB_UNSUPPORT; /* In this application we have only 1 interfaces */
  }

  return USB_SUCCESS;
 8000f40:	2000      	movs	r0, #0
}
 8000f42:	4770      	bx	lr

08000f44 <DNLOAD>:
* Input          : Length.
* Output         : None.
* Return         : Pointer to data.
*******************************************************************************/
uint8_t *DNLOAD (uint16_t Length)
{
 8000f44:	b510      	push	{r4, lr}
  DEVICE_INFO             *pInfo = &Device_Info;
  uint8_t         B1, B0;
  uint16_t          offset, returned;

  B0 = pInfo->USBwValues.bw.bb0;
  B1 = pInfo->USBwValues.bw.bb1;
 8000f46:	4b0d      	ldr	r3, [pc, #52]	; (8000f7c <DNLOAD+0x38>)
  wBlockNum = (uint16_t)B1;
  wBlockNum = wBlockNum * 0x100;
  wBlockNum += (uint16_t)B0;
 8000f48:	490d      	ldr	r1, [pc, #52]	; (8000f80 <DNLOAD+0x3c>)
 8000f4a:	78da      	ldrb	r2, [r3, #3]
  uint8_t         B1, B0;
  uint16_t          offset, returned;

  B0 = pInfo->USBwValues.bw.bb0;
  B1 = pInfo->USBwValues.bw.bb1;
  wBlockNum = (uint16_t)B1;
 8000f4c:	789c      	ldrb	r4, [r3, #2]
  wBlockNum = wBlockNum * 0x100;
  wBlockNum += (uint16_t)B0;
 8000f4e:	eb02 2404 	add.w	r4, r2, r4, lsl #8
 8000f52:	600c      	str	r4, [r1, #0]
  B0 = pInfo->USBwLengths.bw.bb0;
  B1 =  pInfo->USBwLengths.bw.bb1;
  wlength = (uint16_t)B0;
  wlength = wlength * 0x100;
  wlength += (uint16_t)B1;
 8000f54:	799a      	ldrb	r2, [r3, #6]
  wBlockNum = (uint16_t)B1;
  wBlockNum = wBlockNum * 0x100;
  wBlockNum += (uint16_t)B0;
  B0 = pInfo->USBwLengths.bw.bb0;
  B1 =  pInfo->USBwLengths.bw.bb1;
  wlength = (uint16_t)B0;
 8000f56:	79dc      	ldrb	r4, [r3, #7]
  wlength = wlength * 0x100;
  wlength += (uint16_t)B1;

  offset = pInfo->Ctrl_Info.Usb_wOffset;
 8000f58:	8a5b      	ldrh	r3, [r3, #18]
  wBlockNum += (uint16_t)B0;
  B0 = pInfo->USBwLengths.bw.bb0;
  B1 =  pInfo->USBwLengths.bw.bb1;
  wlength = (uint16_t)B0;
  wlength = wlength * 0x100;
  wlength += (uint16_t)B1;
 8000f5a:	eb02 2204 	add.w	r2, r2, r4, lsl #8

  offset = pInfo->Ctrl_Info.Usb_wOffset;

  DeviceState = STATE_dfuDNLOAD_SYNC;
 8000f5e:	4c09      	ldr	r4, [pc, #36]	; (8000f84 <DNLOAD+0x40>)
  wBlockNum += (uint16_t)B0;
  B0 = pInfo->USBwLengths.bw.bb0;
  B1 =  pInfo->USBwLengths.bw.bb1;
  wlength = (uint16_t)B0;
  wlength = wlength * 0x100;
  wlength += (uint16_t)B1;
 8000f60:	604a      	str	r2, [r1, #4]

  offset = pInfo->Ctrl_Info.Usb_wOffset;

  DeviceState = STATE_dfuDNLOAD_SYNC;
 8000f62:	2103      	movs	r1, #3
 8000f64:	7021      	strb	r1, [r4, #0]
  DeviceStatus[4] = DeviceState;
 8000f66:	4c08      	ldr	r4, [pc, #32]	; (8000f88 <DNLOAD+0x44>)
 8000f68:	7121      	strb	r1, [r4, #4]

  returned = wlength - offset;

  if (Length == 0)
 8000f6a:	b920      	cbnz	r0, 8000f76 <DNLOAD+0x32>
  {
    pInformation->Ctrl_Info.Usb_wLength = returned ;
 8000f6c:	4907      	ldr	r1, [pc, #28]	; (8000f8c <DNLOAD+0x48>)
  offset = pInfo->Ctrl_Info.Usb_wOffset;

  DeviceState = STATE_dfuDNLOAD_SYNC;
  DeviceStatus[4] = DeviceState;

  returned = wlength - offset;
 8000f6e:	1ad2      	subs	r2, r2, r3

  if (Length == 0)
  {
    pInformation->Ctrl_Info.Usb_wLength = returned ;
 8000f70:	6809      	ldr	r1, [r1, #0]
 8000f72:	820a      	strh	r2, [r1, #16]
    return NULL;
 8000f74:	bd10      	pop	{r4, pc}
  }

  return((uint8_t*)MAL_Buffer + offset);
 8000f76:	4806      	ldr	r0, [pc, #24]	; (8000f90 <DNLOAD+0x4c>)
 8000f78:	1818      	adds	r0, r3, r0
}
 8000f7a:	bd10      	pop	{r4, pc}
 8000f7c:	200006b8 	.word	0x200006b8
 8000f80:	2000026c 	.word	0x2000026c
 8000f84:	20000690 	.word	0x20000690
 8000f88:	200006a0 	.word	0x200006a0
 8000f8c:	200006d8 	.word	0x200006d8
 8000f90:	20000280 	.word	0x20000280

08000f94 <GETSTATE>:
* Output         : None.
* Return         : Pointer to data.
*******************************************************************************/
uint8_t *GETSTATE(uint16_t Length)
{
  if (Length == 0)
 8000f94:	b920      	cbnz	r0, 8000fa0 <GETSTATE+0xc>
  {
    pInformation->Ctrl_Info.Usb_wLength = 1 ;
 8000f96:	4b03      	ldr	r3, [pc, #12]	; (8000fa4 <GETSTATE+0x10>)
 8000f98:	2201      	movs	r2, #1
 8000f9a:	6819      	ldr	r1, [r3, #0]
 8000f9c:	820a      	strh	r2, [r1, #16]
    return NULL;
 8000f9e:	4770      	bx	lr
  }
  else
    return(&DeviceState);
 8000fa0:	4801      	ldr	r0, [pc, #4]	; (8000fa8 <GETSTATE+0x14>)
}
 8000fa2:	4770      	bx	lr
 8000fa4:	200006d8 	.word	0x200006d8
 8000fa8:	20000690 	.word	0x20000690

08000fac <GETSTATUS>:
* Input          : Length.
* Output         : None.
* Return         : Pointer to data.
*******************************************************************************/
uint8_t *GETSTATUS(uint16_t Length)
{
 8000fac:	b510      	push	{r4, lr}
  switch (DeviceState)
 8000fae:	4922      	ldr	r1, [pc, #136]	; (8001038 <GETSTATUS+0x8c>)
* Input          : Length.
* Output         : None.
* Return         : Pointer to data.
*******************************************************************************/
uint8_t *GETSTATUS(uint16_t Length)
{
 8000fb0:	4604      	mov	r4, r0
  switch (DeviceState)
 8000fb2:	780b      	ldrb	r3, [r1, #0]
 8000fb4:	2b03      	cmp	r3, #3
 8000fb6:	d002      	beq.n	8000fbe <GETSTATUS+0x12>
 8000fb8:	2b06      	cmp	r3, #6
 8000fba:	d133      	bne.n	8001024 <GETSTATUS+0x78>
 8000fbc:	e018      	b.n	8000ff0 <GETSTATUS+0x44>
  {
    case   STATE_dfuDNLOAD_SYNC:
      if (wlength != 0)
 8000fbe:	481f      	ldr	r0, [pc, #124]	; (800103c <GETSTATUS+0x90>)
 8000fc0:	4a1f      	ldr	r2, [pc, #124]	; (8001040 <GETSTATUS+0x94>)
 8000fc2:	6843      	ldr	r3, [r0, #4]
 8000fc4:	b18b      	cbz	r3, 8000fea <GETSTATUS+0x3e>
      {
        DeviceState = STATE_dfuDNBUSY;
 8000fc6:	2304      	movs	r3, #4
 8000fc8:	700b      	strb	r3, [r1, #0]
        DeviceStatus[4] = DeviceState;
        if ((wBlockNum == 0) && (MAL_Buffer[0] == CMD_ERASE))
 8000fca:	6801      	ldr	r1, [r0, #0]
  {
    case   STATE_dfuDNLOAD_SYNC:
      if (wlength != 0)
      {
        DeviceState = STATE_dfuDNBUSY;
        DeviceStatus[4] = DeviceState;
 8000fcc:	7113      	strb	r3, [r2, #4]
 8000fce:	4b1d      	ldr	r3, [pc, #116]	; (8001044 <GETSTATUS+0x98>)
        if ((wBlockNum == 0) && (MAL_Buffer[0] == CMD_ERASE))
 8000fd0:	b929      	cbnz	r1, 8000fde <GETSTATUS+0x32>
 8000fd2:	481d      	ldr	r0, [pc, #116]	; (8001048 <GETSTATUS+0x9c>)
 8000fd4:	7800      	ldrb	r0, [r0, #0]
 8000fd6:	2841      	cmp	r0, #65	; 0x41
 8000fd8:	d101      	bne.n	8000fde <GETSTATUS+0x32>
        {
          MAL_GetStatus(Pointer, 0, DeviceStatus);
 8000fda:	6818      	ldr	r0, [r3, #0]
 8000fdc:	e002      	b.n	8000fe4 <GETSTATUS+0x38>
        }
        else
        {
          MAL_GetStatus(Pointer, 1, DeviceStatus);
 8000fde:	6818      	ldr	r0, [r3, #0]
 8000fe0:	4a17      	ldr	r2, [pc, #92]	; (8001040 <GETSTATUS+0x94>)
 8000fe2:	2101      	movs	r1, #1
 8000fe4:	f7ff f90a 	bl	80001fc <MAL_GetStatus>
 8000fe8:	e01c      	b.n	8001024 <GETSTATUS+0x78>
        }
      }
      else  /* (wlength==0)*/
      {
        DeviceState = STATE_dfuDNLOAD_IDLE;
 8000fea:	2005      	movs	r0, #5
 8000fec:	7008      	strb	r0, [r1, #0]
 8000fee:	e015      	b.n	800101c <GETSTATUS+0x70>
        DeviceStatus[3] = 0;

      }
      break;
    case   STATE_dfuMANIFEST_SYNC :
      if (Manifest_State == Manifest_In_Progress)
 8000ff0:	4812      	ldr	r0, [pc, #72]	; (800103c <GETSTATUS+0x90>)
 8000ff2:	6883      	ldr	r3, [r0, #8]
 8000ff4:	2b01      	cmp	r3, #1
 8000ff6:	d106      	bne.n	8001006 <GETSTATUS+0x5a>
      {
        DeviceState = STATE_dfuMANIFEST;
        DeviceStatus[4] = DeviceState;
 8000ff8:	4a11      	ldr	r2, [pc, #68]	; (8001040 <GETSTATUS+0x94>)
      }
      break;
    case   STATE_dfuMANIFEST_SYNC :
      if (Manifest_State == Manifest_In_Progress)
      {
        DeviceState = STATE_dfuMANIFEST;
 8000ffa:	2007      	movs	r0, #7
        DeviceStatus[4] = DeviceState;
        DeviceStatus[1] = 1;             /*bwPollTimeout = 1ms*/
 8000ffc:	7053      	strb	r3, [r2, #1]
      }
      break;
    case   STATE_dfuMANIFEST_SYNC :
      if (Manifest_State == Manifest_In_Progress)
      {
        DeviceState = STATE_dfuMANIFEST;
 8000ffe:	7008      	strb	r0, [r1, #0]
        DeviceStatus[4] = DeviceState;
 8001000:	7110      	strb	r0, [r2, #4]
        DeviceStatus[1] = 1;             /*bwPollTimeout = 1ms*/
        DeviceStatus[2] = 0;
 8001002:	2300      	movs	r3, #0
 8001004:	e00c      	b.n	8001020 <GETSTATUS+0x74>
        DeviceStatus[3] = 0;
        //break;
      }
      else if (Manifest_State == Manifest_complete && (Config_Descriptor.Descriptor[20] & 0x04))
 8001006:	b96b      	cbnz	r3, 8001024 <GETSTATUS+0x78>
 8001008:	4a0e      	ldr	r2, [pc, #56]	; (8001044 <GETSTATUS+0x98>)
 800100a:	6850      	ldr	r0, [r2, #4]
 800100c:	7d02      	ldrb	r2, [r0, #20]
 800100e:	f002 0004 	and.w	r0, r2, #4
 8001012:	b2c2      	uxtb	r2, r0
 8001014:	b132      	cbz	r2, 8001024 <GETSTATUS+0x78>
      {
        DeviceState = STATE_dfuIDLE;
 8001016:	2002      	movs	r0, #2
        DeviceStatus[4] = DeviceState;
 8001018:	4a09      	ldr	r2, [pc, #36]	; (8001040 <GETSTATUS+0x94>)
        DeviceStatus[3] = 0;
        //break;
      }
      else if (Manifest_State == Manifest_complete && (Config_Descriptor.Descriptor[20] & 0x04))
      {
        DeviceState = STATE_dfuIDLE;
 800101a:	7008      	strb	r0, [r1, #0]
        DeviceStatus[4] = DeviceState;
 800101c:	7110      	strb	r0, [r2, #4]
        DeviceStatus[1] = 0;
 800101e:	7053      	strb	r3, [r2, #1]
        DeviceStatus[2] = 0;
 8001020:	7093      	strb	r3, [r2, #2]
        DeviceStatus[3] = 0;
 8001022:	70d3      	strb	r3, [r2, #3]
      break;
    default :
      break;
  }

  if (Length == 0)
 8001024:	b92c      	cbnz	r4, 8001032 <GETSTATUS+0x86>
  {
    pInformation->Ctrl_Info.Usb_wLength = 6 ;
 8001026:	4909      	ldr	r1, [pc, #36]	; (800104c <GETSTATUS+0xa0>)
 8001028:	2206      	movs	r2, #6
 800102a:	680b      	ldr	r3, [r1, #0]
    return NULL;
 800102c:	4620      	mov	r0, r4
      break;
  }

  if (Length == 0)
  {
    pInformation->Ctrl_Info.Usb_wLength = 6 ;
 800102e:	821a      	strh	r2, [r3, #16]
    return NULL;
 8001030:	bd10      	pop	{r4, pc}
  }
  else
    return(&(DeviceStatus[0]));
 8001032:	4803      	ldr	r0, [pc, #12]	; (8001040 <GETSTATUS+0x94>)
}
 8001034:	bd10      	pop	{r4, pc}
 8001036:	bf00      	nop
 8001038:	20000690 	.word	0x20000690
 800103c:	2000026c 	.word	0x2000026c
 8001040:	200006a0 	.word	0x200006a0
 8001044:	200001b4 	.word	0x200001b4
 8001048:	20000280 	.word	0x20000280
 800104c:	200006d8 	.word	0x200006d8

08001050 <UPLOAD>:
* Input          : Length.
* Output         : None.
* Return         : Pointer to data.
*******************************************************************************/
uint8_t *UPLOAD(uint16_t Length)
{
 8001050:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  uint16_t offset, returned;
  uint8_t *Phy_Addr = NULL;
  uint32_t Addr = 0;

  B0 = pInfo->USBwValues.bw.bb0;
  B1 = pInfo->USBwValues.bw.bb1;
 8001054:	4b29      	ldr	r3, [pc, #164]	; (80010fc <UPLOAD+0xac>)
  B1 =  pInfo->USBwLengths.bw.bb1;
  wlength = (uint16_t)B0;
  wlength = wlength * 0x100;
  wlength += (uint16_t)B1; /* wlength value updated*/

  offset = pInformation->Ctrl_Info.Usb_wOffset;
 8001056:	f8df 80c0 	ldr.w	r8, [pc, #192]	; 8001118 <UPLOAD+0xc8>

  B0 = pInfo->USBwValues.bw.bb0;
  B1 = pInfo->USBwValues.bw.bb1;
  wBlockNum = (uint16_t)B1;
  wBlockNum = wBlockNum * 0x100;
  wBlockNum += (uint16_t)B0; /* wBlockNum value updated*/
 800105a:	78da      	ldrb	r2, [r3, #3]
  uint8_t *Phy_Addr = NULL;
  uint32_t Addr = 0;

  B0 = pInfo->USBwValues.bw.bb0;
  B1 = pInfo->USBwValues.bw.bb1;
  wBlockNum = (uint16_t)B1;
 800105c:	789d      	ldrb	r5, [r3, #2]
  wBlockNum = wBlockNum * 0x100;
  wBlockNum += (uint16_t)B0; /* wBlockNum value updated*/

  B0 = pInfo->USBwLengths.bw.bb0;
  B1 =  pInfo->USBwLengths.bw.bb1;
  wlength = (uint16_t)B0;
 800105e:	79d9      	ldrb	r1, [r3, #7]
* Input          : Length.
* Output         : None.
* Return         : Pointer to data.
*******************************************************************************/
uint8_t *UPLOAD(uint16_t Length)
{
 8001060:	4604      	mov	r4, r0

  B0 = pInfo->USBwLengths.bw.bb0;
  B1 =  pInfo->USBwLengths.bw.bb1;
  wlength = (uint16_t)B0;
  wlength = wlength * 0x100;
  wlength += (uint16_t)B1; /* wlength value updated*/
 8001062:	7998      	ldrb	r0, [r3, #6]

  B0 = pInfo->USBwValues.bw.bb0;
  B1 = pInfo->USBwValues.bw.bb1;
  wBlockNum = (uint16_t)B1;
  wBlockNum = wBlockNum * 0x100;
  wBlockNum += (uint16_t)B0; /* wBlockNum value updated*/
 8001064:	4e26      	ldr	r6, [pc, #152]	; (8001100 <UPLOAD+0xb0>)
  B1 =  pInfo->USBwLengths.bw.bb1;
  wlength = (uint16_t)B0;
  wlength = wlength * 0x100;
  wlength += (uint16_t)B1; /* wlength value updated*/

  offset = pInformation->Ctrl_Info.Usb_wOffset;
 8001066:	f8d8 c000 	ldr.w	ip, [r8]

  B0 = pInfo->USBwValues.bw.bb0;
  B1 = pInfo->USBwValues.bw.bb1;
  wBlockNum = (uint16_t)B1;
  wBlockNum = wBlockNum * 0x100;
  wBlockNum += (uint16_t)B0; /* wBlockNum value updated*/
 800106a:	eb02 2505 	add.w	r5, r2, r5, lsl #8

  B0 = pInfo->USBwLengths.bw.bb0;
  B1 =  pInfo->USBwLengths.bw.bb1;
  wlength = (uint16_t)B0;
  wlength = wlength * 0x100;
  wlength += (uint16_t)B1; /* wlength value updated*/
 800106e:	eb00 2101 	add.w	r1, r0, r1, lsl #8

  B0 = pInfo->USBwValues.bw.bb0;
  B1 = pInfo->USBwValues.bw.bb1;
  wBlockNum = (uint16_t)B1;
  wBlockNum = wBlockNum * 0x100;
  wBlockNum += (uint16_t)B0; /* wBlockNum value updated*/
 8001072:	6035      	str	r5, [r6, #0]

  B0 = pInfo->USBwLengths.bw.bb0;
  B1 =  pInfo->USBwLengths.bw.bb1;
  wlength = (uint16_t)B0;
  wlength = wlength * 0x100;
  wlength += (uint16_t)B1; /* wlength value updated*/
 8001074:	6071      	str	r1, [r6, #4]

  offset = pInformation->Ctrl_Info.Usb_wOffset;
 8001076:	f8bc 7012 	ldrh.w	r7, [ip, #18]
 800107a:	4a22      	ldr	r2, [pc, #136]	; (8001104 <UPLOAD+0xb4>)
 800107c:	4b22      	ldr	r3, [pc, #136]	; (8001108 <UPLOAD+0xb8>)

  if (wBlockNum == 0)  /* Get Command */
 800107e:	b9b5      	cbnz	r5, 80010ae <UPLOAD+0x5e>
  {
    if (wlength > 3)
 8001080:	2903      	cmp	r1, #3
 8001082:	d901      	bls.n	8001088 <UPLOAD+0x38>
    {
      DeviceState = STATE_dfuIDLE ;
 8001084:	2002      	movs	r0, #2
 8001086:	e000      	b.n	800108a <UPLOAD+0x3a>
    }
    else
    {
      DeviceState = STATE_dfuUPLOAD_IDLE;
 8001088:	2009      	movs	r0, #9
 800108a:	7010      	strb	r0, [r2, #0]
    }

    DeviceStatus[4] = DeviceState;
 800108c:	7812      	ldrb	r2, [r2, #0]
    DeviceStatus[1] = 0;
 800108e:	2100      	movs	r1, #0
    DeviceStatus[2] = 0;
    DeviceStatus[3] = 0;

    MAL_Buffer[0] = CMD_GETCOMMANDS;
 8001090:	481e      	ldr	r0, [pc, #120]	; (800110c <UPLOAD+0xbc>)
    else
    {
      DeviceState = STATE_dfuUPLOAD_IDLE;
    }

    DeviceStatus[4] = DeviceState;
 8001092:	711a      	strb	r2, [r3, #4]
    DeviceStatus[1] = 0;
 8001094:	7059      	strb	r1, [r3, #1]
    DeviceStatus[2] = 0;
 8001096:	7099      	strb	r1, [r3, #2]
    DeviceStatus[3] = 0;
 8001098:	70d9      	strb	r1, [r3, #3]

    MAL_Buffer[0] = CMD_GETCOMMANDS;
    MAL_Buffer[1] = CMD_SETADDRESSPOINTER;
    MAL_Buffer[2] = CMD_ERASE;
 800109a:	2241      	movs	r2, #65	; 0x41
    DeviceStatus[1] = 0;
    DeviceStatus[2] = 0;
    DeviceStatus[3] = 0;

    MAL_Buffer[0] = CMD_GETCOMMANDS;
    MAL_Buffer[1] = CMD_SETADDRESSPOINTER;
 800109c:	2321      	movs	r3, #33	; 0x21
    DeviceStatus[4] = DeviceState;
    DeviceStatus[1] = 0;
    DeviceStatus[2] = 0;
    DeviceStatus[3] = 0;

    MAL_Buffer[0] = CMD_GETCOMMANDS;
 800109e:	7001      	strb	r1, [r0, #0]
    MAL_Buffer[1] = CMD_SETADDRESSPOINTER;
 80010a0:	7043      	strb	r3, [r0, #1]
    MAL_Buffer[2] = CMD_ERASE;
 80010a2:	7082      	strb	r2, [r0, #2]

    if (Length == 0)
 80010a4:	bb3c      	cbnz	r4, 80010f6 <UPLOAD+0xa6>
    {
      pInformation->Ctrl_Info.Usb_wLength = 3 ;
 80010a6:	2003      	movs	r0, #3
 80010a8:	f8ac 0010 	strh.w	r0, [ip, #16]
 80010ac:	e016      	b.n	80010dc <UPLOAD+0x8c>
      return NULL;
    }

    return(&MAL_Buffer[0]);
  }
  else if (wBlockNum > 1)
 80010ae:	2d01      	cmp	r5, #1
 80010b0:	d01a      	beq.n	80010e8 <UPLOAD+0x98>
  {
    DeviceState = STATE_dfuUPLOAD_IDLE ;
 80010b2:	2009      	movs	r0, #9
 80010b4:	7010      	strb	r0, [r2, #0]
    DeviceStatus[4] = DeviceState;
 80010b6:	7118      	strb	r0, [r3, #4]
    DeviceStatus[1] = 0;
 80010b8:	2200      	movs	r2, #0
    DeviceStatus[2] = 0;
    DeviceStatus[3] = 0;
    Addr = ((wBlockNum - 2) * wTransferSize) + Pointer;  /* Change is Accelerated*/
 80010ba:	4815      	ldr	r0, [pc, #84]	; (8001110 <UPLOAD+0xc0>)
  }
  else if (wBlockNum > 1)
  {
    DeviceState = STATE_dfuUPLOAD_IDLE ;
    DeviceStatus[4] = DeviceState;
    DeviceStatus[1] = 0;
 80010bc:	705a      	strb	r2, [r3, #1]
    DeviceStatus[2] = 0;
 80010be:	709a      	strb	r2, [r3, #2]
    DeviceStatus[3] = 0;
 80010c0:	70da      	strb	r2, [r3, #3]
    Addr = ((wBlockNum - 2) * wTransferSize) + Pointer;  /* Change is Accelerated*/
 80010c2:	4b14      	ldr	r3, [pc, #80]	; (8001114 <UPLOAD+0xc4>)
 80010c4:	6802      	ldr	r2, [r0, #0]
 80010c6:	18eb      	adds	r3, r5, r3

    Phy_Addr = MAL_Read(Addr, wlength);
 80010c8:	eb02 2083 	add.w	r0, r2, r3, lsl #10
 80010cc:	f7ff f87e 	bl	80001cc <MAL_Read>
    returned = wlength - offset;
 80010d0:	6871      	ldr	r1, [r6, #4]

    if (Length == 0)
 80010d2:	b934      	cbnz	r4, 80010e2 <UPLOAD+0x92>
    {
      pInformation->Ctrl_Info.Usb_wLength = returned ;
 80010d4:	f8d8 3000 	ldr.w	r3, [r8]
    DeviceStatus[2] = 0;
    DeviceStatus[3] = 0;
    Addr = ((wBlockNum - 2) * wTransferSize) + Pointer;  /* Change is Accelerated*/

    Phy_Addr = MAL_Read(Addr, wlength);
    returned = wlength - offset;
 80010d8:	1bcf      	subs	r7, r1, r7

    if (Length == 0)
    {
      pInformation->Ctrl_Info.Usb_wLength = returned ;
 80010da:	821f      	strh	r7, [r3, #16]
      return NULL;
 80010dc:	4620      	mov	r0, r4
 80010de:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    }
    return(Phy_Addr + offset);
 80010e2:	19c0      	adds	r0, r0, r7
 80010e4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  }
  else  /* unsupported wBlockNum */
  {
    DeviceState = STATUS_ERRSTALLEDPKT;
    DeviceStatus[4] = DeviceState;
    DeviceStatus[1] = 0;
 80010e8:	2000      	movs	r0, #0
    }
    return(Phy_Addr + offset);
  }
  else  /* unsupported wBlockNum */
  {
    DeviceState = STATUS_ERRSTALLEDPKT;
 80010ea:	210f      	movs	r1, #15
 80010ec:	7011      	strb	r1, [r2, #0]
    DeviceStatus[4] = DeviceState;
 80010ee:	7119      	strb	r1, [r3, #4]
    DeviceStatus[1] = 0;
 80010f0:	7058      	strb	r0, [r3, #1]
    DeviceStatus[2] = 0;
 80010f2:	7098      	strb	r0, [r3, #2]
    DeviceStatus[3] = 0;
 80010f4:	70d8      	strb	r0, [r3, #3]

    return NULL;
  }
}
 80010f6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80010fa:	bf00      	nop
 80010fc:	200006b8 	.word	0x200006b8
 8001100:	2000026c 	.word	0x2000026c
 8001104:	20000690 	.word	0x20000690
 8001108:	200006a0 	.word	0x200006a0
 800110c:	20000280 	.word	0x20000280
 8001110:	200001b4 	.word	0x200001b4
 8001114:	003ffffe 	.word	0x003ffffe
 8001118:	200006d8 	.word	0x200006d8

0800111c <DFU_GetStringDescriptor>:
* Output         : None.
* Return         : The address of the string descriptors.
*******************************************************************************/
uint8_t *DFU_GetStringDescriptor(uint16_t Length)
{
  uint8_t wValue0 = pInformation->USBwValue0;
 800111c:	4b05      	ldr	r3, [pc, #20]	; (8001134 <DFU_GetStringDescriptor+0x18>)
 800111e:	6819      	ldr	r1, [r3, #0]
 8001120:	78ca      	ldrb	r2, [r1, #3]

  if (wValue0 > 8)
 8001122:	2a08      	cmp	r2, #8
 8001124:	d804      	bhi.n	8001130 <DFU_GetStringDescriptor+0x14>
  {
    return NULL;
  }
  else
  {
    return Standard_GetDescriptorData(Length, &DFU_String_Descriptor[wValue0]);
 8001126:	4b04      	ldr	r3, [pc, #16]	; (8001138 <DFU_GetStringDescriptor+0x1c>)
 8001128:	eb03 01c2 	add.w	r1, r3, r2, lsl #3
 800112c:	f000 bbae 	b.w	800188c <Standard_GetDescriptorData>
  }
}
 8001130:	2000      	movs	r0, #0
 8001132:	4770      	bx	lr
 8001134:	200006d8 	.word	0x200006d8
 8001138:	200001c0 	.word	0x200001c0

0800113c <DFU_GetConfigDescriptor>:
* Output         : None.
* Return         : The address of the configuration descriptor.
*******************************************************************************/
uint8_t *DFU_GetConfigDescriptor(uint16_t Length)
{
  return Standard_GetDescriptorData (Length, &Config_Descriptor);
 800113c:	4901      	ldr	r1, [pc, #4]	; (8001144 <DFU_GetConfigDescriptor+0x8>)
 800113e:	f000 bba5 	b.w	800188c <Standard_GetDescriptorData>
 8001142:	bf00      	nop
 8001144:	200001b8 	.word	0x200001b8

08001148 <DFU_GetDeviceDescriptor>:
* Output         : None.
* Return         : The address of the device descriptor.
*******************************************************************************/
uint8_t *DFU_GetDeviceDescriptor(uint16_t Length)
{
  return Standard_GetDescriptorData(Length, &Device_Descriptor);
 8001148:	4901      	ldr	r1, [pc, #4]	; (8001150 <DFU_GetDeviceDescriptor+0x8>)
 800114a:	f000 bb9f 	b.w	800188c <Standard_GetDescriptorData>
 800114e:	bf00      	nop
 8001150:	200001f0 	.word	0x200001f0

08001154 <DFU_Reset>:
* Input          : None.
* Output         : None.
* Return         : None.
*******************************************************************************/
void DFU_Reset(void)
{
 8001154:	b570      	push	{r4, r5, r6, lr}
  /* Set DFU_DEVICE as not configured */
  Device_Info.Current_Configuration = 0;

  /* Current Feature initialization */
  pInformation->Current_Feature = DFU_ConfigDescriptor[7];
 8001156:	4822      	ldr	r0, [pc, #136]	; (80011e0 <DFU_Reset+0x8c>)
 8001158:	4a22      	ldr	r2, [pc, #136]	; (80011e4 <DFU_Reset+0x90>)
 800115a:	6801      	ldr	r1, [r0, #0]
 800115c:	79d5      	ldrb	r5, [r2, #7]
* Return         : None.
*******************************************************************************/
void DFU_Reset(void)
{
  /* Set DFU_DEVICE as not configured */
  Device_Info.Current_Configuration = 0;
 800115e:	4b22      	ldr	r3, [pc, #136]	; (80011e8 <DFU_Reset+0x94>)

  /* Current Feature initialization */
  pInformation->Current_Feature = DFU_ConfigDescriptor[7];
 8001160:	724d      	strb	r5, [r1, #9]

  _SetBTABLE(BTABLE_ADDRESS);
 8001162:	4d22      	ldr	r5, [pc, #136]	; (80011ec <DFU_Reset+0x98>)
* Return         : None.
*******************************************************************************/
void DFU_Reset(void)
{
  /* Set DFU_DEVICE as not configured */
  Device_Info.Current_Configuration = 0;
 8001164:	2400      	movs	r4, #0
  pInformation->Current_Feature = DFU_ConfigDescriptor[7];

  _SetBTABLE(BTABLE_ADDRESS);

  /* Initialize Endpoint 0 */
  _SetEPType(ENDP0, EP_CONTROL);
 8001166:	4e22      	ldr	r6, [pc, #136]	; (80011f0 <DFU_Reset+0x9c>)
* Return         : None.
*******************************************************************************/
void DFU_Reset(void)
{
  /* Set DFU_DEVICE as not configured */
  Device_Info.Current_Configuration = 0;
 8001168:	729c      	strb	r4, [r3, #10]

  /* Current Feature initialization */
  pInformation->Current_Feature = DFU_ConfigDescriptor[7];

  _SetBTABLE(BTABLE_ADDRESS);
 800116a:	602c      	str	r4, [r5, #0]

  /* Initialize Endpoint 0 */
  _SetEPType(ENDP0, EP_CONTROL);
 800116c:	6833      	ldr	r3, [r6, #0]
 800116e:	f648 108f 	movw	r0, #35215	; 0x898f
 8001172:	4018      	ands	r0, r3
 8001174:	f440 7100 	orr.w	r1, r0, #512	; 0x200
 8001178:	6031      	str	r1, [r6, #0]
  _SetEPTxStatus(ENDP0, EP_TX_NAK);
 800117a:	6833      	ldr	r3, [r6, #0]
 800117c:	f648 72bf 	movw	r2, #36799	; 0x8fbf
 8001180:	401a      	ands	r2, r3
 8001182:	f082 0020 	eor.w	r0, r2, #32
 8001186:	f440 4100 	orr.w	r1, r0, #32768	; 0x8000
 800118a:	f041 0380 	orr.w	r3, r1, #128	; 0x80
 800118e:	6033      	str	r3, [r6, #0]
  _SetEPRxAddr(ENDP0, ENDP0_RXADDR);
 8001190:	682e      	ldr	r6, [r5, #0]
 8001192:	4818      	ldr	r0, [pc, #96]	; (80011f4 <DFU_Reset+0xa0>)

    Reset_Device();

    return;
  }
}
 8001194:	b2b2      	uxth	r2, r6
  _SetBTABLE(BTABLE_ADDRESS);

  /* Initialize Endpoint 0 */
  _SetEPType(ENDP0, EP_CONTROL);
  _SetEPTxStatus(ENDP0, EP_TX_NAK);
  _SetEPRxAddr(ENDP0, ENDP0_RXADDR);
 8001196:	1811      	adds	r1, r2, r0
 8001198:	004b      	lsls	r3, r1, #1
 800119a:	2610      	movs	r6, #16
 800119c:	601e      	str	r6, [r3, #0]
  SetEPRxCount(ENDP0, Device_Property.MaxPacketSize);
 800119e:	4e16      	ldr	r6, [pc, #88]	; (80011f8 <DFU_Reset+0xa4>)
 80011a0:	4620      	mov	r0, r4
 80011a2:	f896 1070 	ldrb.w	r1, [r6, #112]	; 0x70
 80011a6:	f000 ff6b 	bl	8002080 <SetEPRxCount>
  _SetEPTxAddr(ENDP0, ENDP0_TXADDR);
 80011aa:	682a      	ldr	r2, [r5, #0]

    Reset_Device();

    return;
  }
}
 80011ac:	b290      	uxth	r0, r2
  /* Initialize Endpoint 0 */
  _SetEPType(ENDP0, EP_CONTROL);
  _SetEPTxStatus(ENDP0, EP_TX_NAK);
  _SetEPRxAddr(ENDP0, ENDP0_RXADDR);
  SetEPRxCount(ENDP0, Device_Property.MaxPacketSize);
  _SetEPTxAddr(ENDP0, ENDP0_TXADDR);
 80011ae:	f100 5100 	add.w	r1, r0, #536870912	; 0x20000000
 80011b2:	f501 5340 	add.w	r3, r1, #12288	; 0x3000
 80011b6:	0058      	lsls	r0, r3, #1
 80011b8:	2250      	movs	r2, #80	; 0x50
 80011ba:	6002      	str	r2, [r0, #0]
  SetEPTxCount(ENDP0, Device_Property.MaxPacketSize);
 80011bc:	f896 1070 	ldrb.w	r1, [r6, #112]	; 0x70
 80011c0:	4620      	mov	r0, r4
 80011c2:	f000 ff4f 	bl	8002064 <SetEPTxCount>
  Clear_Status_Out(ENDP0);
 80011c6:	4620      	mov	r0, r4
 80011c8:	f000 fefd 	bl	8001fc6 <Clear_Status_Out>
  SetEPRxValid(ENDP0);
 80011cc:	4620      	mov	r0, r4
 80011ce:	f000 fee9 	bl	8001fa4 <SetEPRxValid>

  /* Set this device to response on default address */
  SetDeviceAddress(0);
 80011d2:	4620      	mov	r0, r4
 80011d4:	f000 fd6c 	bl	8001cb0 <SetDeviceAddress>

  /* Set the new control state of the device to Attached */
  bDeviceState = ATTACHED;
 80011d8:	4b08      	ldr	r3, [pc, #32]	; (80011fc <DFU_Reset+0xa8>)
 80011da:	2101      	movs	r1, #1
 80011dc:	6019      	str	r1, [r3, #0]
 80011de:	bd70      	pop	{r4, r5, r6, pc}
 80011e0:	200006d8 	.word	0x200006d8
 80011e4:	20000144 	.word	0x20000144
 80011e8:	200006b8 	.word	0x200006b8
 80011ec:	40005c50 	.word	0x40005c50
 80011f0:	40005c00 	.word	0x40005c00
 80011f4:	20003004 	.word	0x20003004
 80011f8:	200001b4 	.word	0x200001b4
 80011fc:	20000278 	.word	0x20000278

08001200 <DFU_init>:
* Input          : None.
* Output         : None.
* Return         : None.
*******************************************************************************/
void DFU_init(void)
{
 8001200:	b510      	push	{r4, lr}
  DEVICE_INFO *pInfo = &Device_Info;

  /* Update the serial number string descriptor with the data from the unique ID*/
  Get_SerialNum();
 8001202:	f7ff fa5f 	bl	80006c4 <Get_SerialNum>

  pInfo->Current_Configuration = 0;
 8001206:	4b06      	ldr	r3, [pc, #24]	; (8001220 <DFU_init+0x20>)
 8001208:	2400      	movs	r4, #0
 800120a:	729c      	strb	r4, [r3, #10]

  /* Connect the device */
  PowerOn();
 800120c:	f000 f8f8 	bl	8001400 <PowerOn>

  /* Perform basic device initialization operations */
  USB_SIL_Init();
 8001210:	f000 ff5a 	bl	80020c8 <USB_SIL_Init>

  /* Enable USB interrupts */
  USB_Interrupts_Config();
 8001214:	f7ff fa1e 	bl	8000654 <USB_Interrupts_Config>

  bDeviceState = UNCONNECTED;
 8001218:	4802      	ldr	r0, [pc, #8]	; (8001224 <DFU_init+0x24>)
 800121a:	6004      	str	r4, [r0, #0]
 800121c:	bd10      	pop	{r4, pc}
 800121e:	bf00      	nop
 8001220:	200006b8 	.word	0x200006b8
 8001224:	20000278 	.word	0x20000278

08001228 <DFU_NoData_Setup>:
* Output         : None.
* Return         : USB_SUCCESS or USB_UNSUPPORT.
*******************************************************************************/
RESULT DFU_NoData_Setup(uint8_t RequestNo)
{
  if (Type_Recipient == (CLASS_REQUEST | INTERFACE_RECIPIENT))
 8001228:	4b2e      	ldr	r3, [pc, #184]	; (80012e4 <DFU_NoData_Setup+0xbc>)
 800122a:	6819      	ldr	r1, [r3, #0]
 800122c:	780a      	ldrb	r2, [r1, #0]
 800122e:	f002 037f 	and.w	r3, r2, #127	; 0x7f
 8001232:	2b21      	cmp	r3, #33	; 0x21
 8001234:	d154      	bne.n	80012e0 <DFU_NoData_Setup+0xb8>
  {
    /*DFU_NDLOAD*/
    if (RequestNo == DFU_DNLOAD)
 8001236:	2801      	cmp	r0, #1
 8001238:	d112      	bne.n	8001260 <DFU_NoData_Setup+0x38>
    {
      /* End of DNLOAD operation*/
      if (DeviceState == STATE_dfuDNLOAD_IDLE || DeviceState == STATE_dfuIDLE )
 800123a:	482b      	ldr	r0, [pc, #172]	; (80012e8 <DFU_NoData_Setup+0xc0>)
 800123c:	7802      	ldrb	r2, [r0, #0]
 800123e:	4601      	mov	r1, r0
 8001240:	2a05      	cmp	r2, #5
 8001242:	d001      	beq.n	8001248 <DFU_NoData_Setup+0x20>
 8001244:	2a02      	cmp	r2, #2
 8001246:	d14b      	bne.n	80012e0 <DFU_NoData_Setup+0xb8>
      {
        Manifest_State = Manifest_In_Progress;
        DeviceState = STATE_dfuMANIFEST_SYNC;
 8001248:	2206      	movs	r2, #6
    if (RequestNo == DFU_DNLOAD)
    {
      /* End of DNLOAD operation*/
      if (DeviceState == STATE_dfuDNLOAD_IDLE || DeviceState == STATE_dfuIDLE )
      {
        Manifest_State = Manifest_In_Progress;
 800124a:	4b28      	ldr	r3, [pc, #160]	; (80012ec <DFU_NoData_Setup+0xc4>)
 800124c:	2001      	movs	r0, #1
        DeviceState = STATE_dfuMANIFEST_SYNC;
 800124e:	700a      	strb	r2, [r1, #0]
        DeviceStatus[1] = 0;
 8001250:	4927      	ldr	r1, [pc, #156]	; (80012f0 <DFU_NoData_Setup+0xc8>)
    if (RequestNo == DFU_DNLOAD)
    {
      /* End of DNLOAD operation*/
      if (DeviceState == STATE_dfuDNLOAD_IDLE || DeviceState == STATE_dfuIDLE )
      {
        Manifest_State = Manifest_In_Progress;
 8001252:	6098      	str	r0, [r3, #8]
        DeviceState = STATE_dfuMANIFEST_SYNC;
        DeviceStatus[1] = 0;
 8001254:	2000      	movs	r0, #0
 8001256:	7048      	strb	r0, [r1, #1]
        DeviceStatus[2] = 0;
 8001258:	7088      	strb	r0, [r1, #2]
        DeviceStatus[3] = 0;
 800125a:	70c8      	strb	r0, [r1, #3]
        DeviceStatus[4] = DeviceState;
 800125c:	710a      	strb	r2, [r1, #4]
        return USB_SUCCESS;
 800125e:	4770      	bx	lr
      }
    }
    /*DFU_UPLOAD*/
    else if (RequestNo == DFU_UPLOAD)
 8001260:	2802      	cmp	r0, #2
 8001262:	d108      	bne.n	8001276 <DFU_NoData_Setup+0x4e>
    {
      DeviceState = STATE_dfuIDLE;
      DeviceStatus[1] = 0;
 8001264:	4922      	ldr	r1, [pc, #136]	; (80012f0 <DFU_NoData_Setup+0xc8>)
      }
    }
    /*DFU_UPLOAD*/
    else if (RequestNo == DFU_UPLOAD)
    {
      DeviceState = STATE_dfuIDLE;
 8001266:	4a20      	ldr	r2, [pc, #128]	; (80012e8 <DFU_NoData_Setup+0xc0>)
      DeviceStatus[1] = 0;
 8001268:	2300      	movs	r3, #0
      }
    }
    /*DFU_UPLOAD*/
    else if (RequestNo == DFU_UPLOAD)
    {
      DeviceState = STATE_dfuIDLE;
 800126a:	7010      	strb	r0, [r2, #0]
      DeviceStatus[1] = 0;
 800126c:	704b      	strb	r3, [r1, #1]
      DeviceStatus[2] = 0;
 800126e:	708b      	strb	r3, [r1, #2]
      DeviceStatus[3] = 0;
 8001270:	70cb      	strb	r3, [r1, #3]
      DeviceStatus[4] = DeviceState;
 8001272:	7108      	strb	r0, [r1, #4]
 8001274:	e032      	b.n	80012dc <DFU_NoData_Setup+0xb4>
      return USB_SUCCESS;
    }

    /*DFU_CLRSTATUS*/
    else if (RequestNo == DFU_CLRSTATUS)
 8001276:	2804      	cmp	r0, #4
 8001278:	d114      	bne.n	80012a4 <DFU_NoData_Setup+0x7c>
    {

      if (DeviceState == STATE_dfuERROR)
 800127a:	481b      	ldr	r0, [pc, #108]	; (80012e8 <DFU_NoData_Setup+0xc0>)
 800127c:	4b1c      	ldr	r3, [pc, #112]	; (80012f0 <DFU_NoData_Setup+0xc8>)
 800127e:	7802      	ldrb	r2, [r0, #0]
 8001280:	2a0a      	cmp	r2, #10
 8001282:	d104      	bne.n	800128e <DFU_NoData_Setup+0x66>
      {
        DeviceState = STATE_dfuIDLE;
 8001284:	2102      	movs	r1, #2
 8001286:	7001      	strb	r1, [r0, #0]
        DeviceStatus[0] = STATUS_OK;/*bStatus*/
 8001288:	2000      	movs	r0, #0
 800128a:	7018      	strb	r0, [r3, #0]
 800128c:	e004      	b.n	8001298 <DFU_NoData_Setup+0x70>
        DeviceStatus[4] = DeviceState;/*bState*/
        DeviceStatus[5] = 0;/*iString*/
      }
      else
      {   /*State Error*/
        DeviceState = STATE_dfuERROR;
 800128e:	210a      	movs	r1, #10
 8001290:	7001      	strb	r1, [r0, #0]
        DeviceStatus[0] = STATUS_ERRUNKNOWN;/*bStatus*/
 8001292:	200e      	movs	r0, #14
 8001294:	7018      	strb	r0, [r3, #0]
        DeviceStatus[1] = 0;
 8001296:	2000      	movs	r0, #0
 8001298:	7058      	strb	r0, [r3, #1]
        DeviceStatus[2] = 0;
 800129a:	7098      	strb	r0, [r3, #2]
        DeviceStatus[3] = 0; /*bwPollTimeout=0ms*/
 800129c:	70d8      	strb	r0, [r3, #3]
        DeviceStatus[4] = DeviceState;/*bState*/
 800129e:	7119      	strb	r1, [r3, #4]
        DeviceStatus[5] = 0;/*iString*/
 80012a0:	7158      	strb	r0, [r3, #5]
 80012a2:	4770      	bx	lr
      }
      return USB_SUCCESS;
    }
    /*DFU_ABORT*/
    else if (RequestNo == DFU_ABORT)
 80012a4:	2806      	cmp	r0, #6
 80012a6:	d11b      	bne.n	80012e0 <DFU_NoData_Setup+0xb8>
    {
      if (DeviceState == STATE_dfuIDLE || DeviceState == STATE_dfuDNLOAD_SYNC
 80012a8:	480f      	ldr	r0, [pc, #60]	; (80012e8 <DFU_NoData_Setup+0xc0>)
 80012aa:	7802      	ldrb	r2, [r0, #0]
 80012ac:	4603      	mov	r3, r0
 80012ae:	1e91      	subs	r1, r2, #2
 80012b0:	2901      	cmp	r1, #1
 80012b2:	d905      	bls.n	80012c0 <DFU_NoData_Setup+0x98>
          || DeviceState == STATE_dfuDNLOAD_IDLE || DeviceState == STATE_dfuMANIFEST_SYNC
 80012b4:	2a05      	cmp	r2, #5
 80012b6:	d003      	beq.n	80012c0 <DFU_NoData_Setup+0x98>
 80012b8:	2a06      	cmp	r2, #6
 80012ba:	d001      	beq.n	80012c0 <DFU_NoData_Setup+0x98>
          || DeviceState == STATE_dfuUPLOAD_IDLE )
 80012bc:	2a09      	cmp	r2, #9
 80012be:	d10d      	bne.n	80012dc <DFU_NoData_Setup+0xb4>
      {
        DeviceState = STATE_dfuIDLE;
 80012c0:	2202      	movs	r2, #2
        DeviceStatus[0] = STATUS_OK;
 80012c2:	490b      	ldr	r1, [pc, #44]	; (80012f0 <DFU_NoData_Setup+0xc8>)
    {
      if (DeviceState == STATE_dfuIDLE || DeviceState == STATE_dfuDNLOAD_SYNC
          || DeviceState == STATE_dfuDNLOAD_IDLE || DeviceState == STATE_dfuMANIFEST_SYNC
          || DeviceState == STATE_dfuUPLOAD_IDLE )
      {
        DeviceState = STATE_dfuIDLE;
 80012c4:	701a      	strb	r2, [r3, #0]
        DeviceStatus[1] = 0;
        DeviceStatus[2] = 0;
        DeviceStatus[3] = 0; /*bwPollTimeout=0ms*/
        DeviceStatus[4] = DeviceState;
        DeviceStatus[5] = 0; /*iString*/
        wBlockNum = 0;
 80012c6:	4b09      	ldr	r3, [pc, #36]	; (80012ec <DFU_NoData_Setup+0xc4>)
      if (DeviceState == STATE_dfuIDLE || DeviceState == STATE_dfuDNLOAD_SYNC
          || DeviceState == STATE_dfuDNLOAD_IDLE || DeviceState == STATE_dfuMANIFEST_SYNC
          || DeviceState == STATE_dfuUPLOAD_IDLE )
      {
        DeviceState = STATE_dfuIDLE;
        DeviceStatus[0] = STATUS_OK;
 80012c8:	2000      	movs	r0, #0
 80012ca:	7008      	strb	r0, [r1, #0]
        DeviceStatus[1] = 0;
 80012cc:	7048      	strb	r0, [r1, #1]
        DeviceStatus[2] = 0;
 80012ce:	7088      	strb	r0, [r1, #2]
        DeviceStatus[3] = 0; /*bwPollTimeout=0ms*/
 80012d0:	70c8      	strb	r0, [r1, #3]
        DeviceStatus[4] = DeviceState;
 80012d2:	710a      	strb	r2, [r1, #4]
        DeviceStatus[5] = 0; /*iString*/
 80012d4:	7148      	strb	r0, [r1, #5]
        wBlockNum = 0;
 80012d6:	6018      	str	r0, [r3, #0]
        wlength = 0;
 80012d8:	6058      	str	r0, [r3, #4]
 80012da:	4770      	bx	lr
      }
      return USB_SUCCESS;
 80012dc:	2000      	movs	r0, #0
 80012de:	4770      	bx	lr
    }
  }


  return USB_UNSUPPORT;
 80012e0:	2002      	movs	r0, #2

} /* End of DFU_NoData_Setup */
 80012e2:	4770      	bx	lr
 80012e4:	200006d8 	.word	0x200006d8
 80012e8:	20000690 	.word	0x20000690
 80012ec:	2000026c 	.word	0x2000026c
 80012f0:	200006a0 	.word	0x200006a0

080012f4 <DFU_write_crc>:
*******************************************************************************/
void DFU_write_crc(void)
{
  Manifest_State = Manifest_complete;

  if (Config_Descriptor.Descriptor[20] & 0x04)
 80012f4:	480c      	ldr	r0, [pc, #48]	; (8001328 <DFU_write_crc+0x34>)
* Output         : None.
* Return         : None.
*******************************************************************************/
void DFU_write_crc(void)
{
  Manifest_State = Manifest_complete;
 80012f6:	4b0d      	ldr	r3, [pc, #52]	; (800132c <DFU_write_crc+0x38>)

  if (Config_Descriptor.Descriptor[20] & 0x04)
 80012f8:	6841      	ldr	r1, [r0, #4]
* Output         : None.
* Return         : None.
*******************************************************************************/
void DFU_write_crc(void)
{
  Manifest_State = Manifest_complete;
 80012fa:	2200      	movs	r2, #0
 80012fc:	609a      	str	r2, [r3, #8]

  if (Config_Descriptor.Descriptor[20] & 0x04)
 80012fe:	7d0b      	ldrb	r3, [r1, #20]
 8001300:	480b      	ldr	r0, [pc, #44]	; (8001330 <DFU_write_crc+0x3c>)
 8001302:	f013 0104 	ands.w	r1, r3, #4
 8001306:	4b0b      	ldr	r3, [pc, #44]	; (8001334 <DFU_write_crc+0x40>)
 8001308:	d006      	beq.n	8001318 <DFU_write_crc+0x24>
  {
    DeviceState = STATE_dfuMANIFEST_SYNC;
 800130a:	2106      	movs	r1, #6
 800130c:	7001      	strb	r1, [r0, #0]
    DeviceStatus[4] = DeviceState;
 800130e:	7119      	strb	r1, [r3, #4]
    DeviceStatus[1] = 0;
 8001310:	705a      	strb	r2, [r3, #1]
    DeviceStatus[2] = 0;
 8001312:	709a      	strb	r2, [r3, #2]
    DeviceStatus[3] = 0;
 8001314:	70da      	strb	r2, [r3, #3]
    return;
 8001316:	4770      	bx	lr
  }
  else
  {
    DeviceState = STATE_dfuMANIFEST_WAIT_RESET;
 8001318:	2208      	movs	r2, #8
 800131a:	7002      	strb	r2, [r0, #0]
    DeviceStatus[4] = DeviceState;
 800131c:	711a      	strb	r2, [r3, #4]
    DeviceStatus[1] = 0;
 800131e:	7059      	strb	r1, [r3, #1]
    DeviceStatus[2] = 0;
 8001320:	7099      	strb	r1, [r3, #2]
    DeviceStatus[3] = 0;
 8001322:	70d9      	strb	r1, [r3, #3]

    Reset_Device();
 8001324:	f7ff b9b4 	b.w	8000690 <Reset_Device>
 8001328:	200001b4 	.word	0x200001b4
 800132c:	2000026c 	.word	0x2000026c
 8001330:	20000690 	.word	0x20000690
 8001334:	200006a0 	.word	0x200006a0

08001338 <DFU_Status_Out>:
* Input          : None.
* Output         : None.
* Return         : None.
*******************************************************************************/
void DFU_Status_Out (void)
{
 8001338:	b508      	push	{r3, lr}
  DEVICE_INFO *pInfo = &Device_Info;
  uint32_t Addr;

  if (pInfo->USBbRequest == DFU_GETSTATUS)
 800133a:	4b2a      	ldr	r3, [pc, #168]	; (80013e4 <DFU_Status_Out+0xac>)
 800133c:	7858      	ldrb	r0, [r3, #1]
 800133e:	2803      	cmp	r0, #3
 8001340:	d14e      	bne.n	80013e0 <DFU_Status_Out+0xa8>
  {
    if (DeviceState == STATE_dfuDNBUSY)
 8001342:	4929      	ldr	r1, [pc, #164]	; (80013e8 <DFU_Status_Out+0xb0>)
 8001344:	780a      	ldrb	r2, [r1, #0]
 8001346:	2a04      	cmp	r2, #4
 8001348:	d144      	bne.n	80013d4 <DFU_Status_Out+0x9c>
    {
      if (wBlockNum == 0)   /* Decode the Special Command*/
 800134a:	4a28      	ldr	r2, [pc, #160]	; (80013ec <DFU_Status_Out+0xb4>)
 800134c:	6813      	ldr	r3, [r2, #0]
 800134e:	bb4b      	cbnz	r3, 80013a4 <DFU_Status_Out+0x6c>
      {
        if ((MAL_Buffer[0] ==  CMD_GETCOMMANDS) && (wlength == 1))
 8001350:	4b27      	ldr	r3, [pc, #156]	; (80013f0 <DFU_Status_Out+0xb8>)
 8001352:	7819      	ldrb	r1, [r3, #0]
 8001354:	2900      	cmp	r1, #0
 8001356:	d030      	beq.n	80013ba <DFU_Status_Out+0x82>
        {}
        else if  (( MAL_Buffer[0] ==  CMD_SETADDRESSPOINTER ) && (wlength == 5))
 8001358:	2921      	cmp	r1, #33	; 0x21
 800135a:	d10f      	bne.n	800137c <DFU_Status_Out+0x44>
 800135c:	6850      	ldr	r0, [r2, #4]
 800135e:	2805      	cmp	r0, #5
 8001360:	d12b      	bne.n	80013ba <DFU_Status_Out+0x82>
        {
          Pointer  = MAL_Buffer[1];
          Pointer += MAL_Buffer[2] << 8;
          Pointer += MAL_Buffer[3] << 16;
 8001362:	78da      	ldrb	r2, [r3, #3]
        if ((MAL_Buffer[0] ==  CMD_GETCOMMANDS) && (wlength == 1))
        {}
        else if  (( MAL_Buffer[0] ==  CMD_SETADDRESSPOINTER ) && (wlength == 5))
        {
          Pointer  = MAL_Buffer[1];
          Pointer += MAL_Buffer[2] << 8;
 8001364:	7899      	ldrb	r1, [r3, #2]
          Pointer += MAL_Buffer[3] << 16;
 8001366:	0410      	lsls	r0, r2, #16
        if ((MAL_Buffer[0] ==  CMD_GETCOMMANDS) && (wlength == 1))
        {}
        else if  (( MAL_Buffer[0] ==  CMD_SETADDRESSPOINTER ) && (wlength == 5))
        {
          Pointer  = MAL_Buffer[1];
          Pointer += MAL_Buffer[2] << 8;
 8001368:	eb00 2201 	add.w	r2, r0, r1, lsl #8
      {
        if ((MAL_Buffer[0] ==  CMD_GETCOMMANDS) && (wlength == 1))
        {}
        else if  (( MAL_Buffer[0] ==  CMD_SETADDRESSPOINTER ) && (wlength == 5))
        {
          Pointer  = MAL_Buffer[1];
 800136c:	7859      	ldrb	r1, [r3, #1]
          Pointer += MAL_Buffer[2] << 8;
          Pointer += MAL_Buffer[3] << 16;
          Pointer += MAL_Buffer[4] << 24;
 800136e:	791b      	ldrb	r3, [r3, #4]
        {}
        else if  (( MAL_Buffer[0] ==  CMD_SETADDRESSPOINTER ) && (wlength == 5))
        {
          Pointer  = MAL_Buffer[1];
          Pointer += MAL_Buffer[2] << 8;
          Pointer += MAL_Buffer[3] << 16;
 8001370:	1850      	adds	r0, r2, r1
          Pointer += MAL_Buffer[4] << 24;
 8001372:	4920      	ldr	r1, [pc, #128]	; (80013f4 <DFU_Status_Out+0xbc>)
 8001374:	eb00 6203 	add.w	r2, r0, r3, lsl #24
 8001378:	600a      	str	r2, [r1, #0]
 800137a:	e01e      	b.n	80013ba <DFU_Status_Out+0x82>
        }
        else if (( MAL_Buffer[0] ==  CMD_ERASE ) && (wlength == 5))
 800137c:	2941      	cmp	r1, #65	; 0x41
 800137e:	d11c      	bne.n	80013ba <DFU_Status_Out+0x82>
 8001380:	6852      	ldr	r2, [r2, #4]
 8001382:	2a05      	cmp	r2, #5
 8001384:	d119      	bne.n	80013ba <DFU_Status_Out+0x82>
        {
          Pointer  = MAL_Buffer[1];
          Pointer += MAL_Buffer[2] << 8;
          Pointer += MAL_Buffer[3] << 16;
 8001386:	78d8      	ldrb	r0, [r3, #3]
          Pointer += MAL_Buffer[4] << 24;
        }
        else if (( MAL_Buffer[0] ==  CMD_ERASE ) && (wlength == 5))
        {
          Pointer  = MAL_Buffer[1];
          Pointer += MAL_Buffer[2] << 8;
 8001388:	7899      	ldrb	r1, [r3, #2]
          Pointer += MAL_Buffer[3] << 16;
 800138a:	0402      	lsls	r2, r0, #16
          Pointer += MAL_Buffer[3] << 16;
          Pointer += MAL_Buffer[4] << 24;
        }
        else if (( MAL_Buffer[0] ==  CMD_ERASE ) && (wlength == 5))
        {
          Pointer  = MAL_Buffer[1];
 800138c:	7858      	ldrb	r0, [r3, #1]
          Pointer += MAL_Buffer[2] << 8;
 800138e:	eb02 2101 	add.w	r1, r2, r1, lsl #8
          Pointer += MAL_Buffer[3] << 16;
          Pointer += MAL_Buffer[4] << 24;
 8001392:	791b      	ldrb	r3, [r3, #4]
        }
        else if (( MAL_Buffer[0] ==  CMD_ERASE ) && (wlength == 5))
        {
          Pointer  = MAL_Buffer[1];
          Pointer += MAL_Buffer[2] << 8;
          Pointer += MAL_Buffer[3] << 16;
 8001394:	180a      	adds	r2, r1, r0
          Pointer += MAL_Buffer[4] << 24;
 8001396:	4917      	ldr	r1, [pc, #92]	; (80013f4 <DFU_Status_Out+0xbc>)
 8001398:	eb02 6003 	add.w	r0, r2, r3, lsl #24
 800139c:	6008      	str	r0, [r1, #0]
          MAL_Erase(Pointer);
 800139e:	f7fe fee5 	bl	800016c <MAL_Erase>
 80013a2:	e00a      	b.n	80013ba <DFU_Status_Out+0x82>
        }
      }

      else if (wBlockNum > 1)  // Download Command
 80013a4:	2b01      	cmp	r3, #1
 80013a6:	d908      	bls.n	80013ba <DFU_Status_Out+0x82>
      {
        Addr = ((wBlockNum - 2) * wTransferSize) + Pointer;
 80013a8:	4813      	ldr	r0, [pc, #76]	; (80013f8 <DFU_Status_Out+0xc0>)
 80013aa:	1819      	adds	r1, r3, r0
 80013ac:	4b11      	ldr	r3, [pc, #68]	; (80013f4 <DFU_Status_Out+0xbc>)
 80013ae:	6818      	ldr	r0, [r3, #0]
        MAL_Write(Addr, wlength);
 80013b0:	eb00 2081 	add.w	r0, r0, r1, lsl #10
 80013b4:	6851      	ldr	r1, [r2, #4]
 80013b6:	f7fe fef1 	bl	800019c <MAL_Write>
      }
      wlength = 0;
 80013ba:	480c      	ldr	r0, [pc, #48]	; (80013ec <DFU_Status_Out+0xb4>)
 80013bc:	2300      	movs	r3, #0
      wBlockNum = 0;
 80013be:	6003      	str	r3, [r0, #0]
      else if (wBlockNum > 1)  // Download Command
      {
        Addr = ((wBlockNum - 2) * wTransferSize) + Pointer;
        MAL_Write(Addr, wlength);
      }
      wlength = 0;
 80013c0:	6043      	str	r3, [r0, #4]
      wBlockNum = 0;

      DeviceState =  STATE_dfuDNLOAD_SYNC;
 80013c2:	4a09      	ldr	r2, [pc, #36]	; (80013e8 <DFU_Status_Out+0xb0>)
      DeviceStatus[4] = DeviceState;
 80013c4:	480d      	ldr	r0, [pc, #52]	; (80013fc <DFU_Status_Out+0xc4>)
        MAL_Write(Addr, wlength);
      }
      wlength = 0;
      wBlockNum = 0;

      DeviceState =  STATE_dfuDNLOAD_SYNC;
 80013c6:	2103      	movs	r1, #3
 80013c8:	7011      	strb	r1, [r2, #0]
      DeviceStatus[4] = DeviceState;
 80013ca:	7101      	strb	r1, [r0, #4]
      DeviceStatus[1] = 0;
 80013cc:	7043      	strb	r3, [r0, #1]
      DeviceStatus[2] = 0;
 80013ce:	7083      	strb	r3, [r0, #2]
      DeviceStatus[3] = 0;
 80013d0:	70c3      	strb	r3, [r0, #3]
 80013d2:	bd08      	pop	{r3, pc}
      return;
    }
    else if (DeviceState == STATE_dfuMANIFEST)/* Manifestation in progress*/
 80013d4:	2a07      	cmp	r2, #7
 80013d6:	d103      	bne.n	80013e0 <DFU_Status_Out+0xa8>
      DFU_write_crc();
      return;
    }
  }
  return;
}
 80013d8:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
      DeviceStatus[3] = 0;
      return;
    }
    else if (DeviceState == STATE_dfuMANIFEST)/* Manifestation in progress*/
    {
      DFU_write_crc();
 80013dc:	f7ff bf8a 	b.w	80012f4 <DFU_write_crc>
 80013e0:	bd08      	pop	{r3, pc}
 80013e2:	bf00      	nop
 80013e4:	200006b8 	.word	0x200006b8
 80013e8:	20000690 	.word	0x20000690
 80013ec:	2000026c 	.word	0x2000026c
 80013f0:	20000280 	.word	0x20000280
 80013f4:	200001b4 	.word	0x200001b4
 80013f8:	003ffffe 	.word	0x003ffffe
 80013fc:	200006a0 	.word	0x200006a0

08001400 <PowerOn>:
* Input          : None.
* Output         : None.
* Return         : USB_SUCCESS.
*******************************************************************************/
RESULT PowerOn(void)
{
 8001400:	b508      	push	{r3, lr}
  uint16_t wRegVal;

  /*** cable plugged-in ? ***/
  USB_Cable_Config(ENABLE);
 8001402:	2001      	movs	r0, #1
 8001404:	f7ff f936 	bl	8000674 <USB_Cable_Config>

  /*** CNTR_PWDN = 0 ***/
  wRegVal = CNTR_FRES;
  _SetCNTR(wRegVal);
 8001408:	4b06      	ldr	r3, [pc, #24]	; (8001424 <PowerOn+0x24>)

  /*** CNTR_FRES = 0 ***/
  wInterrupt_Mask = 0;
  _SetCNTR(wInterrupt_Mask);
  /*** Clear pending interrupts ***/
  _SetISTR(0);
 800140a:	4907      	ldr	r1, [pc, #28]	; (8001428 <PowerOn+0x28>)
  /*** cable plugged-in ? ***/
  USB_Cable_Config(ENABLE);

  /*** CNTR_PWDN = 0 ***/
  wRegVal = CNTR_FRES;
  _SetCNTR(wRegVal);
 800140c:	2201      	movs	r2, #1

  /*** CNTR_FRES = 0 ***/
  wInterrupt_Mask = 0;
  _SetCNTR(wInterrupt_Mask);
 800140e:	2000      	movs	r0, #0
  /*** cable plugged-in ? ***/
  USB_Cable_Config(ENABLE);

  /*** CNTR_PWDN = 0 ***/
  wRegVal = CNTR_FRES;
  _SetCNTR(wRegVal);
 8001410:	601a      	str	r2, [r3, #0]

  /*** CNTR_FRES = 0 ***/
  wInterrupt_Mask = 0;
  _SetCNTR(wInterrupt_Mask);
 8001412:	6018      	str	r0, [r3, #0]
  /*** Clear pending interrupts ***/
  _SetISTR(0);
 8001414:	6008      	str	r0, [r1, #0]
  /*** Set interrupt mask ***/
  wInterrupt_Mask = CNTR_RESETM | CNTR_SUSPM | CNTR_WKUPM;
 8001416:	4905      	ldr	r1, [pc, #20]	; (800142c <PowerOn+0x2c>)
 8001418:	f44f 52e0 	mov.w	r2, #7168	; 0x1c00
 800141c:	800a      	strh	r2, [r1, #0]
  _SetCNTR(wInterrupt_Mask);
 800141e:	601a      	str	r2, [r3, #0]

  return USB_SUCCESS;
}
 8001420:	bd08      	pop	{r3, pc}
 8001422:	bf00      	nop
 8001424:	40005c40 	.word	0x40005c40
 8001428:	40005c44 	.word	0x40005c44
 800142c:	200006dc 	.word	0x200006dc

08001430 <Suspend>:
  uint16_t wCNTR;
  /* suspend preparation */
  /* ... */

  /* macrocell enters suspend mode */
  wCNTR = _GetCNTR();
 8001430:	4b06      	ldr	r3, [pc, #24]	; (800144c <Suspend+0x1c>)
 8001432:	681a      	ldr	r2, [r3, #0]
  wCNTR |= CNTR_FSUSP;
  _SetCNTR(wCNTR);
 8001434:	b290      	uxth	r0, r2
 8001436:	f040 0108 	orr.w	r1, r0, #8
 800143a:	6019      	str	r1, [r3, #0]
  /* ------------------ ONLY WITH BUS-POWERED DEVICES ---------------------- */
  /* power reduction */
  /* ... on connected devices */

  /* force low-power mode in the macrocell */
  wCNTR = _GetCNTR();
 800143c:	681a      	ldr	r2, [r3, #0]
  wCNTR |= CNTR_LPMODE;
  _SetCNTR(wCNTR);
 800143e:	b290      	uxth	r0, r2
 8001440:	f040 0104 	orr.w	r1, r0, #4
 8001444:	6019      	str	r1, [r3, #0]

  /* switch-off the clocks */
  /* ... */
  Enter_LowPowerMode();
 8001446:	f7ff b8f1 	b.w	800062c <Enter_LowPowerMode>
 800144a:	bf00      	nop
 800144c:	40005c40 	.word	0x40005c40

08001450 <Resume_Init>:
* Input          : None.
* Output         : None.
* Return         : USB_SUCCESS.
*******************************************************************************/
void Resume_Init(void)
{
 8001450:	b510      	push	{r4, lr}
  /* ------------------ ONLY WITH BUS-POWERED DEVICES ---------------------- */
  /* restart the clocks */
  /* ...  */

  /* CNTR_LPMODE = 0 */
  wCNTR = _GetCNTR();
 8001452:	4c06      	ldr	r4, [pc, #24]	; (800146c <Resume_Init+0x1c>)
  wCNTR &= (~CNTR_LPMODE);
 8001454:	f64f 73fb 	movw	r3, #65531	; 0xfffb
  /* ------------------ ONLY WITH BUS-POWERED DEVICES ---------------------- */
  /* restart the clocks */
  /* ...  */

  /* CNTR_LPMODE = 0 */
  wCNTR = _GetCNTR();
 8001458:	6822      	ldr	r2, [r4, #0]
  wCNTR &= (~CNTR_LPMODE);
 800145a:	4013      	ands	r3, r2
  _SetCNTR(wCNTR);
 800145c:	6023      	str	r3, [r4, #0]

  /* restore full power */
  /* ... on connected devices */
  Leave_LowPowerMode();
 800145e:	f7ff f8eb 	bl	8000638 <Leave_LowPowerMode>

  /* reset FSUSP bit */
  _SetCNTR(IMR_MSK);
 8001462:	f44f 403f 	mov.w	r0, #48896	; 0xbf00
 8001466:	6020      	str	r0, [r4, #0]
 8001468:	bd10      	pop	{r4, pc}
 800146a:	bf00      	nop
 800146c:	40005c40 	.word	0x40005c40

08001470 <Resume>:
*                  decrementing of the ESOF counter in different states.
* Output         : None.
* Return         : None.
*******************************************************************************/
void Resume(RESUME_STATE eResumeSetVal)
{
 8001470:	4b1f      	ldr	r3, [pc, #124]	; (80014f0 <Resume+0x80>)
  uint16_t wCNTR;

  if (eResumeSetVal != RESUME_ESOF)
 8001472:	2807      	cmp	r0, #7
*                  decrementing of the ESOF counter in different states.
* Output         : None.
* Return         : None.
*******************************************************************************/
void Resume(RESUME_STATE eResumeSetVal)
{
 8001474:	b510      	push	{r4, lr}
  uint16_t wCNTR;

  if (eResumeSetVal != RESUME_ESOF)
    ResumeS.eState = eResumeSetVal;
 8001476:	bf18      	it	ne
 8001478:	7018      	strbne	r0, [r3, #0]

  switch (ResumeS.eState)
 800147a:	781a      	ldrb	r2, [r3, #0]
 800147c:	4c1c      	ldr	r4, [pc, #112]	; (80014f0 <Resume+0x80>)
 800147e:	2a05      	cmp	r2, #5
 8001480:	d833      	bhi.n	80014ea <Resume+0x7a>
 8001482:	e8df f002 	tbb	[pc, r2]
 8001486:	0703      	.short	0x0703
 8001488:	2318100c 	.word	0x2318100c
  {
    case RESUME_EXTERNAL:
      Resume_Init();
 800148c:	f7ff ffe0 	bl	8001450 <Resume_Init>
      ResumeS.eState = RESUME_OFF;
 8001490:	2206      	movs	r2, #6
 8001492:	e002      	b.n	800149a <Resume+0x2a>
      break;
    case RESUME_INTERNAL:
      Resume_Init();
 8001494:	f7ff ffdc 	bl	8001450 <Resume_Init>
      ResumeS.eState = RESUME_START;
 8001498:	2204      	movs	r2, #4
 800149a:	7022      	strb	r2, [r4, #0]
      break;
 800149c:	bd10      	pop	{r4, pc}
    case RESUME_LATER:
      ResumeS.bESOFcnt = 2;
 800149e:	2102      	movs	r1, #2
 80014a0:	7059      	strb	r1, [r3, #1]
      ResumeS.eState = RESUME_WAIT;
 80014a2:	2003      	movs	r0, #3
 80014a4:	e022      	b.n	80014ec <Resume+0x7c>
      break;
    case RESUME_WAIT:
      ResumeS.bESOFcnt--;
 80014a6:	7859      	ldrb	r1, [r3, #1]
 80014a8:	1e4a      	subs	r2, r1, #1
 80014aa:	b2d0      	uxtb	r0, r2
 80014ac:	7058      	strb	r0, [r3, #1]
      if (ResumeS.bESOFcnt == 0)
 80014ae:	785b      	ldrb	r3, [r3, #1]
 80014b0:	b9eb      	cbnz	r3, 80014ee <Resume+0x7e>
        ResumeS.eState = RESUME_START;
 80014b2:	2004      	movs	r0, #4
 80014b4:	e017      	b.n	80014e6 <Resume+0x76>
      break;
    case RESUME_START:
      wCNTR = _GetCNTR();
 80014b6:	4b0f      	ldr	r3, [pc, #60]	; (80014f4 <Resume+0x84>)
 80014b8:	6818      	ldr	r0, [r3, #0]
      wCNTR |= CNTR_RESUME;
      _SetCNTR(wCNTR);
 80014ba:	b281      	uxth	r1, r0
 80014bc:	f041 0210 	orr.w	r2, r1, #16
 80014c0:	601a      	str	r2, [r3, #0]
      ResumeS.eState = RESUME_ON;
      ResumeS.bESOFcnt = 10;
 80014c2:	200a      	movs	r0, #10
      break;
    case RESUME_START:
      wCNTR = _GetCNTR();
      wCNTR |= CNTR_RESUME;
      _SetCNTR(wCNTR);
      ResumeS.eState = RESUME_ON;
 80014c4:	2305      	movs	r3, #5
 80014c6:	7023      	strb	r3, [r4, #0]
      ResumeS.bESOFcnt = 10;
 80014c8:	7060      	strb	r0, [r4, #1]
      break;
 80014ca:	bd10      	pop	{r4, pc}
    case RESUME_ON:
      ResumeS.bESOFcnt--;
 80014cc:	7858      	ldrb	r0, [r3, #1]
 80014ce:	1e41      	subs	r1, r0, #1
 80014d0:	b2ca      	uxtb	r2, r1
 80014d2:	705a      	strb	r2, [r3, #1]
      if (ResumeS.bESOFcnt == 0)
 80014d4:	785b      	ldrb	r3, [r3, #1]
 80014d6:	b953      	cbnz	r3, 80014ee <Resume+0x7e>
      {
        wCNTR = _GetCNTR();
 80014d8:	4806      	ldr	r0, [pc, #24]	; (80014f4 <Resume+0x84>)
        wCNTR &= (~CNTR_RESUME);
 80014da:	f64f 72ef 	movw	r2, #65519	; 0xffef
      break;
    case RESUME_ON:
      ResumeS.bESOFcnt--;
      if (ResumeS.bESOFcnt == 0)
      {
        wCNTR = _GetCNTR();
 80014de:	6801      	ldr	r1, [r0, #0]
        wCNTR &= (~CNTR_RESUME);
 80014e0:	400a      	ands	r2, r1
        _SetCNTR(wCNTR);
 80014e2:	6002      	str	r2, [r0, #0]
        ResumeS.eState = RESUME_OFF;
 80014e4:	2006      	movs	r0, #6
 80014e6:	4b02      	ldr	r3, [pc, #8]	; (80014f0 <Resume+0x80>)
 80014e8:	e000      	b.n	80014ec <Resume+0x7c>
      }
      break;
    case RESUME_OFF:
    case RESUME_ESOF:
    default:
      ResumeS.eState = RESUME_OFF;
 80014ea:	2006      	movs	r0, #6
 80014ec:	7018      	strb	r0, [r3, #0]
 80014ee:	bd10      	pop	{r4, pc}
 80014f0:	200006a8 	.word	0x200006a8
 80014f4:	40005c40 	.word	0x40005c40

080014f8 <Standard_GetConfiguration>:
* Output         : None.
* Return         : Return 1 , if the request is invalid when "Length" is 0.
*                  Return "Buffer" if the "Length" is not 0.
*******************************************************************************/
uint8_t *Standard_GetConfiguration(uint16_t Length)
{
 80014f8:	b510      	push	{r4, lr}
 80014fa:	4c06      	ldr	r4, [pc, #24]	; (8001514 <Standard_GetConfiguration+0x1c>)
  if (Length == 0)
 80014fc:	b918      	cbnz	r0, 8001506 <Standard_GetConfiguration+0xe>
  {
    pInformation->Ctrl_Info.Usb_wLength =
 80014fe:	6823      	ldr	r3, [r4, #0]
 8001500:	2201      	movs	r2, #1
 8001502:	821a      	strh	r2, [r3, #16]
      sizeof(pInformation->Current_Configuration);
    return 0;
 8001504:	bd10      	pop	{r4, pc}
  }
  pUser_Standard_Requests->User_GetConfiguration();
 8001506:	4b04      	ldr	r3, [pc, #16]	; (8001518 <Standard_GetConfiguration+0x20>)
 8001508:	6818      	ldr	r0, [r3, #0]
 800150a:	6801      	ldr	r1, [r0, #0]
 800150c:	4788      	blx	r1
  return (uint8_t *)&pInformation->Current_Configuration;
 800150e:	6820      	ldr	r0, [r4, #0]
 8001510:	300a      	adds	r0, #10
}
 8001512:	bd10      	pop	{r4, pc}
 8001514:	200006d8 	.word	0x200006d8
 8001518:	200006d4 	.word	0x200006d4

0800151c <Standard_GetInterface>:
* Output         : None.
* Return         : Return 0, if the request is invalid when "Length" is 0.
*                  Return "Buffer" if the "Length" is not 0.
*******************************************************************************/
uint8_t *Standard_GetInterface(uint16_t Length)
{
 800151c:	b510      	push	{r4, lr}
 800151e:	4c06      	ldr	r4, [pc, #24]	; (8001538 <Standard_GetInterface+0x1c>)
  if (Length == 0)
 8001520:	b918      	cbnz	r0, 800152a <Standard_GetInterface+0xe>
  {
    pInformation->Ctrl_Info.Usb_wLength =
 8001522:	6823      	ldr	r3, [r4, #0]
 8001524:	2201      	movs	r2, #1
 8001526:	821a      	strh	r2, [r3, #16]
      sizeof(pInformation->Current_AlternateSetting);
    return 0;
 8001528:	bd10      	pop	{r4, pc}
  }
  pUser_Standard_Requests->User_GetInterface();
 800152a:	4b04      	ldr	r3, [pc, #16]	; (800153c <Standard_GetInterface+0x20>)
 800152c:	6818      	ldr	r0, [r3, #0]
 800152e:	6881      	ldr	r1, [r0, #8]
 8001530:	4788      	blx	r1
  return (uint8_t *)&pInformation->Current_AlternateSetting;
 8001532:	6820      	ldr	r0, [r4, #0]
 8001534:	300c      	adds	r0, #12
}
 8001536:	bd10      	pop	{r4, pc}
 8001538:	200006d8 	.word	0x200006d8
 800153c:	200006d4 	.word	0x200006d4

08001540 <Standard_GetStatus>:
* Output         : None.
* Return         : Return 0, if the request is at end of data block,
*                  or is invalid when "Length" is 0.
*******************************************************************************/
uint8_t *Standard_GetStatus(uint16_t Length)
{
 8001540:	b508      	push	{r3, lr}
 8001542:	4a23      	ldr	r2, [pc, #140]	; (80015d0 <Standard_GetStatus+0x90>)
  if (Length == 0)
 8001544:	b918      	cbnz	r0, 800154e <Standard_GetStatus+0xe>
  {
    pInformation->Ctrl_Info.Usb_wLength = 2;
 8001546:	6813      	ldr	r3, [r2, #0]
 8001548:	2202      	movs	r2, #2
 800154a:	821a      	strh	r2, [r3, #16]
    return 0;
 800154c:	bd08      	pop	{r3, pc}
  }

  /* Reset Status Information */
  StatusInfo.w = 0;
 800154e:	4b21      	ldr	r3, [pc, #132]	; (80015d4 <Standard_GetStatus+0x94>)
 8001550:	2000      	movs	r0, #0

  if (Type_Recipient == (STANDARD_REQUEST | DEVICE_RECIPIENT))
 8001552:	6812      	ldr	r2, [r2, #0]
    pInformation->Ctrl_Info.Usb_wLength = 2;
    return 0;
  }

  /* Reset Status Information */
  StatusInfo.w = 0;
 8001554:	8018      	strh	r0, [r3, #0]

  if (Type_Recipient == (STANDARD_REQUEST | DEVICE_RECIPIENT))
 8001556:	7811      	ldrb	r1, [r2, #0]
 8001558:	f011 017f 	ands.w	r1, r1, #127	; 0x7f
 800155c:	d113      	bne.n	8001586 <Standard_GetStatus+0x46>
  {
    /*Get Device Status */
    uint8_t Feature = pInformation->Current_Feature;
 800155e:	7a50      	ldrb	r0, [r2, #9]

    /* Remote Wakeup enabled */
    if (ValBit(Feature, 5))
 8001560:	f000 0220 	and.w	r2, r0, #32
 8001564:	b2d1      	uxtb	r1, r2
 8001566:	b109      	cbz	r1, 800156c <Standard_GetStatus+0x2c>
    {
      SetBit(StatusInfo0, 1);
 8001568:	2202      	movs	r2, #2
 800156a:	701a      	strb	r2, [r3, #0]
    {
      ClrBit(StatusInfo0, 1);
    }      

    /* Bus-powered */
    if (ValBit(Feature, 6))
 800156c:	f000 0340 	and.w	r3, r0, #64	; 0x40
 8001570:	b2d8      	uxtb	r0, r3
 8001572:	4b18      	ldr	r3, [pc, #96]	; (80015d4 <Standard_GetStatus+0x94>)
 8001574:	b118      	cbz	r0, 800157e <Standard_GetStatus+0x3e>
    {
      SetBit(StatusInfo0, 0);
 8001576:	781a      	ldrb	r2, [r3, #0]
 8001578:	f042 0101 	orr.w	r1, r2, #1
 800157c:	e01e      	b.n	80015bc <Standard_GetStatus+0x7c>
    }
    else /* Self-powered */
    {
      ClrBit(StatusInfo0, 0);
 800157e:	7819      	ldrb	r1, [r3, #0]
 8001580:	f021 0101 	bic.w	r1, r1, #1
 8001584:	e01a      	b.n	80015bc <Standard_GetStatus+0x7c>
    }
  }
  /*Interface Status*/
  else if (Type_Recipient == (STANDARD_REQUEST | INTERFACE_RECIPIENT))
 8001586:	2901      	cmp	r1, #1
 8001588:	d01f      	beq.n	80015ca <Standard_GetStatus+0x8a>
  {
    return (uint8_t *)&StatusInfo;
  }
  /*Get EndPoint Status*/
  else if (Type_Recipient == (STANDARD_REQUEST | ENDPOINT_RECIPIENT))
 800158a:	2902      	cmp	r1, #2
 800158c:	d11e      	bne.n	80015cc <Standard_GetStatus+0x8c>
  {
    uint8_t Related_Endpoint;
    uint8_t wIndex0 = pInformation->USBwIndex0;
 800158e:	7950      	ldrb	r0, [r2, #5]

    Related_Endpoint = (wIndex0 & 0x0f);
 8001590:	f000 020f 	and.w	r2, r0, #15
 8001594:	ea4f 0182 	mov.w	r1, r2, lsl #2
    if (ValBit(wIndex0, 7))
 8001598:	f010 0f80 	tst.w	r0, #128	; 0x80
    {
      /* IN endpoint */
      if (_GetTxStallStatus(Related_Endpoint))
 800159c:	f101 4080 	add.w	r0, r1, #1073741824	; 0x40000000
 80015a0:	f500 42b8 	add.w	r2, r0, #23552	; 0x5c00
 80015a4:	6811      	ldr	r1, [r2, #0]
  {
    uint8_t Related_Endpoint;
    uint8_t wIndex0 = pInformation->USBwIndex0;

    Related_Endpoint = (wIndex0 & 0x0f);
    if (ValBit(wIndex0, 7))
 80015a6:	d003      	beq.n	80015b0 <Standard_GetStatus+0x70>
    {
      /* IN endpoint */
      if (_GetTxStallStatus(Related_Endpoint))
 80015a8:	f001 0230 	and.w	r2, r1, #48	; 0x30
 80015ac:	2a10      	cmp	r2, #16
 80015ae:	e003      	b.n	80015b8 <Standard_GetStatus+0x78>
      }
    }
    else
    {
      /* OUT endpoint */
      if (_GetRxStallStatus(Related_Endpoint))
 80015b0:	f401 5040 	and.w	r0, r1, #12288	; 0x3000
 80015b4:	f5b0 5f80 	cmp.w	r0, #4096	; 0x1000
 80015b8:	d101      	bne.n	80015be <Standard_GetStatus+0x7e>
      {
        SetBit(StatusInfo0, 0); /* OUT Endpoint stalled */
 80015ba:	2101      	movs	r1, #1
 80015bc:	7019      	strb	r1, [r3, #0]
  }
  else
  {
    return NULL;
  }
  pUser_Standard_Requests->User_GetStatus();
 80015be:	4b06      	ldr	r3, [pc, #24]	; (80015d8 <Standard_GetStatus+0x98>)
 80015c0:	6818      	ldr	r0, [r3, #0]
 80015c2:	6901      	ldr	r1, [r0, #16]
 80015c4:	4788      	blx	r1
  return (uint8_t *)&StatusInfo;
 80015c6:	4803      	ldr	r0, [pc, #12]	; (80015d4 <Standard_GetStatus+0x94>)
 80015c8:	bd08      	pop	{r3, pc}
    }
  }
  /*Interface Status*/
  else if (Type_Recipient == (STANDARD_REQUEST | INTERFACE_RECIPIENT))
  {
    return (uint8_t *)&StatusInfo;
 80015ca:	4618      	mov	r0, r3
  {
    return NULL;
  }
  pUser_Standard_Requests->User_GetStatus();
  return (uint8_t *)&StatusInfo;
}
 80015cc:	bd08      	pop	{r3, pc}
 80015ce:	bf00      	nop
 80015d0:	200006d8 	.word	0x200006d8
 80015d4:	200006aa 	.word	0x200006aa
 80015d8:	200006d4 	.word	0x200006d4

080015dc <DataStageIn>:
* Input          : None.
* Output         : None.
* Return         : None.
*******************************************************************************/
void DataStageIn(void)
{
 80015dc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  ENDPOINT_INFO *pEPinfo = &pInformation->Ctrl_Info;
 80015de:	4b22      	ldr	r3, [pc, #136]	; (8001668 <DataStageIn+0x8c>)
 80015e0:	681c      	ldr	r4, [r3, #0]
  uint32_t save_wLength = pEPinfo->Usb_wLength;
 80015e2:	8a23      	ldrh	r3, [r4, #16]
  uint32_t ControlState = pInformation->ControlState;
 80015e4:	7a26      	ldrb	r6, [r4, #8]

  uint8_t *DataBuffer;
  uint32_t Length;

  if ((save_wLength == 0) && (ControlState == LAST_IN_DATA))
 80015e6:	b9ab      	cbnz	r3, 8001614 <DataStageIn+0x38>
 80015e8:	2e04      	cmp	r6, #4
 80015ea:	d113      	bne.n	8001614 <DataStageIn+0x38>
  {
    if(Data_Mul_MaxPacketSize == TRUE)
 80015ec:	481f      	ldr	r0, [pc, #124]	; (800166c <DataStageIn+0x90>)
 80015ee:	7801      	ldrb	r1, [r0, #0]
 80015f0:	2901      	cmp	r1, #1
 80015f2:	491f      	ldr	r1, [pc, #124]	; (8001670 <DataStageIn+0x94>)
 80015f4:	d10a      	bne.n	800160c <DataStageIn+0x30>
    {
      /* No more data to send and empty packet */
      Send0LengthData();
 80015f6:	4c1f      	ldr	r4, [pc, #124]	; (8001674 <DataStageIn+0x98>)
 80015f8:	6822      	ldr	r2, [r4, #0]
* Output         : None.
* Return         : None.
*******************************************************************************/
void NOP_Process(void)
{
}
 80015fa:	b294      	uxth	r4, r2
  if ((save_wLength == 0) && (ControlState == LAST_IN_DATA))
  {
    if(Data_Mul_MaxPacketSize == TRUE)
    {
      /* No more data to send and empty packet */
      Send0LengthData();
 80015fc:	4a1e      	ldr	r2, [pc, #120]	; (8001678 <DataStageIn+0x9c>)
 80015fe:	18a2      	adds	r2, r4, r2
 8001600:	0052      	lsls	r2, r2, #1
 8001602:	6013      	str	r3, [r2, #0]
 8001604:	2230      	movs	r2, #48	; 0x30
 8001606:	800a      	strh	r2, [r1, #0]
      ControlState = LAST_IN_DATA;
      Data_Mul_MaxPacketSize = FALSE;
 8001608:	7003      	strb	r3, [r0, #0]
 800160a:	e028      	b.n	800165e <DataStageIn+0x82>
    }
    else 
    {
      /* No more data to send so STALL the TX Status*/
      ControlState = WAIT_STATUS_OUT;
      vSetEPTxStatus(EP_TX_STALL);
 800160c:	2610      	movs	r6, #16
 800160e:	800e      	strh	r6, [r1, #0]
      Data_Mul_MaxPacketSize = FALSE;
    }
    else 
    {
      /* No more data to send so STALL the TX Status*/
      ControlState = WAIT_STATUS_OUT;
 8001610:	2607      	movs	r6, #7
 8001612:	e024      	b.n	800165e <DataStageIn+0x82>
    }
    
    goto Expect_Status_Out;
  }

  Length = pEPinfo->PacketSize;
 8001614:	8aa5      	ldrh	r5, [r4, #20]
  if (Length > save_wLength)
  {
    Length = save_wLength;
  }

  DataBuffer = (*pEPinfo->CopyData)(Length);
 8001616:	69a1      	ldr	r1, [r4, #24]
    
    goto Expect_Status_Out;
  }

  Length = pEPinfo->PacketSize;
  ControlState = (save_wLength <= Length) ? LAST_IN_DATA : IN_DATA;
 8001618:	42ab      	cmp	r3, r5
 800161a:	bf8c      	ite	hi
 800161c:	2602      	movhi	r6, #2
 800161e:	2604      	movls	r6, #4
  if (Length > save_wLength)
  {
    Length = save_wLength;
  }

  DataBuffer = (*pEPinfo->CopyData)(Length);
 8001620:	429d      	cmp	r5, r3
 8001622:	bf28      	it	cs
 8001624:	461d      	movcs	r5, r3
 8001626:	4628      	mov	r0, r5
 8001628:	4788      	blx	r1
 800162a:	4607      	mov	r7, r0
  
  UserToPMABufferCopy(DataBuffer, GetEPTxAddr(ENDP0), Length);
 800162c:	2000      	movs	r0, #0
 800162e:	f000 fcfd 	bl	800202c <GetEPTxAddr>
 8001632:	462a      	mov	r2, r5
 8001634:	4601      	mov	r1, r0
 8001636:	4638      	mov	r0, r7
 8001638:	f000 fc6e 	bl	8001f18 <UserToPMABufferCopy>

  SetEPTxCount(ENDP0, Length);
 800163c:	4629      	mov	r1, r5
 800163e:	2000      	movs	r0, #0
 8001640:	f000 fd10 	bl	8002064 <SetEPTxCount>

  pEPinfo->Usb_wLength -= Length;
 8001644:	8a20      	ldrh	r0, [r4, #16]
  pEPinfo->Usb_wOffset += Length;
 8001646:	8a63      	ldrh	r3, [r4, #18]
  
  UserToPMABufferCopy(DataBuffer, GetEPTxAddr(ENDP0), Length);

  SetEPTxCount(ENDP0, Length);

  pEPinfo->Usb_wLength -= Length;
 8001648:	1b42      	subs	r2, r0, r5
  pEPinfo->Usb_wOffset += Length;
 800164a:	18ed      	adds	r5, r5, r3
  vSetEPTxStatus(EP_TX_VALID);
 800164c:	4808      	ldr	r0, [pc, #32]	; (8001670 <DataStageIn+0x94>)

  USB_StatusOut();/* Expect the host to abort the data IN stage */
 800164e:	4b0b      	ldr	r3, [pc, #44]	; (800167c <DataStageIn+0xa0>)
  
  UserToPMABufferCopy(DataBuffer, GetEPTxAddr(ENDP0), Length);

  SetEPTxCount(ENDP0, Length);

  pEPinfo->Usb_wLength -= Length;
 8001650:	8222      	strh	r2, [r4, #16]
  pEPinfo->Usb_wOffset += Length;
  vSetEPTxStatus(EP_TX_VALID);
 8001652:	2130      	movs	r1, #48	; 0x30

  USB_StatusOut();/* Expect the host to abort the data IN stage */
 8001654:	f44f 5240 	mov.w	r2, #12288	; 0x3000

  SetEPTxCount(ENDP0, Length);

  pEPinfo->Usb_wLength -= Length;
  pEPinfo->Usb_wOffset += Length;
  vSetEPTxStatus(EP_TX_VALID);
 8001658:	8001      	strh	r1, [r0, #0]
  UserToPMABufferCopy(DataBuffer, GetEPTxAddr(ENDP0), Length);

  SetEPTxCount(ENDP0, Length);

  pEPinfo->Usb_wLength -= Length;
  pEPinfo->Usb_wOffset += Length;
 800165a:	8265      	strh	r5, [r4, #18]
  vSetEPTxStatus(EP_TX_VALID);

  USB_StatusOut();/* Expect the host to abort the data IN stage */
 800165c:	801a      	strh	r2, [r3, #0]

Expect_Status_Out:
  pInformation->ControlState = ControlState;
 800165e:	4b02      	ldr	r3, [pc, #8]	; (8001668 <DataStageIn+0x8c>)
 8001660:	6818      	ldr	r0, [r3, #0]
 8001662:	7206      	strb	r6, [r0, #8]
 8001664:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8001666:	bf00      	nop
 8001668:	200006d8 	.word	0x200006d8
 800166c:	2000027c 	.word	0x2000027c
 8001670:	200006e0 	.word	0x200006e0
 8001674:	40005c50 	.word	0x40005c50
 8001678:	20003002 	.word	0x20003002
 800167c:	200006de 	.word	0x200006de

08001680 <Standard_SetConfiguration>:
* Output         : None.
* Return         : Return USB_SUCCESS, if the request is performed.
*                  Return USB_UNSUPPORT, if the request is invalid.
*******************************************************************************/
RESULT Standard_SetConfiguration(void)
{
 8001680:	b510      	push	{r4, lr}

  if ((pInformation->USBwValue0 <=
 8001682:	4b0a      	ldr	r3, [pc, #40]	; (80016ac <Standard_SetConfiguration+0x2c>)
      Device_Table.Total_Configuration) && (pInformation->USBwValue1 == 0)
 8001684:	490a      	ldr	r1, [pc, #40]	; (80016b0 <Standard_SetConfiguration+0x30>)
*                  Return USB_UNSUPPORT, if the request is invalid.
*******************************************************************************/
RESULT Standard_SetConfiguration(void)
{

  if ((pInformation->USBwValue0 <=
 8001686:	6818      	ldr	r0, [r3, #0]
 8001688:	784b      	ldrb	r3, [r1, #1]
 800168a:	78c2      	ldrb	r2, [r0, #3]
 800168c:	4293      	cmp	r3, r2
 800168e:	d30a      	bcc.n	80016a6 <Standard_SetConfiguration+0x26>
      Device_Table.Total_Configuration) && (pInformation->USBwValue1 == 0)
 8001690:	7881      	ldrb	r1, [r0, #2]
 8001692:	b941      	cbnz	r1, 80016a6 <Standard_SetConfiguration+0x26>
      && (pInformation->USBwIndex == 0)) /*call Back usb spec 2.0*/
 8001694:	8884      	ldrh	r4, [r0, #4]
 8001696:	b934      	cbnz	r4, 80016a6 <Standard_SetConfiguration+0x26>
  {
    pInformation->Current_Configuration = pInformation->USBwValue0;
 8001698:	7282      	strb	r2, [r0, #10]
    pUser_Standard_Requests->User_SetConfiguration();
 800169a:	4806      	ldr	r0, [pc, #24]	; (80016b4 <Standard_SetConfiguration+0x34>)
 800169c:	6802      	ldr	r2, [r0, #0]
 800169e:	6853      	ldr	r3, [r2, #4]
 80016a0:	4798      	blx	r3
    return USB_SUCCESS;
 80016a2:	4620      	mov	r0, r4
 80016a4:	bd10      	pop	{r4, pc}
  }
  else
  {
    return USB_UNSUPPORT;
 80016a6:	2002      	movs	r0, #2
  }
}
 80016a8:	bd10      	pop	{r4, pc}
 80016aa:	bf00      	nop
 80016ac:	200006d8 	.word	0x200006d8
 80016b0:	2000024c 	.word	0x2000024c
 80016b4:	200006d4 	.word	0x200006d4

080016b8 <Standard_SetInterface>:
* Output         : None.
* Return         : - Return USB_SUCCESS, if the request is performed.
*                  - Return USB_UNSUPPORT, if the request is invalid.
*******************************************************************************/
RESULT Standard_SetInterface(void)
{
 80016b8:	b538      	push	{r3, r4, r5, lr}
  RESULT Re;
  /*Test if the specified Interface and Alternate Setting are supported by
    the application Firmware*/
  Re = (*pProperty->Class_Get_Interface_Setting)(pInformation->USBwIndex0, pInformation->USBwValue0);
 80016ba:	4a0e      	ldr	r2, [pc, #56]	; (80016f4 <Standard_SetInterface+0x3c>)
 80016bc:	4c0e      	ldr	r4, [pc, #56]	; (80016f8 <Standard_SetInterface+0x40>)
 80016be:	6810      	ldr	r0, [r2, #0]
 80016c0:	6823      	ldr	r3, [r4, #0]
 80016c2:	6982      	ldr	r2, [r0, #24]
 80016c4:	78d9      	ldrb	r1, [r3, #3]
 80016c6:	7958      	ldrb	r0, [r3, #5]
 80016c8:	4790      	blx	r2

  if (pInformation->Current_Configuration != 0)
 80016ca:	6821      	ldr	r1, [r4, #0]
 80016cc:	7a8b      	ldrb	r3, [r1, #10]
 80016ce:	b17b      	cbz	r3, 80016f0 <Standard_SetInterface+0x38>
  {
    if ((Re != USB_SUCCESS) || (pInformation->USBwIndex1 != 0)
 80016d0:	b970      	cbnz	r0, 80016f0 <Standard_SetInterface+0x38>
 80016d2:	7908      	ldrb	r0, [r1, #4]
 80016d4:	b960      	cbnz	r0, 80016f0 <Standard_SetInterface+0x38>
        || (pInformation->USBwValue1 != 0))
 80016d6:	788d      	ldrb	r5, [r1, #2]
 80016d8:	b955      	cbnz	r5, 80016f0 <Standard_SetInterface+0x38>
    {
      return  USB_UNSUPPORT;
    }
    else if (Re == USB_SUCCESS)
    {
      pUser_Standard_Requests->User_SetInterface();
 80016da:	4a08      	ldr	r2, [pc, #32]	; (80016fc <Standard_SetInterface+0x44>)
 80016dc:	6811      	ldr	r1, [r2, #0]
 80016de:	68cb      	ldr	r3, [r1, #12]
 80016e0:	4798      	blx	r3
      pInformation->Current_Interface = pInformation->USBwIndex0;
 80016e2:	6820      	ldr	r0, [r4, #0]
 80016e4:	7942      	ldrb	r2, [r0, #5]
      pInformation->Current_AlternateSetting = pInformation->USBwValue0;
 80016e6:	78c1      	ldrb	r1, [r0, #3]
      return  USB_UNSUPPORT;
    }
    else if (Re == USB_SUCCESS)
    {
      pUser_Standard_Requests->User_SetInterface();
      pInformation->Current_Interface = pInformation->USBwIndex0;
 80016e8:	72c2      	strb	r2, [r0, #11]
      pInformation->Current_AlternateSetting = pInformation->USBwValue0;
 80016ea:	7301      	strb	r1, [r0, #12]
      return USB_SUCCESS;
 80016ec:	4628      	mov	r0, r5
 80016ee:	bd38      	pop	{r3, r4, r5, pc}
    }

  }

  return USB_UNSUPPORT;
 80016f0:	2002      	movs	r0, #2
}
 80016f2:	bd38      	pop	{r3, r4, r5, pc}
 80016f4:	200006b0 	.word	0x200006b0
 80016f8:	200006d8 	.word	0x200006d8
 80016fc:	200006d4 	.word	0x200006d4

08001700 <Standard_ClearFeature>:
* Output         : None.
* Return         : - Return USB_SUCCESS, if the request is performed.
*                  - Return USB_UNSUPPORT, if the request is invalid.
*******************************************************************************/
RESULT Standard_ClearFeature(void)
{
 8001700:	b510      	push	{r4, lr}
  uint32_t     Type_Rec = Type_Recipient;
 8001702:	4b32      	ldr	r3, [pc, #200]	; (80017cc <Standard_ClearFeature+0xcc>)
 8001704:	681b      	ldr	r3, [r3, #0]
 8001706:	7818      	ldrb	r0, [r3, #0]
  uint32_t     Status;


  if (Type_Rec == (STANDARD_REQUEST | DEVICE_RECIPIENT))
 8001708:	f010 007f 	ands.w	r0, r0, #127	; 0x7f
 800170c:	d104      	bne.n	8001718 <Standard_ClearFeature+0x18>
  {/*Device Clear Feature*/
    ClrBit(pInformation->Current_Feature, 5);
 800170e:	7a5a      	ldrb	r2, [r3, #9]
 8001710:	f022 0120 	bic.w	r1, r2, #32
 8001714:	7259      	strb	r1, [r3, #9]
    return USB_SUCCESS;
 8001716:	bd10      	pop	{r4, pc}
  }
  else if (Type_Rec == (STANDARD_REQUEST | ENDPOINT_RECIPIENT))
 8001718:	2802      	cmp	r0, #2
 800171a:	d155      	bne.n	80017c8 <Standard_ClearFeature+0xc8>
    DEVICE* pDev;
    uint32_t Related_Endpoint;
    uint32_t wIndex0;
    uint32_t rEP;

    if ((pInformation->USBwValue != ENDPOINT_STALL)
 800171c:	885a      	ldrh	r2, [r3, #2]
 800171e:	2a00      	cmp	r2, #0
 8001720:	d153      	bne.n	80017ca <Standard_ClearFeature+0xca>
        || (pInformation->USBwIndex1 != 0))
 8001722:	7919      	ldrb	r1, [r3, #4]
 8001724:	2900      	cmp	r1, #0
 8001726:	d150      	bne.n	80017ca <Standard_ClearFeature+0xca>
    {
      return USB_UNSUPPORT;
    }

    pDev = &Device_Table;
    wIndex0 = pInformation->USBwIndex0;
 8001728:	795a      	ldrb	r2, [r3, #5]
    rEP = wIndex0 & ~0x80;
 800172a:	f022 0080 	bic.w	r0, r2, #128	; 0x80
 800172e:	ea4f 0480 	mov.w	r4, r0, lsl #2

    if (ValBit(pInformation->USBwIndex0, 7))
    {
      /*Get Status of endpoint & stall the request if the related_ENdpoint
      is Disabled*/
      Status = _GetEPTxStatus(Related_Endpoint);
 8001732:	f104 4180 	add.w	r1, r4, #1073741824	; 0x40000000
 8001736:	f501 44b8 	add.w	r4, r1, #23552	; 0x5c00
 800173a:	6821      	ldr	r1, [r4, #0]
    else
    {
      Status = _GetEPRxStatus(Related_Endpoint);
    }

    if ((rEP >= pDev->Total_Endpoint) || (Status == 0)
 800173c:	4c24      	ldr	r4, [pc, #144]	; (80017d0 <Standard_ClearFeature+0xd0>)
    pDev = &Device_Table;
    wIndex0 = pInformation->USBwIndex0;
    rEP = wIndex0 & ~0x80;
    Related_Endpoint = ENDP0 + rEP;

    if (ValBit(pInformation->USBwIndex0, 7))
 800173e:	f012 0f80 	tst.w	r2, #128	; 0x80
    else
    {
      Status = _GetEPRxStatus(Related_Endpoint);
    }

    if ((rEP >= pDev->Total_Endpoint) || (Status == 0)
 8001742:	7824      	ldrb	r4, [r4, #0]

    if (ValBit(pInformation->USBwIndex0, 7))
    {
      /*Get Status of endpoint & stall the request if the related_ENdpoint
      is Disabled*/
      Status = _GetEPTxStatus(Related_Endpoint);
 8001744:	bf14      	ite	ne
 8001746:	f001 0130 	andne.w	r1, r1, #48	; 0x30
    }
    else
    {
      Status = _GetEPRxStatus(Related_Endpoint);
 800174a:	f401 5140 	andeq.w	r1, r1, #12288	; 0x3000
    }

    if ((rEP >= pDev->Total_Endpoint) || (Status == 0)
 800174e:	42a0      	cmp	r0, r4
 8001750:	d23a      	bcs.n	80017c8 <Standard_ClearFeature+0xc8>
 8001752:	2900      	cmp	r1, #0
 8001754:	d038      	beq.n	80017c8 <Standard_ClearFeature+0xc8>
        || (pInformation->Current_Configuration == 0))
 8001756:	7a9b      	ldrb	r3, [r3, #10]
 8001758:	2b00      	cmp	r3, #0
 800175a:	d035      	beq.n	80017c8 <Standard_ClearFeature+0xc8>
 800175c:	0084      	lsls	r4, r0, #2
    {
      return USB_UNSUPPORT;
    }


    if (wIndex0 & 0x80)
 800175e:	f002 0280 	and.w	r2, r2, #128	; 0x80
    {
      /* IN endpoint */
      if (_GetTxStallStatus(Related_Endpoint ))
 8001762:	f104 4380 	add.w	r3, r4, #1073741824	; 0x40000000
    {
      return USB_UNSUPPORT;
    }


    if (wIndex0 & 0x80)
 8001766:	b2d1      	uxtb	r1, r2
    {
      /* IN endpoint */
      if (_GetTxStallStatus(Related_Endpoint ))
 8001768:	f503 44b8 	add.w	r4, r3, #23552	; 0x5c00
 800176c:	6822      	ldr	r2, [r4, #0]
    {
      return USB_UNSUPPORT;
    }


    if (wIndex0 & 0x80)
 800176e:	b161      	cbz	r1, 800178a <Standard_ClearFeature+0x8a>
    {
      /* IN endpoint */
      if (_GetTxStallStatus(Related_Endpoint ))
 8001770:	f002 0230 	and.w	r2, r2, #48	; 0x30
 8001774:	2a10      	cmp	r2, #16
 8001776:	d121      	bne.n	80017bc <Standard_ClearFeature+0xbc>
      {
        ClearDTOG_TX(Related_Endpoint);
 8001778:	b2c4      	uxtb	r4, r0
 800177a:	4620      	mov	r0, r4
 800177c:	f000 fc44 	bl	8002008 <ClearDTOG_TX>
        SetEPTxStatus(Related_Endpoint, EP_TX_VALID);
 8001780:	4620      	mov	r0, r4
 8001782:	2130      	movs	r1, #48	; 0x30
 8001784:	f000 fbf1 	bl	8001f6a <SetEPTxStatus>
 8001788:	e018      	b.n	80017bc <Standard_ClearFeature+0xbc>
      }
    }
    else
    {
      /* OUT endpoint */
      if (_GetRxStallStatus(Related_Endpoint))
 800178a:	f402 5140 	and.w	r1, r2, #12288	; 0x3000
 800178e:	f5b1 5f80 	cmp.w	r1, #4096	; 0x1000
 8001792:	d113      	bne.n	80017bc <Standard_ClearFeature+0xbc>
      {
        if (Related_Endpoint == ENDP0)
 8001794:	b928      	cbnz	r0, 80017a2 <Standard_ClearFeature+0xa2>
        {
          /* After clear the STALL, enable the default endpoint receiver */
          SetEPRxCount(Related_Endpoint, Device_Property.MaxPacketSize);
 8001796:	4b0f      	ldr	r3, [pc, #60]	; (80017d4 <Standard_ClearFeature+0xd4>)
 8001798:	f893 102c 	ldrb.w	r1, [r3, #44]	; 0x2c
 800179c:	f000 fc70 	bl	8002080 <SetEPRxCount>
 80017a0:	e001      	b.n	80017a6 <Standard_ClearFeature+0xa6>
          _SetEPRxStatus(Related_Endpoint, EP_RX_VALID);
        }
        else
        {
          ClearDTOG_RX(Related_Endpoint);
 80017a2:	f000 fc1f 	bl	8001fe4 <ClearDTOG_RX>
          _SetEPRxStatus(Related_Endpoint, EP_RX_VALID);
 80017a6:	6820      	ldr	r0, [r4, #0]
 80017a8:	f64b 728f 	movw	r2, #49039	; 0xbf8f
 80017ac:	4002      	ands	r2, r0
 80017ae:	f482 5140 	eor.w	r1, r2, #12288	; 0x3000
 80017b2:	f441 4300 	orr.w	r3, r1, #32768	; 0x8000
 80017b6:	f043 0080 	orr.w	r0, r3, #128	; 0x80
 80017ba:	6020      	str	r0, [r4, #0]
        }
      }
    }
    pUser_Standard_Requests->User_ClearFeature();
 80017bc:	4906      	ldr	r1, [pc, #24]	; (80017d8 <Standard_ClearFeature+0xd8>)
 80017be:	680b      	ldr	r3, [r1, #0]
 80017c0:	6958      	ldr	r0, [r3, #20]
 80017c2:	4780      	blx	r0
    return USB_SUCCESS;
 80017c4:	2000      	movs	r0, #0
 80017c6:	bd10      	pop	{r4, pc}
  }

  return USB_UNSUPPORT;
 80017c8:	2002      	movs	r0, #2
}
 80017ca:	bd10      	pop	{r4, pc}
 80017cc:	200006d8 	.word	0x200006d8
 80017d0:	2000024c 	.word	0x2000024c
 80017d4:	200001f8 	.word	0x200001f8
 80017d8:	200006d4 	.word	0x200006d4

080017dc <Standard_SetEndPointFeature>:
* Output         : None.
* Return         : - Return USB_SUCCESS, if the request is performed.
*                  - Return USB_UNSUPPORT, if the request is invalid.
*******************************************************************************/
RESULT Standard_SetEndPointFeature(void)
{
 80017dc:	b510      	push	{r4, lr}
  uint32_t    wIndex0;
  uint32_t    Related_Endpoint;
  uint32_t    rEP;
  uint32_t    Status;

  wIndex0 = pInformation->USBwIndex0;
 80017de:	4b1f      	ldr	r3, [pc, #124]	; (800185c <Standard_SetEndPointFeature+0x80>)
 80017e0:	6819      	ldr	r1, [r3, #0]
 80017e2:	794a      	ldrb	r2, [r1, #5]
  rEP = wIndex0 & ~0x80;
 80017e4:	f022 0380 	bic.w	r3, r2, #128	; 0x80
 80017e8:	ea4f 0083 	mov.w	r0, r3, lsl #2

  if (ValBit(pInformation->USBwIndex0, 7))
  {
    /* get Status of endpoint & stall the request if the related_ENdpoint
    is Disabled*/
    Status = _GetEPTxStatus(Related_Endpoint);
 80017ec:	f100 4480 	add.w	r4, r0, #1073741824	; 0x40000000
 80017f0:	f504 40b8 	add.w	r0, r4, #23552	; 0x5c00
  else
  {
    Status = _GetEPRxStatus(Related_Endpoint);
  }

  if (Related_Endpoint >= Device_Table.Total_Endpoint
 80017f4:	4c1a      	ldr	r4, [pc, #104]	; (8001860 <Standard_SetEndPointFeature+0x84>)

  if (ValBit(pInformation->USBwIndex0, 7))
  {
    /* get Status of endpoint & stall the request if the related_ENdpoint
    is Disabled*/
    Status = _GetEPTxStatus(Related_Endpoint);
 80017f6:	6800      	ldr	r0, [r0, #0]
  else
  {
    Status = _GetEPRxStatus(Related_Endpoint);
  }

  if (Related_Endpoint >= Device_Table.Total_Endpoint
 80017f8:	7824      	ldrb	r4, [r4, #0]

  wIndex0 = pInformation->USBwIndex0;
  rEP = wIndex0 & ~0x80;
  Related_Endpoint = ENDP0 + rEP;

  if (ValBit(pInformation->USBwIndex0, 7))
 80017fa:	f012 0f80 	tst.w	r2, #128	; 0x80
  {
    /* get Status of endpoint & stall the request if the related_ENdpoint
    is Disabled*/
    Status = _GetEPTxStatus(Related_Endpoint);
 80017fe:	bf14      	ite	ne
 8001800:	f000 0030 	andne.w	r0, r0, #48	; 0x30
  }
  else
  {
    Status = _GetEPRxStatus(Related_Endpoint);
 8001804:	f400 5040 	andeq.w	r0, r0, #12288	; 0x3000
  }

  if (Related_Endpoint >= Device_Table.Total_Endpoint
 8001808:	42a3      	cmp	r3, r4
 800180a:	d224      	bcs.n	8001856 <Standard_SetEndPointFeature+0x7a>
      || pInformation->USBwValue != 0 || Status == 0
 800180c:	884c      	ldrh	r4, [r1, #2]
 800180e:	bb14      	cbnz	r4, 8001856 <Standard_SetEndPointFeature+0x7a>
 8001810:	b308      	cbz	r0, 8001856 <Standard_SetEndPointFeature+0x7a>
      || pInformation->Current_Configuration == 0)
 8001812:	7a89      	ldrb	r1, [r1, #10]
 8001814:	b1f9      	cbz	r1, 8001856 <Standard_SetEndPointFeature+0x7a>
 8001816:	009b      	lsls	r3, r3, #2
  else
  {
    if (wIndex0 & 0x80)
    {
      /* IN endpoint */
      _SetEPTxStatus(Related_Endpoint, EP_TX_STALL);
 8001818:	f103 4180 	add.w	r1, r3, #1073741824	; 0x40000000
  {
    return USB_UNSUPPORT;
  }
  else
  {
    if (wIndex0 & 0x80)
 800181c:	f002 0280 	and.w	r2, r2, #128	; 0x80
    {
      /* IN endpoint */
      _SetEPTxStatus(Related_Endpoint, EP_TX_STALL);
 8001820:	f501 43b8 	add.w	r3, r1, #23552	; 0x5c00
  {
    return USB_UNSUPPORT;
  }
  else
  {
    if (wIndex0 & 0x80)
 8001824:	b2d0      	uxtb	r0, r2
    {
      /* IN endpoint */
      _SetEPTxStatus(Related_Endpoint, EP_TX_STALL);
 8001826:	6819      	ldr	r1, [r3, #0]
  {
    return USB_UNSUPPORT;
  }
  else
  {
    if (wIndex0 & 0x80)
 8001828:	b128      	cbz	r0, 8001836 <Standard_SetEndPointFeature+0x5a>
    {
      /* IN endpoint */
      _SetEPTxStatus(Related_Endpoint, EP_TX_STALL);
 800182a:	f648 72bf 	movw	r2, #36799	; 0x8fbf
 800182e:	400a      	ands	r2, r1
 8001830:	f082 0010 	eor.w	r0, r2, #16
 8001834:	e004      	b.n	8001840 <Standard_SetEndPointFeature+0x64>
    }

    else
    {
      /* OUT endpoint */
      _SetEPRxStatus(Related_Endpoint, EP_RX_STALL);
 8001836:	f64b 728f 	movw	r2, #49039	; 0xbf8f
 800183a:	400a      	ands	r2, r1
 800183c:	f482 5080 	eor.w	r0, r2, #4096	; 0x1000
 8001840:	f440 4100 	orr.w	r1, r0, #32768	; 0x8000
 8001844:	f041 0080 	orr.w	r0, r1, #128	; 0x80
 8001848:	6018      	str	r0, [r3, #0]
    }
  }
  pUser_Standard_Requests->User_SetEndPointFeature();
 800184a:	4b06      	ldr	r3, [pc, #24]	; (8001864 <Standard_SetEndPointFeature+0x88>)
 800184c:	681a      	ldr	r2, [r3, #0]
 800184e:	6991      	ldr	r1, [r2, #24]
 8001850:	4788      	blx	r1
  return USB_SUCCESS;
 8001852:	2000      	movs	r0, #0
 8001854:	bd10      	pop	{r4, pc}

  if (Related_Endpoint >= Device_Table.Total_Endpoint
      || pInformation->USBwValue != 0 || Status == 0
      || pInformation->Current_Configuration == 0)
  {
    return USB_UNSUPPORT;
 8001856:	2002      	movs	r0, #2
      _SetEPRxStatus(Related_Endpoint, EP_RX_STALL);
    }
  }
  pUser_Standard_Requests->User_SetEndPointFeature();
  return USB_SUCCESS;
}
 8001858:	bd10      	pop	{r4, pc}
 800185a:	bf00      	nop
 800185c:	200006d8 	.word	0x200006d8
 8001860:	2000024c 	.word	0x2000024c
 8001864:	200006d4 	.word	0x200006d4

08001868 <Standard_SetDeviceFeature>:
* Output         : None.
* Return         : - Return USB_SUCCESS, if the request is performed.
*                  - Return USB_UNSUPPORT, if the request is invalid.
*******************************************************************************/
RESULT Standard_SetDeviceFeature(void)
{
 8001868:	b508      	push	{r3, lr}
  SetBit(pInformation->Current_Feature, 5);
 800186a:	4b06      	ldr	r3, [pc, #24]	; (8001884 <Standard_SetDeviceFeature+0x1c>)
 800186c:	6818      	ldr	r0, [r3, #0]
  pUser_Standard_Requests->User_SetDeviceFeature();
 800186e:	4b06      	ldr	r3, [pc, #24]	; (8001888 <Standard_SetDeviceFeature+0x20>)
* Return         : - Return USB_SUCCESS, if the request is performed.
*                  - Return USB_UNSUPPORT, if the request is invalid.
*******************************************************************************/
RESULT Standard_SetDeviceFeature(void)
{
  SetBit(pInformation->Current_Feature, 5);
 8001870:	7a42      	ldrb	r2, [r0, #9]
 8001872:	f042 0120 	orr.w	r1, r2, #32
 8001876:	7241      	strb	r1, [r0, #9]
  pUser_Standard_Requests->User_SetDeviceFeature();
 8001878:	6818      	ldr	r0, [r3, #0]
 800187a:	69c2      	ldr	r2, [r0, #28]
 800187c:	4790      	blx	r2
  return USB_SUCCESS;
}
 800187e:	2000      	movs	r0, #0
 8001880:	bd08      	pop	{r3, pc}
 8001882:	bf00      	nop
 8001884:	200006d8 	.word	0x200006d8
 8001888:	200006d4 	.word	0x200006d4

0800188c <Standard_GetDescriptorData>:
*******************************************************************************/
uint8_t *Standard_GetDescriptorData(uint16_t Length, ONE_DESCRIPTOR *pDesc)
{
  uint32_t  wOffset;

  wOffset = pInformation->Ctrl_Info.Usb_wOffset;
 800188c:	4b05      	ldr	r3, [pc, #20]	; (80018a4 <Standard_GetDescriptorData+0x18>)
 800188e:	681a      	ldr	r2, [r3, #0]
 8001890:	8a53      	ldrh	r3, [r2, #18]
  if (Length == 0)
 8001892:	b918      	cbnz	r0, 800189c <Standard_GetDescriptorData+0x10>
  {
    pInformation->Ctrl_Info.Usb_wLength = pDesc->Descriptor_Size - wOffset;
 8001894:	8889      	ldrh	r1, [r1, #4]
 8001896:	1acb      	subs	r3, r1, r3
 8001898:	8213      	strh	r3, [r2, #16]
    return 0;
 800189a:	4770      	bx	lr
  }

  return pDesc->Descriptor + wOffset;
 800189c:	6808      	ldr	r0, [r1, #0]
 800189e:	18c0      	adds	r0, r0, r3
}
 80018a0:	4770      	bx	lr
 80018a2:	bf00      	nop
 80018a4:	200006d8 	.word	0x200006d8

080018a8 <Post0_Process>:
* Output         : None.
* Return         : - 0 if the control State is in PAUSE
*                  - 1 if not.
*******************************************************************************/
uint8_t Post0_Process(void)
{
 80018a8:	b508      	push	{r3, lr}
   
  SetEPRxCount(ENDP0, Device_Property.MaxPacketSize);
 80018aa:	4b0b      	ldr	r3, [pc, #44]	; (80018d8 <Post0_Process+0x30>)
 80018ac:	2000      	movs	r0, #0
 80018ae:	f893 102c 	ldrb.w	r1, [r3, #44]	; 0x2c
 80018b2:	f000 fbe5 	bl	8002080 <SetEPRxCount>

  if (pInformation->ControlState == STALLED)
 80018b6:	4809      	ldr	r0, [pc, #36]	; (80018dc <Post0_Process+0x34>)
 80018b8:	6801      	ldr	r1, [r0, #0]
 80018ba:	7a08      	ldrb	r0, [r1, #8]
 80018bc:	2808      	cmp	r0, #8
 80018be:	d106      	bne.n	80018ce <Post0_Process+0x26>
  {
    vSetEPRxStatus(EP_RX_STALL);
 80018c0:	4b07      	ldr	r3, [pc, #28]	; (80018e0 <Post0_Process+0x38>)
 80018c2:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80018c6:	801a      	strh	r2, [r3, #0]
    vSetEPTxStatus(EP_TX_STALL);
 80018c8:	4a06      	ldr	r2, [pc, #24]	; (80018e4 <Post0_Process+0x3c>)
 80018ca:	2110      	movs	r1, #16
 80018cc:	8011      	strh	r1, [r2, #0]
  }

  return (pInformation->ControlState == PAUSE);
}
 80018ce:	f1b0 0309 	subs.w	r3, r0, #9
 80018d2:	4258      	negs	r0, r3
 80018d4:	4158      	adcs	r0, r3
 80018d6:	bd08      	pop	{r3, pc}
 80018d8:	200001f8 	.word	0x200001f8
 80018dc:	200006d8 	.word	0x200006d8
 80018e0:	200006de 	.word	0x200006de
 80018e4:	200006e0 	.word	0x200006e0

080018e8 <Out0_Process>:
* Input          : None.
* Output         : None.
* Return         : Post0_Process.
*******************************************************************************/
uint8_t Out0_Process(void)
{
 80018e8:	b570      	push	{r4, r5, r6, lr}
  uint32_t ControlState = pInformation->ControlState;
 80018ea:	4b2e      	ldr	r3, [pc, #184]	; (80019a4 <Out0_Process+0xbc>)
 80018ec:	681c      	ldr	r4, [r3, #0]
 80018ee:	7a20      	ldrb	r0, [r4, #8]

  if ((ControlState == IN_DATA) || (ControlState == LAST_IN_DATA))
 80018f0:	2802      	cmp	r0, #2
 80018f2:	d04f      	beq.n	8001994 <Out0_Process+0xac>
 80018f4:	2804      	cmp	r0, #4
 80018f6:	d04d      	beq.n	8001994 <Out0_Process+0xac>
  {
    /* host aborts the transfer before finish */
    ControlState = STALLED;
  }
  else if ((ControlState == OUT_DATA) || (ControlState == LAST_OUT_DATA))
 80018f8:	2803      	cmp	r0, #3
 80018fa:	d001      	beq.n	8001900 <Out0_Process+0x18>
 80018fc:	2805      	cmp	r0, #5
 80018fe:	d143      	bne.n	8001988 <Out0_Process+0xa0>
  ENDPOINT_INFO *pEPinfo = &pInformation->Ctrl_Info;
  uint32_t save_rLength;

  save_rLength = pEPinfo->Usb_rLength;

  if (pEPinfo->CopyData && save_rLength)
 8001900:	69a1      	ldr	r1, [r4, #24]
void DataStageOut(void)
{
  ENDPOINT_INFO *pEPinfo = &pInformation->Ctrl_Info;
  uint32_t save_rLength;

  save_rLength = pEPinfo->Usb_rLength;
 8001902:	8a20      	ldrh	r0, [r4, #16]

  if (pEPinfo->CopyData && save_rLength)
 8001904:	b1a9      	cbz	r1, 8001932 <Out0_Process+0x4a>
 8001906:	b1a0      	cbz	r0, 8001932 <Out0_Process+0x4a>
  {
    uint8_t *Buffer;
    uint32_t Length;

    Length = pEPinfo->PacketSize;
 8001908:	8aa5      	ldrh	r5, [r4, #20]
    if (Length > save_rLength)
    {
      Length = save_rLength;
    }

    Buffer = (*pEPinfo->CopyData)(Length);
 800190a:	4285      	cmp	r5, r0
 800190c:	bf28      	it	cs
 800190e:	4605      	movcs	r5, r0
 8001910:	4628      	mov	r0, r5
 8001912:	4788      	blx	r1
    pEPinfo->Usb_rLength -= Length;
 8001914:	8a22      	ldrh	r2, [r4, #16]
    if (Length > save_rLength)
    {
      Length = save_rLength;
    }

    Buffer = (*pEPinfo->CopyData)(Length);
 8001916:	4606      	mov	r6, r0
    pEPinfo->Usb_rLength -= Length;
    pEPinfo->Usb_rOffset += Length;
 8001918:	8a60      	ldrh	r0, [r4, #18]
    {
      Length = save_rLength;
    }

    Buffer = (*pEPinfo->CopyData)(Length);
    pEPinfo->Usb_rLength -= Length;
 800191a:	1b53      	subs	r3, r2, r5
    pEPinfo->Usb_rOffset += Length;
 800191c:	1829      	adds	r1, r5, r0
 800191e:	8261      	strh	r1, [r4, #18]
    {
      Length = save_rLength;
    }

    Buffer = (*pEPinfo->CopyData)(Length);
    pEPinfo->Usb_rLength -= Length;
 8001920:	8223      	strh	r3, [r4, #16]
    pEPinfo->Usb_rOffset += Length;
    PMAToUserBufferCopy(Buffer, GetEPRxAddr(ENDP0), Length);
 8001922:	2000      	movs	r0, #0
 8001924:	f000 fb90 	bl	8002048 <GetEPRxAddr>
 8001928:	462a      	mov	r2, r5
 800192a:	4601      	mov	r1, r0
 800192c:	4630      	mov	r0, r6
 800192e:	f000 fb0a 	bl	8001f46 <PMAToUserBufferCopy>

  }

  if (pEPinfo->Usb_rLength != 0)
 8001932:	8a22      	ldrh	r2, [r4, #16]
 8001934:	b152      	cbz	r2, 800194c <Out0_Process+0x64>
  {
    vSetEPRxStatus(EP_RX_VALID);/* re-enable for next data reception */
 8001936:	4b1c      	ldr	r3, [pc, #112]	; (80019a8 <Out0_Process+0xc0>)
 8001938:	f44f 5040 	mov.w	r0, #12288	; 0x3000
 800193c:	8018      	strh	r0, [r3, #0]
    SetEPTxCount(ENDP0, 0);
 800193e:	2000      	movs	r0, #0
 8001940:	4601      	mov	r1, r0
 8001942:	f000 fb8f 	bl	8002064 <SetEPTxCount>
    vSetEPTxStatus(EP_TX_VALID);/* Expect the host to abort the data OUT stage */
 8001946:	4a19      	ldr	r2, [pc, #100]	; (80019ac <Out0_Process+0xc4>)
 8001948:	2130      	movs	r1, #48	; 0x30
 800194a:	8011      	strh	r1, [r2, #0]
  }
  /* Set the next State*/
  if (pEPinfo->Usb_rLength >= pEPinfo->PacketSize)
 800194c:	8a20      	ldrh	r0, [r4, #16]
 800194e:	8aa3      	ldrh	r3, [r4, #20]
 8001950:	4914      	ldr	r1, [pc, #80]	; (80019a4 <Out0_Process+0xbc>)
 8001952:	4283      	cmp	r3, r0
 8001954:	d802      	bhi.n	800195c <Out0_Process+0x74>
  {
    pInformation->ControlState = OUT_DATA;
 8001956:	680b      	ldr	r3, [r1, #0]
 8001958:	2203      	movs	r2, #3
 800195a:	e002      	b.n	8001962 <Out0_Process+0x7a>
  }
  else
  {
    if (pEPinfo->Usb_rLength > 0)
 800195c:	b118      	cbz	r0, 8001966 <Out0_Process+0x7e>
    {
      pInformation->ControlState = LAST_OUT_DATA;
 800195e:	680b      	ldr	r3, [r1, #0]
 8001960:	2205      	movs	r2, #5
 8001962:	721a      	strb	r2, [r3, #8]
 8001964:	e00c      	b.n	8001980 <Out0_Process+0x98>
    }
    else if (pEPinfo->Usb_rLength == 0)
    {
      pInformation->ControlState = WAIT_STATUS_IN;
 8001966:	680a      	ldr	r2, [r1, #0]
 8001968:	2306      	movs	r3, #6
      USB_StatusIn();
 800196a:	4911      	ldr	r1, [pc, #68]	; (80019b0 <Out0_Process+0xc8>)
    {
      pInformation->ControlState = LAST_OUT_DATA;
    }
    else if (pEPinfo->Usb_rLength == 0)
    {
      pInformation->ControlState = WAIT_STATUS_IN;
 800196c:	7213      	strb	r3, [r2, #8]
      USB_StatusIn();
 800196e:	680a      	ldr	r2, [r1, #0]
 8001970:	4910      	ldr	r1, [pc, #64]	; (80019b4 <Out0_Process+0xcc>)
* Output         : None.
* Return         : None.
*******************************************************************************/
void NOP_Process(void)
{
}
 8001972:	b293      	uxth	r3, r2
      pInformation->ControlState = LAST_OUT_DATA;
    }
    else if (pEPinfo->Usb_rLength == 0)
    {
      pInformation->ControlState = WAIT_STATUS_IN;
      USB_StatusIn();
 8001974:	185a      	adds	r2, r3, r1
 8001976:	0053      	lsls	r3, r2, #1
 8001978:	490c      	ldr	r1, [pc, #48]	; (80019ac <Out0_Process+0xc4>)
 800197a:	6018      	str	r0, [r3, #0]
 800197c:	2030      	movs	r0, #48	; 0x30
 800197e:	8008      	strh	r0, [r1, #0]
    ControlState = STALLED;
  }
  else if ((ControlState == OUT_DATA) || (ControlState == LAST_OUT_DATA))
  {
    DataStageOut();
    ControlState = pInformation->ControlState; /* may be changed outside the function */
 8001980:	4808      	ldr	r0, [pc, #32]	; (80019a4 <Out0_Process+0xbc>)
 8001982:	6801      	ldr	r1, [r0, #0]
 8001984:	7a0b      	ldrb	r3, [r1, #8]
 8001986:	e006      	b.n	8001996 <Out0_Process+0xae>
  }

  else if (ControlState == WAIT_STATUS_OUT)
 8001988:	2807      	cmp	r0, #7
 800198a:	d103      	bne.n	8001994 <Out0_Process+0xac>
  {
    (*pProperty->Process_Status_OUT)();
 800198c:	490a      	ldr	r1, [pc, #40]	; (80019b8 <Out0_Process+0xd0>)
 800198e:	680a      	ldr	r2, [r1, #0]
 8001990:	68d3      	ldr	r3, [r2, #12]
 8001992:	4798      	blx	r3
  uint32_t ControlState = pInformation->ControlState;

  if ((ControlState == IN_DATA) || (ControlState == LAST_IN_DATA))
  {
    /* host aborts the transfer before finish */
    ControlState = STALLED;
 8001994:	2308      	movs	r3, #8
  else
  {
    ControlState = STALLED;
  }

  pInformation->ControlState = ControlState;
 8001996:	4a03      	ldr	r2, [pc, #12]	; (80019a4 <Out0_Process+0xbc>)
 8001998:	6810      	ldr	r0, [r2, #0]
 800199a:	7203      	strb	r3, [r0, #8]

  return Post0_Process();
}
 800199c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    ControlState = STALLED;
  }

  pInformation->ControlState = ControlState;

  return Post0_Process();
 80019a0:	f7ff bf82 	b.w	80018a8 <Post0_Process>
 80019a4:	200006d8 	.word	0x200006d8
 80019a8:	200006de 	.word	0x200006de
 80019ac:	200006e0 	.word	0x200006e0
 80019b0:	40005c50 	.word	0x40005c50
 80019b4:	20003002 	.word	0x20003002
 80019b8:	200006b0 	.word	0x200006b0

080019bc <Setup0_Process>:
    uint8_t* b;
    uint16_t* w;
  } pBuf;
  uint16_t offset = 1;
  
  pBuf.b = PMAAddr + (uint8_t *)(_GetEPRxAddr(ENDP0) * 2); /* *2 for 32 bits addr */
 80019bc:	4b94      	ldr	r3, [pc, #592]	; (8001c10 <Setup0_Process+0x254>)
* Input          : None.
* Output         : None.
* Return         : Post0_Process.
*******************************************************************************/
uint8_t Setup0_Process(void)
{
 80019be:	b573      	push	{r0, r1, r4, r5, r6, lr}
    uint8_t* b;
    uint16_t* w;
  } pBuf;
  uint16_t offset = 1;
  
  pBuf.b = PMAAddr + (uint8_t *)(_GetEPRxAddr(ENDP0) * 2); /* *2 for 32 bits addr */
 80019c0:	681a      	ldr	r2, [r3, #0]
 80019c2:	4994      	ldr	r1, [pc, #592]	; (8001c14 <Setup0_Process+0x258>)
* Output         : None.
* Return         : None.
*******************************************************************************/
void NOP_Process(void)
{
}
 80019c4:	b290      	uxth	r0, r2
    uint8_t* b;
    uint16_t* w;
  } pBuf;
  uint16_t offset = 1;
  
  pBuf.b = PMAAddr + (uint8_t *)(_GetEPRxAddr(ENDP0) * 2); /* *2 for 32 bits addr */
 80019c6:	1844      	adds	r4, r0, r1

  if (pInformation->ControlState != PAUSE)
 80019c8:	4e93      	ldr	r6, [pc, #588]	; (8001c18 <Setup0_Process+0x25c>)
    uint8_t* b;
    uint16_t* w;
  } pBuf;
  uint16_t offset = 1;
  
  pBuf.b = PMAAddr + (uint8_t *)(_GetEPRxAddr(ENDP0) * 2); /* *2 for 32 bits addr */
 80019ca:	0065      	lsls	r5, r4, #1
 80019cc:	682a      	ldr	r2, [r5, #0]

  if (pInformation->ControlState != PAUSE)
 80019ce:	6835      	ldr	r5, [r6, #0]
 80019d0:	7a2b      	ldrb	r3, [r5, #8]
 80019d2:	2b09      	cmp	r3, #9
 80019d4:	d015      	beq.n	8001a02 <Setup0_Process+0x46>
* Output         : None.
* Return         : None.
*******************************************************************************/
void NOP_Process(void)
{
}
 80019d6:	b290      	uxth	r0, r2
    uint8_t* b;
    uint16_t* w;
  } pBuf;
  uint16_t offset = 1;
  
  pBuf.b = PMAAddr + (uint8_t *)(_GetEPRxAddr(ENDP0) * 2); /* *2 for 32 bits addr */
 80019d8:	0041      	lsls	r1, r0, #1
 80019da:	f101 4480 	add.w	r4, r1, #1073741824	; 0x40000000
 80019de:	f504 44c0 	add.w	r4, r4, #24576	; 0x6000

  if (pInformation->ControlState != PAUSE)
  {
    pInformation->USBbmRequestType = *pBuf.b++; /* bmRequestType */
 80019e2:	7822      	ldrb	r2, [r4, #0]
 80019e4:	702a      	strb	r2, [r5, #0]
    pInformation->USBbRequest = *pBuf.b++; /* bRequest */
 80019e6:	7863      	ldrb	r3, [r4, #1]
 80019e8:	706b      	strb	r3, [r5, #1]
    pBuf.w += offset;  /* word not accessed because of 32 bits addressing */
    pInformation->USBwValue = ByteSwap(*pBuf.w++); /* wValue */
 80019ea:	88a0      	ldrh	r0, [r4, #4]
 80019ec:	f000 fb66 	bl	80020bc <ByteSwap>
 80019f0:	8068      	strh	r0, [r5, #2]
    pBuf.w += offset;  /* word not accessed because of 32 bits addressing */
    pInformation->USBwIndex  = ByteSwap(*pBuf.w++); /* wIndex */
 80019f2:	8920      	ldrh	r0, [r4, #8]
 80019f4:	6835      	ldr	r5, [r6, #0]
 80019f6:	f000 fb61 	bl	80020bc <ByteSwap>
 80019fa:	80a8      	strh	r0, [r5, #4]
    pBuf.w += offset;  /* word not accessed because of 32 bits addressing */
    pInformation->USBwLength = *pBuf.w; /* wLength */
 80019fc:	89a0      	ldrh	r0, [r4, #12]
 80019fe:	6831      	ldr	r1, [r6, #0]
 8001a00:	80c8      	strh	r0, [r1, #6]
  }

  pInformation->ControlState = SETTING_UP;
 8001a02:	4d85      	ldr	r5, [pc, #532]	; (8001c18 <Setup0_Process+0x25c>)
 8001a04:	2401      	movs	r4, #1
 8001a06:	682b      	ldr	r3, [r5, #0]
  if (pInformation->USBwLength == 0)
 8001a08:	88da      	ldrh	r2, [r3, #6]
    pInformation->USBwIndex  = ByteSwap(*pBuf.w++); /* wIndex */
    pBuf.w += offset;  /* word not accessed because of 32 bits addressing */
    pInformation->USBwLength = *pBuf.w; /* wLength */
  }

  pInformation->ControlState = SETTING_UP;
 8001a0a:	721c      	strb	r4, [r3, #8]
 8001a0c:	785c      	ldrb	r4, [r3, #1]
  if (pInformation->USBwLength == 0)
 8001a0e:	2a00      	cmp	r2, #0
 8001a10:	d164      	bne.n	8001adc <Setup0_Process+0x120>
{
  RESULT Result = USB_UNSUPPORT;
  uint32_t RequestNo = pInformation->USBbRequest;
  uint32_t ControlState;

  if (Type_Recipient == (STANDARD_REQUEST | DEVICE_RECIPIENT))
 8001a12:	7818      	ldrb	r0, [r3, #0]
 8001a14:	f010 027f 	ands.w	r2, r0, #127	; 0x7f
 8001a18:	d138      	bne.n	8001a8c <Setup0_Process+0xd0>
  {
    /* Device Request*/
    /* SET_CONFIGURATION*/
    if (RequestNo == SET_CONFIGURATION)
 8001a1a:	2c09      	cmp	r4, #9
 8001a1c:	d102      	bne.n	8001a24 <Setup0_Process+0x68>
    {
      Result = Standard_SetConfiguration();
 8001a1e:	f7ff fe2f 	bl	8001680 <Standard_SetConfiguration>
 8001a22:	e045      	b.n	8001ab0 <Setup0_Process+0xf4>
    }

    /*SET ADDRESS*/
    else if (RequestNo == SET_ADDRESS)
 8001a24:	2c05      	cmp	r4, #5
 8001a26:	d10f      	bne.n	8001a48 <Setup0_Process+0x8c>
    {
      if ((pInformation->USBwValue0 > 127) || (pInformation->USBwValue1 != 0)
 8001a28:	f993 2003 	ldrsb.w	r2, [r3, #3]
 8001a2c:	2a00      	cmp	r2, #0
 8001a2e:	da01      	bge.n	8001a34 <Setup0_Process+0x78>
          || (pInformation->USBwIndex != 0)
          || (pInformation->Current_Configuration != 0))
        /* Device Address should be 127 or less*/
      {
        ControlState = STALLED;
 8001a30:	2108      	movs	r1, #8
 8001a32:	e04f      	b.n	8001ad4 <Setup0_Process+0x118>
    }

    /*SET ADDRESS*/
    else if (RequestNo == SET_ADDRESS)
    {
      if ((pInformation->USBwValue0 > 127) || (pInformation->USBwValue1 != 0)
 8001a34:	7899      	ldrb	r1, [r3, #2]
 8001a36:	2900      	cmp	r1, #0
 8001a38:	d1fa      	bne.n	8001a30 <Setup0_Process+0x74>
          || (pInformation->USBwIndex != 0)
 8001a3a:	8898      	ldrh	r0, [r3, #4]
 8001a3c:	2800      	cmp	r0, #0
 8001a3e:	d1f7      	bne.n	8001a30 <Setup0_Process+0x74>
          || (pInformation->Current_Configuration != 0))
 8001a40:	7a9b      	ldrb	r3, [r3, #10]
 8001a42:	2b00      	cmp	r3, #0
 8001a44:	d038      	beq.n	8001ab8 <Setup0_Process+0xfc>
 8001a46:	e7f3      	b.n	8001a30 <Setup0_Process+0x74>
      {
        Result = USB_SUCCESS;
      }
    }
    /*SET FEATURE for Device*/
    else if (RequestNo == SET_FEATURE)
 8001a48:	2c03      	cmp	r4, #3
 8001a4a:	d110      	bne.n	8001a6e <Setup0_Process+0xb2>
    {
      if ((pInformation->USBwValue0 == DEVICE_REMOTE_WAKEUP) \
 8001a4c:	78d8      	ldrb	r0, [r3, #3]
 8001a4e:	2801      	cmp	r0, #1
 8001a50:	d007      	beq.n	8001a62 <Setup0_Process+0xa6>
  }


  if (Result != USB_SUCCESS)
  {
    Result = (*pProperty->Class_NoData_Setup)(RequestNo);
 8001a52:	4a72      	ldr	r2, [pc, #456]	; (8001c1c <Setup0_Process+0x260>)
 8001a54:	4620      	mov	r0, r4
 8001a56:	6811      	ldr	r1, [r2, #0]
 8001a58:	694b      	ldr	r3, [r1, #20]
 8001a5a:	4798      	blx	r3
    if (Result == USB_NOT_READY)
 8001a5c:	2803      	cmp	r0, #3
 8001a5e:	d129      	bne.n	8001ab4 <Setup0_Process+0xf8>
 8001a60:	e037      	b.n	8001ad2 <Setup0_Process+0x116>
    }
    /*SET FEATURE for Device*/
    else if (RequestNo == SET_FEATURE)
    {
      if ((pInformation->USBwValue0 == DEVICE_REMOTE_WAKEUP) \
          && (pInformation->USBwIndex == 0))
 8001a62:	889b      	ldrh	r3, [r3, #4]
 8001a64:	2b00      	cmp	r3, #0
 8001a66:	d1f4      	bne.n	8001a52 <Setup0_Process+0x96>
      {
        Result = Standard_SetDeviceFeature();
 8001a68:	f7ff fefe 	bl	8001868 <Standard_SetDeviceFeature>
 8001a6c:	e020      	b.n	8001ab0 <Setup0_Process+0xf4>
      {
        Result = USB_UNSUPPORT;
      }
    }
    /*Clear FEATURE for Device */
    else if (RequestNo == CLEAR_FEATURE)
 8001a6e:	2c01      	cmp	r4, #1
 8001a70:	d1ef      	bne.n	8001a52 <Setup0_Process+0x96>
    {
      if (pInformation->USBwValue0 == DEVICE_REMOTE_WAKEUP
 8001a72:	78d9      	ldrb	r1, [r3, #3]
 8001a74:	2901      	cmp	r1, #1
 8001a76:	d1ec      	bne.n	8001a52 <Setup0_Process+0x96>
          && pInformation->USBwIndex == 0
 8001a78:	8898      	ldrh	r0, [r3, #4]
 8001a7a:	2800      	cmp	r0, #0
 8001a7c:	d1e9      	bne.n	8001a52 <Setup0_Process+0x96>
          && ValBit(pInformation->Current_Feature, 5))
 8001a7e:	7a5b      	ldrb	r3, [r3, #9]
 8001a80:	f003 0220 	and.w	r2, r3, #32
 8001a84:	b2d1      	uxtb	r1, r2
 8001a86:	2900      	cmp	r1, #0
 8001a88:	d0e3      	beq.n	8001a52 <Setup0_Process+0x96>
 8001a8a:	e00a      	b.n	8001aa2 <Setup0_Process+0xe6>
    }

  }

  /* Interface Request*/
  else if (Type_Recipient == (STANDARD_REQUEST | INTERFACE_RECIPIENT))
 8001a8c:	2a01      	cmp	r2, #1
 8001a8e:	d104      	bne.n	8001a9a <Setup0_Process+0xde>
  {
    /*SET INTERFACE*/
    if (RequestNo == SET_INTERFACE)
 8001a90:	2c0b      	cmp	r4, #11
 8001a92:	d1de      	bne.n	8001a52 <Setup0_Process+0x96>
    {
      Result = Standard_SetInterface();
 8001a94:	f7ff fe10 	bl	80016b8 <Standard_SetInterface>
 8001a98:	e00a      	b.n	8001ab0 <Setup0_Process+0xf4>
    }
  }

  /* EndPoint Request*/
  else if (Type_Recipient == (STANDARD_REQUEST | ENDPOINT_RECIPIENT))
 8001a9a:	2a02      	cmp	r2, #2
 8001a9c:	d1d9      	bne.n	8001a52 <Setup0_Process+0x96>
  {
    /*CLEAR FEATURE for EndPoint*/
    if (RequestNo == CLEAR_FEATURE)
 8001a9e:	2c01      	cmp	r4, #1
 8001aa0:	d102      	bne.n	8001aa8 <Setup0_Process+0xec>
    {
      Result = Standard_ClearFeature();
 8001aa2:	f7ff fe2d 	bl	8001700 <Standard_ClearFeature>
 8001aa6:	e003      	b.n	8001ab0 <Setup0_Process+0xf4>
    }
    /* SET FEATURE for EndPoint*/
    else if (RequestNo == SET_FEATURE)
 8001aa8:	2c03      	cmp	r4, #3
 8001aaa:	d1d2      	bne.n	8001a52 <Setup0_Process+0x96>
    {
      Result = Standard_SetEndPointFeature();
 8001aac:	f7ff fe96 	bl	80017dc <Standard_SetEndPointFeature>
  {
    Result = USB_UNSUPPORT;
  }


  if (Result != USB_SUCCESS)
 8001ab0:	b110      	cbz	r0, 8001ab8 <Setup0_Process+0xfc>
 8001ab2:	e7ce      	b.n	8001a52 <Setup0_Process+0x96>
      ControlState = PAUSE;
      goto exit_NoData_Setup0;
    }
  }

  if (Result != USB_SUCCESS)
 8001ab4:	2800      	cmp	r0, #0
 8001ab6:	d1bb      	bne.n	8001a30 <Setup0_Process+0x74>
    goto exit_NoData_Setup0;
  }

  ControlState = WAIT_STATUS_IN;/* After no data stage SETUP */

  USB_StatusIn();
 8001ab8:	4855      	ldr	r0, [pc, #340]	; (8001c10 <Setup0_Process+0x254>)
 8001aba:	4b59      	ldr	r3, [pc, #356]	; (8001c20 <Setup0_Process+0x264>)
 8001abc:	6802      	ldr	r2, [r0, #0]
* Output         : None.
* Return         : None.
*******************************************************************************/
void NOP_Process(void)
{
}
 8001abe:	b291      	uxth	r1, r2
    goto exit_NoData_Setup0;
  }

  ControlState = WAIT_STATUS_IN;/* After no data stage SETUP */

  USB_StatusIn();
 8001ac0:	18c8      	adds	r0, r1, r3
 8001ac2:	4b58      	ldr	r3, [pc, #352]	; (8001c24 <Setup0_Process+0x268>)
 8001ac4:	0041      	lsls	r1, r0, #1
 8001ac6:	2200      	movs	r2, #0
 8001ac8:	2030      	movs	r0, #48	; 0x30
 8001aca:	600a      	str	r2, [r1, #0]
 8001acc:	8018      	strh	r0, [r3, #0]
  {
    ControlState = STALLED;
    goto exit_NoData_Setup0;
  }

  ControlState = WAIT_STATUS_IN;/* After no data stage SETUP */
 8001ace:	2106      	movs	r1, #6
 8001ad0:	e000      	b.n	8001ad4 <Setup0_Process+0x118>
  if (Result != USB_SUCCESS)
  {
    Result = (*pProperty->Class_NoData_Setup)(RequestNo);
    if (Result == USB_NOT_READY)
    {
      ControlState = PAUSE;
 8001ad2:	2109      	movs	r1, #9
  ControlState = WAIT_STATUS_IN;/* After no data stage SETUP */

  USB_StatusIn();

exit_NoData_Setup0:
  pInformation->ControlState = ControlState;
 8001ad4:	4a50      	ldr	r2, [pc, #320]	; (8001c18 <Setup0_Process+0x25c>)
 8001ad6:	6810      	ldr	r0, [r2, #0]
 8001ad8:	7201      	strb	r1, [r0, #8]
 8001ada:	e0d3      	b.n	8001c84 <Setup0_Process+0x2c8>

  CopyRoutine = NULL;
  wOffset = 0;

  /*GET DESCRIPTOR*/
  if (Request_No == GET_DESCRIPTOR)
 8001adc:	2c06      	cmp	r4, #6
 8001ade:	d113      	bne.n	8001b08 <Setup0_Process+0x14c>
  {
    if (Type_Recipient == (STANDARD_REQUEST | DEVICE_RECIPIENT))
 8001ae0:	781c      	ldrb	r4, [r3, #0]
 8001ae2:	0661      	lsls	r1, r4, #25
 8001ae4:	d17a      	bne.n	8001bdc <Setup0_Process+0x220>
    {
      uint8_t wValue1 = pInformation->USBwValue1;
 8001ae6:	789a      	ldrb	r2, [r3, #2]
 8001ae8:	4b4c      	ldr	r3, [pc, #304]	; (8001c1c <Setup0_Process+0x260>)
      if (wValue1 == DEVICE_DESCRIPTOR)
 8001aea:	2a01      	cmp	r2, #1
 8001aec:	d102      	bne.n	8001af4 <Setup0_Process+0x138>
      {
        CopyRoutine = pProperty->GetDeviceDescriptor;
 8001aee:	681c      	ldr	r4, [r3, #0]
 8001af0:	69e3      	ldr	r3, [r4, #28]
 8001af2:	e069      	b.n	8001bc8 <Setup0_Process+0x20c>
      }
      else if (wValue1 == CONFIG_DESCRIPTOR)
 8001af4:	2a02      	cmp	r2, #2
 8001af6:	d102      	bne.n	8001afe <Setup0_Process+0x142>
      {
        CopyRoutine = pProperty->GetConfigDescriptor;
 8001af8:	6818      	ldr	r0, [r3, #0]
 8001afa:	6a03      	ldr	r3, [r0, #32]
 8001afc:	e064      	b.n	8001bc8 <Setup0_Process+0x20c>
      }
      else if (wValue1 == STRING_DESCRIPTOR)
 8001afe:	2a03      	cmp	r2, #3
 8001b00:	d16c      	bne.n	8001bdc <Setup0_Process+0x220>
      {
        CopyRoutine = pProperty->GetStringDescriptor;
 8001b02:	6819      	ldr	r1, [r3, #0]
 8001b04:	6a4b      	ldr	r3, [r1, #36]	; 0x24
 8001b06:	e05f      	b.n	8001bc8 <Setup0_Process+0x20c>
      }  /* End of GET_DESCRIPTOR */
    }
  }

  /*GET STATUS*/
  else if ((Request_No == GET_STATUS) && (pInformation->USBwValue == 0)
 8001b08:	2c00      	cmp	r4, #0
 8001b0a:	d13e      	bne.n	8001b8a <Setup0_Process+0x1ce>
 8001b0c:	8859      	ldrh	r1, [r3, #2]
 8001b0e:	2900      	cmp	r1, #0
 8001b10:	d164      	bne.n	8001bdc <Setup0_Process+0x220>
           && (pInformation->USBwLength == 0x0002)
           && (pInformation->USBwIndex1 == 0))
 8001b12:	6858      	ldr	r0, [r3, #4]
 8001b14:	f420 427f 	bic.w	r2, r0, #65280	; 0xff00
 8001b18:	f5b2 3f00 	cmp.w	r2, #131072	; 0x20000
 8001b1c:	d15e      	bne.n	8001bdc <Setup0_Process+0x220>
  {
    /* GET STATUS for Device*/
    if ((Type_Recipient == (STANDARD_REQUEST | DEVICE_RECIPIENT))
 8001b1e:	781c      	ldrb	r4, [r3, #0]
 8001b20:	f014 007f 	ands.w	r0, r4, #127	; 0x7f
 8001b24:	d104      	bne.n	8001b30 <Setup0_Process+0x174>
        && (pInformation->USBwIndex == 0))
 8001b26:	8898      	ldrh	r0, [r3, #4]
 8001b28:	2800      	cmp	r0, #0
 8001b2a:	f000 80ae 	beq.w	8001c8a <Setup0_Process+0x2ce>
 8001b2e:	e055      	b.n	8001bdc <Setup0_Process+0x220>
    {
      CopyRoutine = Standard_GetStatus;
    }

    /* GET STATUS for Interface*/
    else if (Type_Recipient == (STANDARD_REQUEST | INTERFACE_RECIPIENT))
 8001b30:	2801      	cmp	r0, #1
 8001b32:	d10c      	bne.n	8001b4e <Setup0_Process+0x192>
    {
      if (((*pProperty->Class_Get_Interface_Setting)(pInformation->USBwIndex0, 0) == USB_SUCCESS)
 8001b34:	4a39      	ldr	r2, [pc, #228]	; (8001c1c <Setup0_Process+0x260>)
 8001b36:	7958      	ldrb	r0, [r3, #5]
 8001b38:	6814      	ldr	r4, [r2, #0]
 8001b3a:	69a2      	ldr	r2, [r4, #24]
 8001b3c:	4790      	blx	r2
 8001b3e:	2800      	cmp	r0, #0
 8001b40:	d14c      	bne.n	8001bdc <Setup0_Process+0x220>
          && (pInformation->Current_Configuration != 0))
 8001b42:	682b      	ldr	r3, [r5, #0]
 8001b44:	7a99      	ldrb	r1, [r3, #10]
 8001b46:	2900      	cmp	r1, #0
 8001b48:	f040 809f 	bne.w	8001c8a <Setup0_Process+0x2ce>
 8001b4c:	e046      	b.n	8001bdc <Setup0_Process+0x220>
        CopyRoutine = Standard_GetStatus;
      }
    }

    /* GET STATUS for EndPoint*/
    else if (Type_Recipient == (STANDARD_REQUEST | ENDPOINT_RECIPIENT))
 8001b4e:	2802      	cmp	r0, #2
 8001b50:	d144      	bne.n	8001bdc <Setup0_Process+0x220>
    {
      Related_Endpoint = (pInformation->USBwIndex0 & 0x0f);
 8001b52:	795b      	ldrb	r3, [r3, #5]
 8001b54:	f003 010f 	and.w	r1, r3, #15
 8001b58:	ea4f 0281 	mov.w	r2, r1, lsl #2

      if (ValBit(pInformation->USBwIndex0, 7))
      {
        /*Get Status of endpoint & stall the request if the related_ENdpoint
        is Disabled*/
        Status = _GetEPTxStatus(Related_Endpoint);
 8001b5c:	f102 4480 	add.w	r4, r2, #1073741824	; 0x40000000
 8001b60:	f504 40b8 	add.w	r0, r4, #23552	; 0x5c00
      else
      {
        Status = _GetEPRxStatus(Related_Endpoint);
      }

      if ((Related_Endpoint < Device_Table.Total_Endpoint) && (Reserved == 0)
 8001b64:	4c30      	ldr	r4, [pc, #192]	; (8001c28 <Setup0_Process+0x26c>)

      if (ValBit(pInformation->USBwIndex0, 7))
      {
        /*Get Status of endpoint & stall the request if the related_ENdpoint
        is Disabled*/
        Status = _GetEPTxStatus(Related_Endpoint);
 8001b66:	6802      	ldr	r2, [r0, #0]
      else
      {
        Status = _GetEPRxStatus(Related_Endpoint);
      }

      if ((Related_Endpoint < Device_Table.Total_Endpoint) && (Reserved == 0)
 8001b68:	7820      	ldrb	r0, [r4, #0]
    else if (Type_Recipient == (STANDARD_REQUEST | ENDPOINT_RECIPIENT))
    {
      Related_Endpoint = (pInformation->USBwIndex0 & 0x0f);
      Reserved = pInformation->USBwIndex0 & 0x70;

      if (ValBit(pInformation->USBwIndex0, 7))
 8001b6a:	f013 0f80 	tst.w	r3, #128	; 0x80
      {
        /*Get Status of endpoint & stall the request if the related_ENdpoint
        is Disabled*/
        Status = _GetEPTxStatus(Related_Endpoint);
 8001b6e:	bf14      	ite	ne
 8001b70:	f002 0230 	andne.w	r2, r2, #48	; 0x30
      }
      else
      {
        Status = _GetEPRxStatus(Related_Endpoint);
 8001b74:	f402 5240 	andeq.w	r2, r2, #12288	; 0x3000
      }

      if ((Related_Endpoint < Device_Table.Total_Endpoint) && (Reserved == 0)
 8001b78:	4281      	cmp	r1, r0
 8001b7a:	d22f      	bcs.n	8001bdc <Setup0_Process+0x220>
 8001b7c:	f013 0f70 	tst.w	r3, #112	; 0x70
 8001b80:	d12c      	bne.n	8001bdc <Setup0_Process+0x220>
          && (Status != 0))
 8001b82:	2a00      	cmp	r2, #0
 8001b84:	f040 8081 	bne.w	8001c8a <Setup0_Process+0x2ce>
 8001b88:	e028      	b.n	8001bdc <Setup0_Process+0x220>
    }

  }

  /*GET CONFIGURATION*/
  else if (Request_No == GET_CONFIGURATION)
 8001b8a:	2c08      	cmp	r4, #8
 8001b8c:	d103      	bne.n	8001b96 <Setup0_Process+0x1da>
  {
    if (Type_Recipient == (STANDARD_REQUEST | DEVICE_RECIPIENT))
 8001b8e:	7819      	ldrb	r1, [r3, #0]
 8001b90:	064a      	lsls	r2, r1, #25
 8001b92:	d07c      	beq.n	8001c8e <Setup0_Process+0x2d2>
 8001b94:	e022      	b.n	8001bdc <Setup0_Process+0x220>
    {
      CopyRoutine = Standard_GetConfiguration;
    }
  }
  /*GET INTERFACE*/
  else if (Request_No == GET_INTERFACE)
 8001b96:	2c0a      	cmp	r4, #10
 8001b98:	d120      	bne.n	8001bdc <Setup0_Process+0x220>
  {
    if ((Type_Recipient == (STANDARD_REQUEST | INTERFACE_RECIPIENT))
 8001b9a:	7818      	ldrb	r0, [r3, #0]
 8001b9c:	f000 017f 	and.w	r1, r0, #127	; 0x7f
 8001ba0:	2901      	cmp	r1, #1
 8001ba2:	d11b      	bne.n	8001bdc <Setup0_Process+0x220>
        && (pInformation->Current_Configuration != 0) && (pInformation->USBwValue == 0)
 8001ba4:	7a9c      	ldrb	r4, [r3, #10]
 8001ba6:	b1cc      	cbz	r4, 8001bdc <Setup0_Process+0x220>
 8001ba8:	8859      	ldrh	r1, [r3, #2]
 8001baa:	b9b9      	cbnz	r1, 8001bdc <Setup0_Process+0x220>
        && (pInformation->USBwIndex1 == 0) && (pInformation->USBwLength == 0x0001)
 8001bac:	685a      	ldr	r2, [r3, #4]
 8001bae:	f422 407f 	bic.w	r0, r2, #65280	; 0xff00
 8001bb2:	f5b0 3f80 	cmp.w	r0, #65536	; 0x10000
 8001bb6:	d111      	bne.n	8001bdc <Setup0_Process+0x220>
        && ((*pProperty->Class_Get_Interface_Setting)(pInformation->USBwIndex0, 0) == USB_SUCCESS))
 8001bb8:	4c18      	ldr	r4, [pc, #96]	; (8001c1c <Setup0_Process+0x260>)
 8001bba:	7958      	ldrb	r0, [r3, #5]
 8001bbc:	6822      	ldr	r2, [r4, #0]
 8001bbe:	6994      	ldr	r4, [r2, #24]
 8001bc0:	47a0      	blx	r4
 8001bc2:	2800      	cmp	r0, #0
 8001bc4:	d065      	beq.n	8001c92 <Setup0_Process+0x2d6>
 8001bc6:	e009      	b.n	8001bdc <Setup0_Process+0x220>
      CopyRoutine = Standard_GetInterface;
    }

  }
  
  if (CopyRoutine)
 8001bc8:	b143      	cbz	r3, 8001bdc <Setup0_Process+0x220>
  {
    pInformation->Ctrl_Info.Usb_wOffset = wOffset;
 8001bca:	4813      	ldr	r0, [pc, #76]	; (8001c18 <Setup0_Process+0x25c>)
 8001bcc:	2400      	movs	r4, #0
 8001bce:	6801      	ldr	r1, [r0, #0]
    pInformation->Ctrl_Info.CopyData = CopyRoutine;
    /* sb in the original the cast to word was directly */
    /* now the cast is made step by step */
    (*CopyRoutine)(0);
 8001bd0:	4620      	mov	r0, r4

  }
  
  if (CopyRoutine)
  {
    pInformation->Ctrl_Info.Usb_wOffset = wOffset;
 8001bd2:	824c      	strh	r4, [r1, #18]
    pInformation->Ctrl_Info.CopyData = CopyRoutine;
 8001bd4:	618b      	str	r3, [r1, #24]
    /* sb in the original the cast to word was directly */
    /* now the cast is made step by step */
    (*CopyRoutine)(0);
 8001bd6:	4798      	blx	r3
    Result = USB_SUCCESS;
 8001bd8:	4620      	mov	r0, r4
 8001bda:	e00a      	b.n	8001bf2 <Setup0_Process+0x236>
  }
  else
  {
    Result = (*pProperty->Class_Data_Setup)(pInformation->USBbRequest);
 8001bdc:	4a0f      	ldr	r2, [pc, #60]	; (8001c1c <Setup0_Process+0x260>)
 8001bde:	4c0e      	ldr	r4, [pc, #56]	; (8001c18 <Setup0_Process+0x25c>)
 8001be0:	6811      	ldr	r1, [r2, #0]
 8001be2:	6823      	ldr	r3, [r4, #0]
 8001be4:	690a      	ldr	r2, [r1, #16]
 8001be6:	7858      	ldrb	r0, [r3, #1]
 8001be8:	4790      	blx	r2
    if (Result == USB_NOT_READY)
 8001bea:	2803      	cmp	r0, #3
 8001bec:	d101      	bne.n	8001bf2 <Setup0_Process+0x236>
    {
      pInformation->ControlState = PAUSE;
 8001bee:	6823      	ldr	r3, [r4, #0]
 8001bf0:	e006      	b.n	8001c00 <Setup0_Process+0x244>
      return;
    }
  }

  if (pInformation->Ctrl_Info.Usb_wLength == 0xFFFF)
 8001bf2:	4b09      	ldr	r3, [pc, #36]	; (8001c18 <Setup0_Process+0x25c>)
 8001bf4:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8001bf8:	681b      	ldr	r3, [r3, #0]
 8001bfa:	8a1a      	ldrh	r2, [r3, #16]
 8001bfc:	428a      	cmp	r2, r1
 8001bfe:	d101      	bne.n	8001c04 <Setup0_Process+0x248>
  {
    /* Data is not ready, wait it */
    pInformation->ControlState = PAUSE;
 8001c00:	2109      	movs	r1, #9
 8001c02:	e003      	b.n	8001c0c <Setup0_Process+0x250>
    return;
  }
  if ((Result == USB_UNSUPPORT) || (pInformation->Ctrl_Info.Usb_wLength == 0))
 8001c04:	2802      	cmp	r0, #2
 8001c06:	d000      	beq.n	8001c0a <Setup0_Process+0x24e>
 8001c08:	b982      	cbnz	r2, 8001c2c <Setup0_Process+0x270>
  {
    /* Unsupported request */
    pInformation->ControlState = STALLED;
 8001c0a:	2108      	movs	r1, #8
 8001c0c:	7219      	strb	r1, [r3, #8]
 8001c0e:	e039      	b.n	8001c84 <Setup0_Process+0x2c8>
 8001c10:	40005c50 	.word	0x40005c50
 8001c14:	20003004 	.word	0x20003004
 8001c18:	200006d8 	.word	0x200006d8
 8001c1c:	200006b0 	.word	0x200006b0
 8001c20:	20003002 	.word	0x20003002
 8001c24:	200006e0 	.word	0x200006e0
 8001c28:	2000024c 	.word	0x2000024c
    return;
  }


  if (ValBit(pInformation->USBbmRequestType, 7))
 8001c2c:	f993 0000 	ldrsb.w	r0, [r3]
 8001c30:	2800      	cmp	r0, #0
 8001c32:	da21      	bge.n	8001c78 <Setup0_Process+0x2bc>
  {
    /* Device ==> Host */
    __IO uint32_t wLength = pInformation->USBwLength;
 8001c34:	88d9      	ldrh	r1, [r3, #6]
 8001c36:	9101      	str	r1, [sp, #4]
     
    /* Restrict the data length to be the one host asks for */
    if (pInformation->Ctrl_Info.Usb_wLength > wLength)
 8001c38:	9801      	ldr	r0, [sp, #4]
 8001c3a:	4282      	cmp	r2, r0
 8001c3c:	d902      	bls.n	8001c44 <Setup0_Process+0x288>
    {
      pInformation->Ctrl_Info.Usb_wLength = wLength;
 8001c3e:	9a01      	ldr	r2, [sp, #4]
 8001c40:	821a      	strh	r2, [r3, #16]
 8001c42:	e011      	b.n	8001c68 <Setup0_Process+0x2ac>
    }
    
    else if (pInformation->Ctrl_Info.Usb_wLength < pInformation->USBwLength)
 8001c44:	428a      	cmp	r2, r1
 8001c46:	d20f      	bcs.n	8001c68 <Setup0_Process+0x2ac>
    {
      if (pInformation->Ctrl_Info.Usb_wLength < pProperty->MaxPacketSize)
 8001c48:	4913      	ldr	r1, [pc, #76]	; (8001c98 <Setup0_Process+0x2dc>)
 8001c4a:	6808      	ldr	r0, [r1, #0]
 8001c4c:	f890 102c 	ldrb.w	r1, [r0, #44]	; 0x2c
 8001c50:	428a      	cmp	r2, r1
 8001c52:	d201      	bcs.n	8001c58 <Setup0_Process+0x29c>
      {
        Data_Mul_MaxPacketSize = FALSE;
 8001c54:	2100      	movs	r1, #0
 8001c56:	e005      	b.n	8001c64 <Setup0_Process+0x2a8>
      }
      else if ((pInformation->Ctrl_Info.Usb_wLength % pProperty->MaxPacketSize) == 0)
 8001c58:	fb92 f0f1 	sdiv	r0, r2, r1
 8001c5c:	fb01 2210 	mls	r2, r1, r0, r2
 8001c60:	b912      	cbnz	r2, 8001c68 <Setup0_Process+0x2ac>
      {
        Data_Mul_MaxPacketSize = TRUE;
 8001c62:	2101      	movs	r1, #1
 8001c64:	480d      	ldr	r0, [pc, #52]	; (8001c9c <Setup0_Process+0x2e0>)
 8001c66:	7001      	strb	r1, [r0, #0]
      }
    }   

    pInformation->Ctrl_Info.PacketSize = pProperty->MaxPacketSize;
 8001c68:	490b      	ldr	r1, [pc, #44]	; (8001c98 <Setup0_Process+0x2dc>)
 8001c6a:	6808      	ldr	r0, [r1, #0]
 8001c6c:	f890 202c 	ldrb.w	r2, [r0, #44]	; 0x2c
 8001c70:	829a      	strh	r2, [r3, #20]
    DataStageIn();
 8001c72:	f7ff fcb3 	bl	80015dc <DataStageIn>
 8001c76:	e005      	b.n	8001c84 <Setup0_Process+0x2c8>
  }
  else
  {
    pInformation->ControlState = OUT_DATA;
 8001c78:	2203      	movs	r2, #3
 8001c7a:	721a      	strb	r2, [r3, #8]
    vSetEPRxStatus(EP_RX_VALID); /* enable for next data reception */
 8001c7c:	4b08      	ldr	r3, [pc, #32]	; (8001ca0 <Setup0_Process+0x2e4>)
 8001c7e:	f44f 5140 	mov.w	r1, #12288	; 0x3000
 8001c82:	8019      	strh	r1, [r3, #0]
  else
  {
    /* Setup with data stage */
    Data_Setup0();
  }
  return Post0_Process();
 8001c84:	f7ff fe10 	bl	80018a8 <Post0_Process>
}
 8001c88:	bd7c      	pop	{r2, r3, r4, r5, r6, pc}
  {
    /* GET STATUS for Device*/
    if ((Type_Recipient == (STANDARD_REQUEST | DEVICE_RECIPIENT))
        && (pInformation->USBwIndex == 0))
    {
      CopyRoutine = Standard_GetStatus;
 8001c8a:	4b06      	ldr	r3, [pc, #24]	; (8001ca4 <Setup0_Process+0x2e8>)
 8001c8c:	e79d      	b.n	8001bca <Setup0_Process+0x20e>
  /*GET CONFIGURATION*/
  else if (Request_No == GET_CONFIGURATION)
  {
    if (Type_Recipient == (STANDARD_REQUEST | DEVICE_RECIPIENT))
    {
      CopyRoutine = Standard_GetConfiguration;
 8001c8e:	4b06      	ldr	r3, [pc, #24]	; (8001ca8 <Setup0_Process+0x2ec>)
 8001c90:	e79b      	b.n	8001bca <Setup0_Process+0x20e>
    if ((Type_Recipient == (STANDARD_REQUEST | INTERFACE_RECIPIENT))
        && (pInformation->Current_Configuration != 0) && (pInformation->USBwValue == 0)
        && (pInformation->USBwIndex1 == 0) && (pInformation->USBwLength == 0x0001)
        && ((*pProperty->Class_Get_Interface_Setting)(pInformation->USBwIndex0, 0) == USB_SUCCESS))
    {
      CopyRoutine = Standard_GetInterface;
 8001c92:	4b06      	ldr	r3, [pc, #24]	; (8001cac <Setup0_Process+0x2f0>)
 8001c94:	e799      	b.n	8001bca <Setup0_Process+0x20e>
 8001c96:	bf00      	nop
 8001c98:	200006b0 	.word	0x200006b0
 8001c9c:	2000027c 	.word	0x2000027c
 8001ca0:	200006de 	.word	0x200006de
 8001ca4:	08001541 	.word	0x08001541
 8001ca8:	080014f9 	.word	0x080014f9
 8001cac:	0800151d 	.word	0x0800151d

08001cb0 <SetDeviceAddress>:
* Input          : - Val: device address.
* Output         : None.
* Return         : None.
*******************************************************************************/
void SetDeviceAddress(uint8_t Val)
{
 8001cb0:	b570      	push	{r4, r5, r6, lr}
  uint32_t i;
  uint32_t nEP = Device_Table.Total_Endpoint;
 8001cb2:	4b0d      	ldr	r3, [pc, #52]	; (8001ce8 <SetDeviceAddress+0x38>)
 8001cb4:	781c      	ldrb	r4, [r3, #0]

  /* set address in every used endpoint */
  for (i = 0; i < nEP; i++)
 8001cb6:	2300      	movs	r3, #0
 8001cb8:	42a3      	cmp	r3, r4
 8001cba:	d210      	bcs.n	8001cde <SetDeviceAddress+0x2e>
* Description    : Set the device and all the used Endpoints addresses.
* Input          : - Val: device address.
* Output         : None.
* Return         : None.
*******************************************************************************/
void SetDeviceAddress(uint8_t Val)
 8001cbc:	f103 5280 	add.w	r2, r3, #268435456	; 0x10000000
 8001cc0:	f502 55b8 	add.w	r5, r2, #5888	; 0x1700
 8001cc4:	00a9      	lsls	r1, r5, #2
  uint32_t nEP = Device_Table.Total_Endpoint;

  /* set address in every used endpoint */
  for (i = 0; i < nEP; i++)
  {
    _SetEPAddress((uint8_t)i, (uint8_t)i);
 8001cc6:	f443 4200 	orr.w	r2, r3, #32768	; 0x8000
 8001cca:	680e      	ldr	r6, [r1, #0]
 8001ccc:	f042 0580 	orr.w	r5, r2, #128	; 0x80
 8001cd0:	f640 720f 	movw	r2, #3855	; 0xf0f
 8001cd4:	4032      	ands	r2, r6
 8001cd6:	432a      	orrs	r2, r5
 8001cd8:	600a      	str	r2, [r1, #0]
{
  uint32_t i;
  uint32_t nEP = Device_Table.Total_Endpoint;

  /* set address in every used endpoint */
  for (i = 0; i < nEP; i++)
 8001cda:	3301      	adds	r3, #1
 8001cdc:	e7ec      	b.n	8001cb8 <SetDeviceAddress+0x8>
  {
    _SetEPAddress((uint8_t)i, (uint8_t)i);
  } /* for */
  _SetDADDR(Val | DADDR_EF); /* set device address and enable function */ 
 8001cde:	4903      	ldr	r1, [pc, #12]	; (8001cec <SetDeviceAddress+0x3c>)
 8001ce0:	f040 0080 	orr.w	r0, r0, #128	; 0x80
 8001ce4:	6008      	str	r0, [r1, #0]
 8001ce6:	bd70      	pop	{r4, r5, r6, pc}
 8001ce8:	2000024c 	.word	0x2000024c
 8001cec:	40005c4c 	.word	0x40005c4c

08001cf0 <In0_Process>:
* Input          : None.
* Output         : None.
* Return         : Post0_Process.
*******************************************************************************/
uint8_t In0_Process(void)
{
 8001cf0:	b510      	push	{r4, lr}
  uint32_t ControlState = pInformation->ControlState;
 8001cf2:	4914      	ldr	r1, [pc, #80]	; (8001d44 <In0_Process+0x54>)
 8001cf4:	680b      	ldr	r3, [r1, #0]
 8001cf6:	460c      	mov	r4, r1
 8001cf8:	7a1a      	ldrb	r2, [r3, #8]

  if ((ControlState == IN_DATA) || (ControlState == LAST_IN_DATA))
 8001cfa:	2a02      	cmp	r2, #2
 8001cfc:	d001      	beq.n	8001d02 <In0_Process+0x12>
 8001cfe:	2a04      	cmp	r2, #4
 8001d00:	d104      	bne.n	8001d0c <In0_Process+0x1c>
  {
    DataStageIn();
 8001d02:	f7ff fc6b 	bl	80015dc <DataStageIn>
    /* ControlState may be changed outside the function */
    ControlState = pInformation->ControlState;
 8001d06:	6821      	ldr	r1, [r4, #0]
 8001d08:	7a08      	ldrb	r0, [r1, #8]
 8001d0a:	e013      	b.n	8001d34 <In0_Process+0x44>
  }

  else if (ControlState == WAIT_STATUS_IN)
 8001d0c:	2a06      	cmp	r2, #6
 8001d0e:	d110      	bne.n	8001d32 <In0_Process+0x42>
  {
    if ((pInformation->USBbRequest == SET_ADDRESS) &&
 8001d10:	7858      	ldrb	r0, [r3, #1]
 8001d12:	2805      	cmp	r0, #5
 8001d14:	d109      	bne.n	8001d2a <In0_Process+0x3a>
        (Type_Recipient == (STANDARD_REQUEST | DEVICE_RECIPIENT)))
 8001d16:	7819      	ldrb	r1, [r3, #0]
    ControlState = pInformation->ControlState;
  }

  else if (ControlState == WAIT_STATUS_IN)
  {
    if ((pInformation->USBbRequest == SET_ADDRESS) &&
 8001d18:	0648      	lsls	r0, r1, #25
 8001d1a:	d106      	bne.n	8001d2a <In0_Process+0x3a>
        (Type_Recipient == (STANDARD_REQUEST | DEVICE_RECIPIENT)))
    {
      SetDeviceAddress(pInformation->USBwValue0);
 8001d1c:	78d8      	ldrb	r0, [r3, #3]
 8001d1e:	f7ff ffc7 	bl	8001cb0 <SetDeviceAddress>
      pUser_Standard_Requests->User_SetDeviceAddress();
 8001d22:	4b09      	ldr	r3, [pc, #36]	; (8001d48 <In0_Process+0x58>)
 8001d24:	681a      	ldr	r2, [r3, #0]
 8001d26:	6a10      	ldr	r0, [r2, #32]
 8001d28:	4780      	blx	r0
    }
    (*pProperty->Process_Status_IN)();
 8001d2a:	4908      	ldr	r1, [pc, #32]	; (8001d4c <In0_Process+0x5c>)
 8001d2c:	680b      	ldr	r3, [r1, #0]
 8001d2e:	689a      	ldr	r2, [r3, #8]
 8001d30:	4790      	blx	r2
    ControlState = STALLED;
  }

  else
  {
    ControlState = STALLED;
 8001d32:	2008      	movs	r0, #8
  }

  pInformation->ControlState = ControlState;
 8001d34:	4b03      	ldr	r3, [pc, #12]	; (8001d44 <In0_Process+0x54>)
 8001d36:	681a      	ldr	r2, [r3, #0]
 8001d38:	7210      	strb	r0, [r2, #8]

  return Post0_Process();
}
 8001d3a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    ControlState = STALLED;
  }

  pInformation->ControlState = ControlState;

  return Post0_Process();
 8001d3e:	f7ff bdb3 	b.w	80018a8 <Post0_Process>
 8001d42:	bf00      	nop
 8001d44:	200006d8 	.word	0x200006d8
 8001d48:	200006d4 	.word	0x200006d4
 8001d4c:	200006b0 	.word	0x200006b0

08001d50 <NOP_Process>:
* Input          : None.
* Output         : None.
* Return         : None.
*******************************************************************************/
void NOP_Process(void)
{
 8001d50:	4770      	bx	lr
	...

08001d54 <USB_Init>:
* Input          : None.
* Output         : None.
* Return         : None.
*******************************************************************************/
void USB_Init(void)
{
 8001d54:	b508      	push	{r3, lr}
  pInformation = &Device_Info;
 8001d56:	4a07      	ldr	r2, [pc, #28]	; (8001d74 <USB_Init+0x20>)
 8001d58:	4b07      	ldr	r3, [pc, #28]	; (8001d78 <USB_Init+0x24>)
  pInformation->ControlState = 2;
 8001d5a:	2002      	movs	r0, #2
* Output         : None.
* Return         : None.
*******************************************************************************/
void USB_Init(void)
{
  pInformation = &Device_Info;
 8001d5c:	6013      	str	r3, [r2, #0]
  pInformation->ControlState = 2;
 8001d5e:	7218      	strb	r0, [r3, #8]
  pProperty = &Device_Property;
 8001d60:	4906      	ldr	r1, [pc, #24]	; (8001d7c <USB_Init+0x28>)
 8001d62:	4b07      	ldr	r3, [pc, #28]	; (8001d80 <USB_Init+0x2c>)
  pUser_Standard_Requests = &User_Standard_Requests;
 8001d64:	4807      	ldr	r0, [pc, #28]	; (8001d84 <USB_Init+0x30>)
 8001d66:	4a08      	ldr	r2, [pc, #32]	; (8001d88 <USB_Init+0x34>)
*******************************************************************************/
void USB_Init(void)
{
  pInformation = &Device_Info;
  pInformation->ControlState = 2;
  pProperty = &Device_Property;
 8001d68:	600b      	str	r3, [r1, #0]
  pUser_Standard_Requests = &User_Standard_Requests;
 8001d6a:	6010      	str	r0, [r2, #0]
  /* Initialize devices one by one */
  pProperty->Init();
 8001d6c:	681b      	ldr	r3, [r3, #0]
 8001d6e:	4798      	blx	r3
 8001d70:	bd08      	pop	{r3, pc}
 8001d72:	bf00      	nop
 8001d74:	200006d8 	.word	0x200006d8
 8001d78:	200006b8 	.word	0x200006b8
 8001d7c:	200006b0 	.word	0x200006b0
 8001d80:	200001f8 	.word	0x200001f8
 8001d84:	20000228 	.word	0x20000228
 8001d88:	200006d4 	.word	0x200006d4

08001d8c <CTR_LP>:
* Input          : None.
* Output         : None.
* Return         : None.
*******************************************************************************/
void CTR_LP(void)
{
 8001d8c:	b537      	push	{r0, r1, r2, r4, r5, lr}
  __IO uint16_t wEPVal = 0;
 8001d8e:	2300      	movs	r3, #0
 8001d90:	f8ad 3006 	strh.w	r3, [sp, #6]
  /* stay in loop while pending interrupts */
  while (((wIstr = _GetISTR()) & ISTR_CTR) != 0)
 8001d94:	4858      	ldr	r0, [pc, #352]	; (8001ef8 <CTR_LP+0x16c>)
 8001d96:	4b59      	ldr	r3, [pc, #356]	; (8001efc <CTR_LP+0x170>)
 8001d98:	6802      	ldr	r2, [r0, #0]
 8001d9a:	b291      	uxth	r1, r2
 8001d9c:	0412      	lsls	r2, r2, #16
 8001d9e:	8019      	strh	r1, [r3, #0]
 8001da0:	f140 80a8 	bpl.w	8001ef4 <CTR_LP+0x168>
  {
    /* extract highest priority endpoint number */
    EPindex = (uint8_t)(wIstr & ISTR_EP_ID);
 8001da4:	8818      	ldrh	r0, [r3, #0]
 8001da6:	4956      	ldr	r1, [pc, #344]	; (8001f00 <CTR_LP+0x174>)
 8001da8:	f000 020f 	and.w	r2, r0, #15
 8001dac:	700a      	strb	r2, [r1, #0]
    if (EPindex == 0)
 8001dae:	2a00      	cmp	r2, #0
 8001db0:	d16e      	bne.n	8001e90 <CTR_LP+0x104>
      /* (Setup0_Process, In0_Process, Out0_Process) */

      /* save RX & TX status */
      /* and set both to NAK */
      
	    SaveRState = _GetENDPOINT(ENDP0);
 8001db2:	4c54      	ldr	r4, [pc, #336]	; (8001f04 <CTR_LP+0x178>)
 8001db4:	6825      	ldr	r5, [r4, #0]
 8001db6:	b2aa      	uxth	r2, r5
 8001db8:	4d53      	ldr	r5, [pc, #332]	; (8001f08 <CTR_LP+0x17c>)
 8001dba:	802a      	strh	r2, [r5, #0]
	    SaveTState = SaveRState & EPTX_STAT;
 8001dbc:	8829      	ldrh	r1, [r5, #0]
 8001dbe:	4a53      	ldr	r2, [pc, #332]	; (8001f0c <CTR_LP+0x180>)
 8001dc0:	f001 0030 	and.w	r0, r1, #48	; 0x30
 8001dc4:	8010      	strh	r0, [r2, #0]
	    SaveRState &=  EPRX_STAT;	
 8001dc6:	8829      	ldrh	r1, [r5, #0]

	    _SetEPRxTxStatus(ENDP0,EP_RX_NAK,EP_TX_NAK);
 8001dc8:	f64b 72bf 	movw	r2, #49087	; 0xbfbf
      /* save RX & TX status */
      /* and set both to NAK */
      
	    SaveRState = _GetENDPOINT(ENDP0);
	    SaveTState = SaveRState & EPTX_STAT;
	    SaveRState &=  EPRX_STAT;	
 8001dcc:	f401 5040 	and.w	r0, r1, #12288	; 0x3000
 8001dd0:	8028      	strh	r0, [r5, #0]

	    _SetEPRxTxStatus(ENDP0,EP_RX_NAK,EP_TX_NAK);
 8001dd2:	6821      	ldr	r1, [r4, #0]
 8001dd4:	400a      	ands	r2, r1
 8001dd6:	f482 5000 	eor.w	r0, r2, #8192	; 0x2000
 8001dda:	f080 0120 	eor.w	r1, r0, #32
 8001dde:	f441 4200 	orr.w	r2, r1, #32768	; 0x8000
 8001de2:	f042 0080 	orr.w	r0, r2, #128	; 0x80
 8001de6:	6020      	str	r0, [r4, #0]

      /* DIR bit = origin of the interrupt */

      if ((wIstr & ISTR_DIR) == 0)
 8001de8:	881b      	ldrh	r3, [r3, #0]
 8001dea:	f003 0110 	and.w	r1, r3, #16
 8001dee:	b28a      	uxth	r2, r1
 8001df0:	b93a      	cbnz	r2, 8001e02 <CTR_LP+0x76>
        /* DIR = 0 */

        /* DIR = 0      => IN  int */
        /* DIR = 0 implies that (EP_CTR_TX = 1) always  */

        _ClearEP_CTR_TX(ENDP0);
 8001df2:	6822      	ldr	r2, [r4, #0]
 8001df4:	f648 700f 	movw	r0, #36623	; 0x8f0f
 8001df8:	4010      	ands	r0, r2
 8001dfa:	6020      	str	r0, [r4, #0]
        In0_Process();
 8001dfc:	f7ff ff78 	bl	8001cf0 <In0_Process>
 8001e00:	e01d      	b.n	8001e3e <CTR_LP+0xb2>
        /* DIR = 1 */

        /* DIR = 1 & CTR_RX       => SETUP or OUT int */
        /* DIR = 1 & (CTR_TX | CTR_RX) => 2 int pending */

        wEPVal = _GetENDPOINT(ENDP0);
 8001e02:	6820      	ldr	r0, [r4, #0]
 8001e04:	b283      	uxth	r3, r0
 8001e06:	f8ad 3006 	strh.w	r3, [sp, #6]
        
        if ((wEPVal &EP_SETUP) != 0)
 8001e0a:	f8bd 1006 	ldrh.w	r1, [sp, #6]
 8001e0e:	f401 6200 	and.w	r2, r1, #2048	; 0x800
 8001e12:	b290      	uxth	r0, r2
 8001e14:	b138      	cbz	r0, 8001e26 <CTR_LP+0x9a>
        {
          _ClearEP_CTR_RX(ENDP0); /* SETUP bit kept frozen while CTR_RX = 1 */
 8001e16:	6821      	ldr	r1, [r4, #0]
 8001e18:	f640 738f 	movw	r3, #3983	; 0xf8f
 8001e1c:	400b      	ands	r3, r1
 8001e1e:	6023      	str	r3, [r4, #0]
          Setup0_Process();
 8001e20:	f7ff fdcc 	bl	80019bc <Setup0_Process>
 8001e24:	e00b      	b.n	8001e3e <CTR_LP+0xb2>

		      _SetEPRxTxStatus(ENDP0,SaveRState,SaveTState);
          return;
        }

        else if ((wEPVal & EP_CTR_RX) != 0)
 8001e26:	f8bd 3006 	ldrh.w	r3, [sp, #6]
 8001e2a:	b219      	sxth	r1, r3
 8001e2c:	2900      	cmp	r1, #0
 8001e2e:	dab1      	bge.n	8001d94 <CTR_LP+0x8>
        {
          _ClearEP_CTR_RX(ENDP0);
 8001e30:	6822      	ldr	r2, [r4, #0]
 8001e32:	f640 708f 	movw	r0, #3983	; 0xf8f
 8001e36:	4010      	ands	r0, r2
 8001e38:	6020      	str	r0, [r4, #0]
          Out0_Process();
 8001e3a:	f7ff fd55 	bl	80018e8 <Out0_Process>
          /* before terminate set Tx & Rx status */
     
		     _SetEPRxTxStatus(ENDP0,SaveRState,SaveTState);
 8001e3e:	6821      	ldr	r1, [r4, #0]
 8001e40:	882a      	ldrh	r2, [r5, #0]
 8001e42:	f64b 73bf 	movw	r3, #49087	; 0xbfbf
 8001e46:	f402 5080 	and.w	r0, r2, #4096	; 0x1000
 8001e4a:	400b      	ands	r3, r1
 8001e4c:	b281      	uxth	r1, r0
 8001e4e:	b109      	cbz	r1, 8001e54 <CTR_LP+0xc8>
 8001e50:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8001e54:	4a2c      	ldr	r2, [pc, #176]	; (8001f08 <CTR_LP+0x17c>)
 8001e56:	8810      	ldrh	r0, [r2, #0]
 8001e58:	f400 5100 	and.w	r1, r0, #8192	; 0x2000
 8001e5c:	b28a      	uxth	r2, r1
 8001e5e:	b10a      	cbz	r2, 8001e64 <CTR_LP+0xd8>
 8001e60:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8001e64:	4829      	ldr	r0, [pc, #164]	; (8001f0c <CTR_LP+0x180>)
 8001e66:	8801      	ldrh	r1, [r0, #0]
 8001e68:	f001 0210 	and.w	r2, r1, #16
 8001e6c:	b291      	uxth	r1, r2
 8001e6e:	b109      	cbz	r1, 8001e74 <CTR_LP+0xe8>
 8001e70:	f083 0310 	eor.w	r3, r3, #16
 8001e74:	8800      	ldrh	r0, [r0, #0]
 8001e76:	f000 0220 	and.w	r2, r0, #32
 8001e7a:	b291      	uxth	r1, r2
 8001e7c:	b109      	cbz	r1, 8001e82 <CTR_LP+0xf6>
 8001e7e:	f083 0320 	eor.w	r3, r3, #32
 8001e82:	f443 4000 	orr.w	r0, r3, #32768	; 0x8000
 8001e86:	4a1f      	ldr	r2, [pc, #124]	; (8001f04 <CTR_LP+0x178>)
 8001e88:	f040 0180 	orr.w	r1, r0, #128	; 0x80
 8001e8c:	6011      	str	r1, [r2, #0]
          return;
 8001e8e:	e031      	b.n	8001ef4 <CTR_LP+0x168>
    else
    {
      /* Decode and service non control endpoints interrupt  */

      /* process related endpoint register */
      wEPVal = _GetENDPOINT(EPindex);
 8001e90:	0093      	lsls	r3, r2, #2
 8001e92:	f103 4080 	add.w	r0, r3, #1073741824	; 0x40000000
 8001e96:	f500 43b8 	add.w	r3, r0, #23552	; 0x5c00
 8001e9a:	6819      	ldr	r1, [r3, #0]
 8001e9c:	b288      	uxth	r0, r1
 8001e9e:	f8ad 0006 	strh.w	r0, [sp, #6]
      if ((wEPVal & EP_CTR_RX) != 0)
 8001ea2:	f8bd 1006 	ldrh.w	r1, [sp, #6]
 8001ea6:	b208      	sxth	r0, r1
 8001ea8:	2800      	cmp	r0, #0
 8001eaa:	da09      	bge.n	8001ec0 <CTR_LP+0x134>
      {
        /* clear int flag */
        _ClearEP_CTR_RX(EPindex);
 8001eac:	6818      	ldr	r0, [r3, #0]
 8001eae:	f640 718f 	movw	r1, #3983	; 0xf8f
 8001eb2:	4001      	ands	r1, r0
 8001eb4:	6019      	str	r1, [r3, #0]

        /* call OUT service function */
        (*pEpInt_OUT[EPindex-1])();
 8001eb6:	4b16      	ldr	r3, [pc, #88]	; (8001f10 <CTR_LP+0x184>)
 8001eb8:	3a01      	subs	r2, #1
 8001eba:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
 8001ebe:	4780      	blx	r0

      } /* if((wEPVal & EP_CTR_RX) */

      if ((wEPVal & EP_CTR_TX) != 0)
 8001ec0:	f8bd 1006 	ldrh.w	r1, [sp, #6]
 8001ec4:	f001 0280 	and.w	r2, r1, #128	; 0x80
 8001ec8:	b293      	uxth	r3, r2
 8001eca:	2b00      	cmp	r3, #0
 8001ecc:	f43f af62 	beq.w	8001d94 <CTR_LP+0x8>
      {
        /* clear int flag */
        _ClearEP_CTR_TX(EPindex);
 8001ed0:	480b      	ldr	r0, [pc, #44]	; (8001f00 <CTR_LP+0x174>)
 8001ed2:	7802      	ldrb	r2, [r0, #0]
 8001ed4:	0091      	lsls	r1, r2, #2
 8001ed6:	f101 4380 	add.w	r3, r1, #1073741824	; 0x40000000
 8001eda:	f503 41b8 	add.w	r1, r3, #23552	; 0x5c00
 8001ede:	6808      	ldr	r0, [r1, #0]
 8001ee0:	f648 730f 	movw	r3, #36623	; 0x8f0f
 8001ee4:	4003      	ands	r3, r0
 8001ee6:	600b      	str	r3, [r1, #0]

        /* call IN service function */
        (*pEpInt_IN[EPindex-1])();
 8001ee8:	490a      	ldr	r1, [pc, #40]	; (8001f14 <CTR_LP+0x188>)
 8001eea:	3a01      	subs	r2, #1
 8001eec:	f851 0022 	ldr.w	r0, [r1, r2, lsl #2]
 8001ef0:	4780      	blx	r0
 8001ef2:	e74f      	b.n	8001d94 <CTR_LP+0x8>
      } /* if((wEPVal & EP_CTR_TX) != 0) */

    }/* if(EPindex == 0) else */

  }/* while(...) */
}
 8001ef4:	bd3e      	pop	{r1, r2, r3, r4, r5, pc}
 8001ef6:	bf00      	nop
 8001ef8:	40005c44 	.word	0x40005c44
 8001efc:	200006a6 	.word	0x200006a6
 8001f00:	200006b4 	.word	0x200006b4
 8001f04:	40005c00 	.word	0x40005c00
 8001f08:	200006de 	.word	0x200006de
 8001f0c:	200006e0 	.word	0x200006e0
 8001f10:	2000017c 	.word	0x2000017c
 8001f14:	20000198 	.word	0x20000198

08001f18 <UserToPMABufferCopy>:
*                  - wNBytes: no. of bytes to be copied.
* Output         : None.
* Return         : None	.
*******************************************************************************/
void UserToPMABufferCopy(uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 8001f18:	b530      	push	{r4, r5, lr}
  uint32_t n = (wNBytes + 1) >> 1;   /* n = (wNBytes + 1) / 2 */
  uint32_t i, temp1, temp2;
  uint16_t *pdwVal;
  pdwVal = (uint16_t *)(wPMABufAddr * 2 + PMAAddr);
 8001f1a:	f101 5100 	add.w	r1, r1, #536870912	; 0x20000000
 8001f1e:	f501 5340 	add.w	r3, r1, #12288	; 0x3000
* Output         : None.
* Return         : None	.
*******************************************************************************/
void UserToPMABufferCopy(uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
  uint32_t n = (wNBytes + 1) >> 1;   /* n = (wNBytes + 1) / 2 */
 8001f22:	3201      	adds	r2, #1
  uint32_t i, temp1, temp2;
  uint16_t *pdwVal;
  pdwVal = (uint16_t *)(wPMABufAddr * 2 + PMAAddr);
 8001f24:	0059      	lsls	r1, r3, #1
* Output         : None.
* Return         : None	.
*******************************************************************************/
void UserToPMABufferCopy(uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
  uint32_t n = (wNBytes + 1) >> 1;   /* n = (wNBytes + 1) / 2 */
 8001f26:	1052      	asrs	r2, r2, #1
  uint32_t i, temp1, temp2;
  uint16_t *pdwVal;
  pdwVal = (uint16_t *)(wPMABufAddr * 2 + PMAAddr);
  for (i = n; i != 0; i--)
 8001f28:	2300      	movs	r3, #0
 8001f2a:	3002      	adds	r0, #2
 8001f2c:	4293      	cmp	r3, r2
 8001f2e:	d009      	beq.n	8001f44 <UserToPMABufferCopy+0x2c>
  {
    temp1 = (uint16_t) * pbUsrBuf;
    pbUsrBuf++;
    temp2 = temp1 | (uint16_t) * pbUsrBuf << 8;
 8001f30:	f810 5c01 	ldrb.w	r5, [r0, #-1]
  uint32_t i, temp1, temp2;
  uint16_t *pdwVal;
  pdwVal = (uint16_t *)(wPMABufAddr * 2 + PMAAddr);
  for (i = n; i != 0; i--)
  {
    temp1 = (uint16_t) * pbUsrBuf;
 8001f34:	f810 4c02 	ldrb.w	r4, [r0, #-2]
    pbUsrBuf++;
    temp2 = temp1 | (uint16_t) * pbUsrBuf << 8;
 8001f38:	ea44 2405 	orr.w	r4, r4, r5, lsl #8
    *pdwVal++ = temp2;
 8001f3c:	f821 4023 	strh.w	r4, [r1, r3, lsl #2]
 8001f40:	3301      	adds	r3, #1
 8001f42:	e7f2      	b.n	8001f2a <UserToPMABufferCopy+0x12>
    pdwVal++;
    pbUsrBuf++;
  }
}
 8001f44:	bd30      	pop	{r4, r5, pc}

08001f46 <PMAToUserBufferCopy>:
void PMAToUserBufferCopy(uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
  uint32_t n = (wNBytes + 1) >> 1;/* /2*/
  uint32_t i;
  uint32_t *pdwVal;
  pdwVal = (uint32_t *)(wPMABufAddr * 2 + PMAAddr);
 8001f46:	f101 5100 	add.w	r1, r1, #536870912	; 0x20000000
*                  - wNBytes     = no. of bytes to be copied.
* Output         : None.
* Return         : None.
*******************************************************************************/
void PMAToUserBufferCopy(uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 8001f4a:	b510      	push	{r4, lr}
  uint32_t n = (wNBytes + 1) >> 1;/* /2*/
 8001f4c:	3201      	adds	r2, #1
  uint32_t i;
  uint32_t *pdwVal;
  pdwVal = (uint32_t *)(wPMABufAddr * 2 + PMAAddr);
 8001f4e:	f501 5440 	add.w	r4, r1, #12288	; 0x3000
* Output         : None.
* Return         : None.
*******************************************************************************/
void PMAToUserBufferCopy(uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
  uint32_t n = (wNBytes + 1) >> 1;/* /2*/
 8001f52:	1052      	asrs	r2, r2, #1
  uint32_t i;
  uint32_t *pdwVal;
  pdwVal = (uint32_t *)(wPMABufAddr * 2 + PMAAddr);
 8001f54:	0064      	lsls	r4, r4, #1
  for (i = n; i != 0; i--)
 8001f56:	2300      	movs	r3, #0
 8001f58:	4293      	cmp	r3, r2
 8001f5a:	d005      	beq.n	8001f68 <PMAToUserBufferCopy+0x22>
  {
    *(uint16_t*)pbUsrBuf++ = *pdwVal++;
 8001f5c:	f854 1023 	ldr.w	r1, [r4, r3, lsl #2]
 8001f60:	f820 1013 	strh.w	r1, [r0, r3, lsl #1]
 8001f64:	3301      	adds	r3, #1
 8001f66:	e7f7      	b.n	8001f58 <PMAToUserBufferCopy+0x12>
    pbUsrBuf++;
  }
}
 8001f68:	bd10      	pop	{r4, pc}

08001f6a <SetEPTxStatus>:
* Output         : None.
* Return         : None.
*******************************************************************************/
void SetEPTxStatus(uint8_t bEpNum, uint16_t wState)
{
  _SetEPTxStatus(bEpNum, wState);
 8001f6a:	0080      	lsls	r0, r0, #2
 8001f6c:	f100 4280 	add.w	r2, r0, #1073741824	; 0x40000000
 8001f70:	f502 42b8 	add.w	r2, r2, #23552	; 0x5c00
 8001f74:	6810      	ldr	r0, [r2, #0]
 8001f76:	f648 73bf 	movw	r3, #36799	; 0x8fbf
 8001f7a:	4003      	ands	r3, r0
 8001f7c:	f001 0010 	and.w	r0, r1, #16
 8001f80:	b280      	uxth	r0, r0
 8001f82:	b908      	cbnz	r0, 8001f88 <SetEPTxStatus+0x1e>
 8001f84:	b29b      	uxth	r3, r3
 8001f86:	e001      	b.n	8001f8c <SetEPTxStatus+0x22>
 8001f88:	f083 0310 	eor.w	r3, r3, #16
 8001f8c:	f001 0120 	and.w	r1, r1, #32
 8001f90:	b288      	uxth	r0, r1
 8001f92:	b108      	cbz	r0, 8001f98 <SetEPTxStatus+0x2e>
 8001f94:	f083 0320 	eor.w	r3, r3, #32
 8001f98:	f443 4100 	orr.w	r1, r3, #32768	; 0x8000
 8001f9c:	f041 0080 	orr.w	r0, r1, #128	; 0x80
 8001fa0:	6010      	str	r0, [r2, #0]
 8001fa2:	4770      	bx	lr

08001fa4 <SetEPRxValid>:
* Output         : None.
* Return         : None.
*******************************************************************************/
void SetEPRxValid(uint8_t bEpNum)
{
  _SetEPRxStatus(bEpNum, EP_RX_VALID);
 8001fa4:	0080      	lsls	r0, r0, #2
 8001fa6:	f100 4280 	add.w	r2, r0, #1073741824	; 0x40000000
 8001faa:	f502 40b8 	add.w	r0, r2, #23552	; 0x5c00
 8001fae:	6801      	ldr	r1, [r0, #0]
 8001fb0:	f64b 738f 	movw	r3, #49039	; 0xbf8f
 8001fb4:	400b      	ands	r3, r1
 8001fb6:	f483 5240 	eor.w	r2, r3, #12288	; 0x3000
 8001fba:	f442 4100 	orr.w	r1, r2, #32768	; 0x8000
 8001fbe:	f041 0380 	orr.w	r3, r1, #128	; 0x80
 8001fc2:	6003      	str	r3, [r0, #0]
 8001fc4:	4770      	bx	lr

08001fc6 <Clear_Status_Out>:
* Output         : None.
* Return         : None.
*******************************************************************************/
void Clear_Status_Out(uint8_t bEpNum)
{
  _ClearEP_KIND(bEpNum);
 8001fc6:	0080      	lsls	r0, r0, #2
 8001fc8:	f100 4280 	add.w	r2, r0, #1073741824	; 0x40000000
 8001fcc:	f502 40b8 	add.w	r0, r2, #23552	; 0x5c00
 8001fd0:	6801      	ldr	r1, [r0, #0]
 8001fd2:	f640 630f 	movw	r3, #3599	; 0xe0f
 8001fd6:	400b      	ands	r3, r1
 8001fd8:	f443 4200 	orr.w	r2, r3, #32768	; 0x8000
 8001fdc:	f042 0180 	orr.w	r1, r2, #128	; 0x80
 8001fe0:	6001      	str	r1, [r0, #0]
 8001fe2:	4770      	bx	lr

08001fe4 <ClearDTOG_RX>:
* Output         : None.
* Return         : None.
*******************************************************************************/
void ClearDTOG_RX(uint8_t bEpNum)
{
  _ClearDTOG_RX(bEpNum);
 8001fe4:	0080      	lsls	r0, r0, #2
 8001fe6:	f100 4380 	add.w	r3, r0, #1073741824	; 0x40000000
 8001fea:	f503 40b8 	add.w	r0, r3, #23552	; 0x5c00
 8001fee:	6802      	ldr	r2, [r0, #0]
 8001ff0:	0451      	lsls	r1, r2, #17
 8001ff2:	d508      	bpl.n	8002006 <ClearDTOG_RX+0x22>
 8001ff4:	6801      	ldr	r1, [r0, #0]
 8001ff6:	f640 730f 	movw	r3, #3855	; 0xf0f
 8001ffa:	400b      	ands	r3, r1
 8001ffc:	f443 4240 	orr.w	r2, r3, #49152	; 0xc000
 8002000:	f042 0180 	orr.w	r1, r2, #128	; 0x80
 8002004:	6001      	str	r1, [r0, #0]
 8002006:	4770      	bx	lr

08002008 <ClearDTOG_TX>:
* Output         : None.
* Return         : None.
*******************************************************************************/
void ClearDTOG_TX(uint8_t bEpNum)
{
  _ClearDTOG_TX(bEpNum);
 8002008:	0080      	lsls	r0, r0, #2
 800200a:	f100 4380 	add.w	r3, r0, #1073741824	; 0x40000000
 800200e:	f503 43b8 	add.w	r3, r3, #23552	; 0x5c00
 8002012:	681a      	ldr	r2, [r3, #0]
 8002014:	0650      	lsls	r0, r2, #25
 8002016:	d508      	bpl.n	800202a <ClearDTOG_TX+0x22>
 8002018:	6819      	ldr	r1, [r3, #0]
 800201a:	f640 700f 	movw	r0, #3855	; 0xf0f
 800201e:	4008      	ands	r0, r1
 8002020:	f440 4200 	orr.w	r2, r0, #32768	; 0x8000
 8002024:	f042 01c0 	orr.w	r1, r2, #192	; 0xc0
 8002028:	6019      	str	r1, [r3, #0]
 800202a:	4770      	bx	lr

0800202c <GetEPTxAddr>:
* Output         : None.
* Return         : Rx buffer address. 
*******************************************************************************/
uint16_t GetEPTxAddr(uint8_t bEpNum)
{
  return(_GetEPTxAddr(bEpNum));
 800202c:	4b05      	ldr	r3, [pc, #20]	; (8002044 <GetEPTxAddr+0x18>)
 800202e:	6819      	ldr	r1, [r3, #0]
  uint8_t bTemp;
  uint16_t wRet;
  bTemp = (uint8_t)(wSwW & 0xff);
  wRet =  (wSwW >> 8) | ((uint16_t)bTemp << 8);
  return(wRet);
}
 8002030:	b28a      	uxth	r2, r1
* Output         : None.
* Return         : Rx buffer address. 
*******************************************************************************/
uint16_t GetEPTxAddr(uint8_t bEpNum)
{
  return(_GetEPTxAddr(bEpNum));
 8002032:	eb02 00c0 	add.w	r0, r2, r0, lsl #3
 8002036:	f100 5300 	add.w	r3, r0, #536870912	; 0x20000000
 800203a:	f503 5140 	add.w	r1, r3, #12288	; 0x3000
 800203e:	004a      	lsls	r2, r1, #1
}
 8002040:	8810      	ldrh	r0, [r2, #0]
 8002042:	4770      	bx	lr
 8002044:	40005c50 	.word	0x40005c50

08002048 <GetEPRxAddr>:
* Output         : None.
* Return         : Rx buffer address.
*******************************************************************************/
uint16_t GetEPRxAddr(uint8_t bEpNum)
{
  return(_GetEPRxAddr(bEpNum));
 8002048:	4b04      	ldr	r3, [pc, #16]	; (800205c <GetEPRxAddr+0x14>)
 800204a:	6819      	ldr	r1, [r3, #0]
 800204c:	4b04      	ldr	r3, [pc, #16]	; (8002060 <GetEPRxAddr+0x18>)
  uint8_t bTemp;
  uint16_t wRet;
  bTemp = (uint8_t)(wSwW & 0xff);
  wRet =  (wSwW >> 8) | ((uint16_t)bTemp << 8);
  return(wRet);
}
 800204e:	b28a      	uxth	r2, r1
* Output         : None.
* Return         : Rx buffer address.
*******************************************************************************/
uint16_t GetEPRxAddr(uint8_t bEpNum)
{
  return(_GetEPRxAddr(bEpNum));
 8002050:	eb02 00c0 	add.w	r0, r2, r0, lsl #3
 8002054:	18c1      	adds	r1, r0, r3
 8002056:	004a      	lsls	r2, r1, #1
}
 8002058:	8810      	ldrh	r0, [r2, #0]
 800205a:	4770      	bx	lr
 800205c:	40005c50 	.word	0x40005c50
 8002060:	20003004 	.word	0x20003004

08002064 <SetEPTxCount>:
* Output         : None.
* Return         : None.
*******************************************************************************/
void SetEPTxCount(uint8_t bEpNum, uint16_t wCount)
{
  _SetEPTxCount(bEpNum, wCount);
 8002064:	4b04      	ldr	r3, [pc, #16]	; (8002078 <SetEPTxCount+0x14>)
 8002066:	681a      	ldr	r2, [r3, #0]
  uint8_t bTemp;
  uint16_t wRet;
  bTemp = (uint8_t)(wSwW & 0xff);
  wRet =  (wSwW >> 8) | ((uint16_t)bTemp << 8);
  return(wRet);
}
 8002068:	b293      	uxth	r3, r2
* Output         : None.
* Return         : None.
*******************************************************************************/
void SetEPTxCount(uint8_t bEpNum, uint16_t wCount)
{
  _SetEPTxCount(bEpNum, wCount);
 800206a:	4a04      	ldr	r2, [pc, #16]	; (800207c <SetEPTxCount+0x18>)
 800206c:	eb03 00c0 	add.w	r0, r3, r0, lsl #3
 8002070:	1883      	adds	r3, r0, r2
 8002072:	0058      	lsls	r0, r3, #1
 8002074:	6001      	str	r1, [r0, #0]
 8002076:	4770      	bx	lr
 8002078:	40005c50 	.word	0x40005c50
 800207c:	20003002 	.word	0x20003002

08002080 <SetEPRxCount>:
* Output         : None.
* Return         : None.
*******************************************************************************/
void SetEPRxCount(uint8_t bEpNum, uint16_t wCount)
{
  _SetEPRxCount(bEpNum, wCount);
 8002080:	4b0c      	ldr	r3, [pc, #48]	; (80020b4 <SetEPRxCount+0x34>)
 8002082:	681a      	ldr	r2, [r3, #0]
  uint8_t bTemp;
  uint16_t wRet;
  bTemp = (uint8_t)(wSwW & 0xff);
  wRet =  (wSwW >> 8) | ((uint16_t)bTemp << 8);
  return(wRet);
}
 8002084:	b293      	uxth	r3, r2
* Output         : None.
* Return         : None.
*******************************************************************************/
void SetEPRxCount(uint8_t bEpNum, uint16_t wCount)
{
  _SetEPRxCount(bEpNum, wCount);
 8002086:	4a0c      	ldr	r2, [pc, #48]	; (80020b8 <SetEPRxCount+0x38>)
 8002088:	eb03 00c0 	add.w	r0, r3, r0, lsl #3
 800208c:	1883      	adds	r3, r0, r2
 800208e:	005a      	lsls	r2, r3, #1
 8002090:	293e      	cmp	r1, #62	; 0x3e
 8002092:	d908      	bls.n	80020a6 <SetEPRxCount+0x26>
 8002094:	094b      	lsrs	r3, r1, #5
 8002096:	06c9      	lsls	r1, r1, #27
 8002098:	d101      	bne.n	800209e <SetEPRxCount+0x1e>
 800209a:	1e58      	subs	r0, r3, #1
 800209c:	b283      	uxth	r3, r0
 800209e:	0299      	lsls	r1, r3, #10
 80020a0:	f441 4100 	orr.w	r1, r1, #32768	; 0x8000
 80020a4:	e004      	b.n	80020b0 <SetEPRxCount+0x30>
 80020a6:	084b      	lsrs	r3, r1, #1
 80020a8:	07c8      	lsls	r0, r1, #31
 80020aa:	bf48      	it	mi
 80020ac:	3301      	addmi	r3, #1
 80020ae:	0299      	lsls	r1, r3, #10
 80020b0:	6011      	str	r1, [r2, #0]
 80020b2:	4770      	bx	lr
 80020b4:	40005c50 	.word	0x40005c50
 80020b8:	20003006 	.word	0x20003006

080020bc <ByteSwap>:
uint16_t ByteSwap(uint16_t wSwW)
{
  uint8_t bTemp;
  uint16_t wRet;
  bTemp = (uint8_t)(wSwW & 0xff);
  wRet =  (wSwW >> 8) | ((uint16_t)bTemp << 8);
 80020bc:	b2c3      	uxtb	r3, r0
 80020be:	0a00      	lsrs	r0, r0, #8
  return(wRet);
}
 80020c0:	ea40 2003 	orr.w	r0, r0, r3, lsl #8
 80020c4:	4770      	bx	lr
	...

080020c8 <USB_SIL_Init>:
*******************************************************************************/
uint32_t USB_SIL_Init(void)
{
  /* USB interrupts initialization */
  /* clear pending interrupts */
  _SetISTR(0);
 80020c8:	4b04      	ldr	r3, [pc, #16]	; (80020dc <USB_SIL_Init+0x14>)
 80020ca:	2000      	movs	r0, #0
 80020cc:	6018      	str	r0, [r3, #0]
  wInterrupt_Mask = IMR_MSK;
 80020ce:	4a04      	ldr	r2, [pc, #16]	; (80020e0 <USB_SIL_Init+0x18>)
  /* set interrupts mask */
  _SetCNTR(wInterrupt_Mask);
 80020d0:	4b04      	ldr	r3, [pc, #16]	; (80020e4 <USB_SIL_Init+0x1c>)
uint32_t USB_SIL_Init(void)
{
  /* USB interrupts initialization */
  /* clear pending interrupts */
  _SetISTR(0);
  wInterrupt_Mask = IMR_MSK;
 80020d2:	f44f 413f 	mov.w	r1, #48896	; 0xbf00
 80020d6:	8011      	strh	r1, [r2, #0]
  /* set interrupts mask */
  _SetCNTR(wInterrupt_Mask);
 80020d8:	6019      	str	r1, [r3, #0]
  return 0;
}
 80020da:	4770      	bx	lr
 80020dc:	40005c44 	.word	0x40005c44
 80020e0:	200006dc 	.word	0x200006dc
 80020e4:	40005c40 	.word	0x40005c40

080020e8 <NVIC_PriorityGroupConfig>:
{
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(NVIC_PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to NVIC_PriorityGroup value */
  SCB->AIRCR = AIRCR_VECTKEY_MASK | NVIC_PriorityGroup;
 80020e8:	f040 60bf 	orr.w	r0, r0, #100139008	; 0x5f80000
 80020ec:	4b02      	ldr	r3, [pc, #8]	; (80020f8 <NVIC_PriorityGroupConfig+0x10>)
 80020ee:	f440 3100 	orr.w	r1, r0, #131072	; 0x20000
 80020f2:	60d9      	str	r1, [r3, #12]
 80020f4:	4770      	bx	lr
 80020f6:	bf00      	nop
 80020f8:	e000ed00 	.word	0xe000ed00

080020fc <NVIC_Init>:
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NVIC_InitStruct->NVIC_IRQChannelCmd));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(NVIC_InitStruct->NVIC_IRQChannelPreemptionPriority));  
  assert_param(IS_NVIC_SUB_PRIORITY(NVIC_InitStruct->NVIC_IRQChannelSubPriority));
    
  if (NVIC_InitStruct->NVIC_IRQChannelCmd != DISABLE)
 80020fc:	78c3      	ldrb	r3, [r0, #3]
  * @param  NVIC_InitStruct: pointer to a NVIC_InitTypeDef structure that contains
  *         the configuration information for the specified NVIC peripheral.
  * @retval None
  */
void NVIC_Init(NVIC_InitTypeDef* NVIC_InitStruct)
{
 80020fe:	b510      	push	{r4, lr}
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NVIC_InitStruct->NVIC_IRQChannelCmd));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(NVIC_InitStruct->NVIC_IRQChannelPreemptionPriority));  
  assert_param(IS_NVIC_SUB_PRIORITY(NVIC_InitStruct->NVIC_IRQChannelSubPriority));
    
  if (NVIC_InitStruct->NVIC_IRQChannelCmd != DISABLE)
 8002100:	b303      	cbz	r3, 8002144 <NVIC_Init+0x48>
  {
    /* Compute the Corresponding IRQ Priority --------------------------------*/    
    tmppriority = (0x700 - ((SCB->AIRCR) & (uint32_t)0x700))>> 0x08;
 8002102:	4c16      	ldr	r4, [pc, #88]	; (800215c <NVIC_Init+0x60>)
 8002104:	68e1      	ldr	r1, [r4, #12]
 8002106:	43cb      	mvns	r3, r1
 8002108:	f3c3 2402 	ubfx	r4, r3, #8, #3
    tmppre = (0x4 - tmppriority);
    tmpsub = tmpsub >> tmppriority;

    tmppriority = (uint32_t)NVIC_InitStruct->NVIC_IRQChannelPreemptionPriority << tmppre;
 800210c:	7841      	ldrb	r1, [r0, #1]
    
  if (NVIC_InitStruct->NVIC_IRQChannelCmd != DISABLE)
  {
    /* Compute the Corresponding IRQ Priority --------------------------------*/    
    tmppriority = (0x700 - ((SCB->AIRCR) & (uint32_t)0x700))>> 0x08;
    tmppre = (0x4 - tmppriority);
 800210e:	f1c4 0204 	rsb	r2, r4, #4
    tmpsub = tmpsub >> tmppriority;

    tmppriority = (uint32_t)NVIC_InitStruct->NVIC_IRQChannelPreemptionPriority << tmppre;
 8002112:	fa01 f102 	lsl.w	r1, r1, r2
  if (NVIC_InitStruct->NVIC_IRQChannelCmd != DISABLE)
  {
    /* Compute the Corresponding IRQ Priority --------------------------------*/    
    tmppriority = (0x700 - ((SCB->AIRCR) & (uint32_t)0x700))>> 0x08;
    tmppre = (0x4 - tmppriority);
    tmpsub = tmpsub >> tmppriority;
 8002116:	220f      	movs	r2, #15
 8002118:	fa22 f204 	lsr.w	r2, r2, r4

    tmppriority = (uint32_t)NVIC_InitStruct->NVIC_IRQChannelPreemptionPriority << tmppre;
    tmppriority |=  NVIC_InitStruct->NVIC_IRQChannelSubPriority & tmpsub;
 800211c:	7884      	ldrb	r4, [r0, #2]
    tmppriority = tmppriority << 0x04;
        
    NVIC->IP[NVIC_InitStruct->NVIC_IRQChannel] = tmppriority;
 800211e:	7803      	ldrb	r3, [r0, #0]
    tmppriority = (0x700 - ((SCB->AIRCR) & (uint32_t)0x700))>> 0x08;
    tmppre = (0x4 - tmppriority);
    tmpsub = tmpsub >> tmppriority;

    tmppriority = (uint32_t)NVIC_InitStruct->NVIC_IRQChannelPreemptionPriority << tmppre;
    tmppriority |=  NVIC_InitStruct->NVIC_IRQChannelSubPriority & tmpsub;
 8002120:	4022      	ands	r2, r4
 8002122:	430a      	orrs	r2, r1
    tmppriority = tmppriority << 0x04;
 8002124:	0111      	lsls	r1, r2, #4
        
    NVIC->IP[NVIC_InitStruct->NVIC_IRQChannel] = tmppriority;
 8002126:	f103 4360 	add.w	r3, r3, #3758096384	; 0xe0000000
 800212a:	b2ca      	uxtb	r2, r1
 800212c:	f503 4161 	add.w	r1, r3, #57600	; 0xe100
 8002130:	f881 2300 	strb.w	r2, [r1, #768]	; 0x300
    
    /* Enable the Selected IRQ Channels --------------------------------------*/
    NVIC->ISER[NVIC_InitStruct->NVIC_IRQChannel >> 0x05] =
 8002134:	7800      	ldrb	r0, [r0, #0]
      (uint32_t)0x01 << (NVIC_InitStruct->NVIC_IRQChannel & (uint8_t)0x1F);
 8002136:	2201      	movs	r2, #1
 8002138:	f000 031f 	and.w	r3, r0, #31
    tmppriority = tmppriority << 0x04;
        
    NVIC->IP[NVIC_InitStruct->NVIC_IRQChannel] = tmppriority;
    
    /* Enable the Selected IRQ Channels --------------------------------------*/
    NVIC->ISER[NVIC_InitStruct->NVIC_IRQChannel >> 0x05] =
 800213c:	0941      	lsrs	r1, r0, #5
      (uint32_t)0x01 << (NVIC_InitStruct->NVIC_IRQChannel & (uint8_t)0x1F);
 800213e:	fa02 f003 	lsl.w	r0, r2, r3
 8002142:	e007      	b.n	8002154 <NVIC_Init+0x58>
  }
  else
  {
    /* Disable the Selected IRQ Channels -------------------------------------*/
    NVIC->ICER[NVIC_InitStruct->NVIC_IRQChannel >> 0x05] =
 8002144:	7800      	ldrb	r0, [r0, #0]
      (uint32_t)0x01 << (NVIC_InitStruct->NVIC_IRQChannel & (uint8_t)0x1F);
 8002146:	2201      	movs	r2, #1
 8002148:	f000 031f 	and.w	r3, r0, #31
      (uint32_t)0x01 << (NVIC_InitStruct->NVIC_IRQChannel & (uint8_t)0x1F);
  }
  else
  {
    /* Disable the Selected IRQ Channels -------------------------------------*/
    NVIC->ICER[NVIC_InitStruct->NVIC_IRQChannel >> 0x05] =
 800214c:	0941      	lsrs	r1, r0, #5
      (uint32_t)0x01 << (NVIC_InitStruct->NVIC_IRQChannel & (uint8_t)0x1F);
 800214e:	fa02 f003 	lsl.w	r0, r2, r3
      (uint32_t)0x01 << (NVIC_InitStruct->NVIC_IRQChannel & (uint8_t)0x1F);
  }
  else
  {
    /* Disable the Selected IRQ Channels -------------------------------------*/
    NVIC->ICER[NVIC_InitStruct->NVIC_IRQChannel >> 0x05] =
 8002152:	3120      	adds	r1, #32
 8002154:	4b02      	ldr	r3, [pc, #8]	; (8002160 <NVIC_Init+0x64>)
 8002156:	f843 0021 	str.w	r0, [r3, r1, lsl #2]
 800215a:	bd10      	pop	{r4, pc}
 800215c:	e000ed00 	.word	0xe000ed00
 8002160:	e000e100 	.word	0xe000e100

08002164 <BKP_WriteBackupRegister>:
  __IO uint32_t tmp = 0;

  /* Check the parameters */
  assert_param(IS_BKP_DR(BKP_DR));

  tmp = (uint32_t)BKP_BASE; 
 8002164:	4a05      	ldr	r2, [pc, #20]	; (800217c <BKP_WriteBackupRegister+0x18>)
  *   This parameter can be BKP_DRx where x:[1, 42]
  * @param  Data: data to write
  * @retval None
  */
void BKP_WriteBackupRegister(uint16_t BKP_DR, uint16_t Data)
{
 8002166:	b082      	sub	sp, #8
  __IO uint32_t tmp = 0;
 8002168:	2300      	movs	r3, #0
 800216a:	9301      	str	r3, [sp, #4]

  /* Check the parameters */
  assert_param(IS_BKP_DR(BKP_DR));

  tmp = (uint32_t)BKP_BASE; 
 800216c:	9201      	str	r2, [sp, #4]
  tmp += BKP_DR;
 800216e:	9b01      	ldr	r3, [sp, #4]
 8002170:	18c0      	adds	r0, r0, r3
 8002172:	9001      	str	r0, [sp, #4]

  *(__IO uint32_t *) tmp = Data;
 8002174:	9a01      	ldr	r2, [sp, #4]
 8002176:	6011      	str	r1, [r2, #0]
}
 8002178:	b002      	add	sp, #8
 800217a:	4770      	bx	lr
 800217c:	40006c00 	.word	0x40006c00

08002180 <BKP_ReadBackupRegister>:
  __IO uint32_t tmp = 0;

  /* Check the parameters */
  assert_param(IS_BKP_DR(BKP_DR));

  tmp = (uint32_t)BKP_BASE; 
 8002180:	4906      	ldr	r1, [pc, #24]	; (800219c <BKP_ReadBackupRegister+0x1c>)
  * @param  BKP_DR: specifies the Data Backup Register.
  *   This parameter can be BKP_DRx where x:[1, 42]
  * @retval The content of the specified Data Backup Register
  */
uint16_t BKP_ReadBackupRegister(uint16_t BKP_DR)
{
 8002182:	b082      	sub	sp, #8
  __IO uint32_t tmp = 0;
 8002184:	2300      	movs	r3, #0
 8002186:	9301      	str	r3, [sp, #4]

  /* Check the parameters */
  assert_param(IS_BKP_DR(BKP_DR));

  tmp = (uint32_t)BKP_BASE; 
 8002188:	9101      	str	r1, [sp, #4]
  tmp += BKP_DR;
 800218a:	9a01      	ldr	r2, [sp, #4]
 800218c:	1880      	adds	r0, r0, r2
 800218e:	9001      	str	r0, [sp, #4]

  return (*(__IO uint16_t *) tmp);
 8002190:	9b01      	ldr	r3, [sp, #4]
 8002192:	8819      	ldrh	r1, [r3, #0]
}
 8002194:	b288      	uxth	r0, r1
 8002196:	b002      	add	sp, #8
 8002198:	4770      	bx	lr
 800219a:	bf00      	nop
 800219c:	40006c00 	.word	0x40006c00

080021a0 <EXTI_Init>:
  assert_param(IS_EXTI_LINE(EXTI_InitStruct->EXTI_Line));  
  assert_param(IS_FUNCTIONAL_STATE(EXTI_InitStruct->EXTI_LineCmd));

  tmp = (uint32_t)EXTI_BASE;
     
  if (EXTI_InitStruct->EXTI_LineCmd != DISABLE)
 80021a0:	7983      	ldrb	r3, [r0, #6]
  * @param  EXTI_InitStruct: pointer to a EXTI_InitTypeDef structure
  *         that contains the configuration information for the EXTI peripheral.
  * @retval None
  */
void EXTI_Init(EXTI_InitTypeDef* EXTI_InitStruct)
{
 80021a2:	b510      	push	{r4, lr}
  assert_param(IS_EXTI_LINE(EXTI_InitStruct->EXTI_Line));  
  assert_param(IS_FUNCTIONAL_STATE(EXTI_InitStruct->EXTI_LineCmd));

  tmp = (uint32_t)EXTI_BASE;
     
  if (EXTI_InitStruct->EXTI_LineCmd != DISABLE)
 80021a4:	2b00      	cmp	r3, #0
 80021a6:	d029      	beq.n	80021fc <EXTI_Init+0x5c>
  {
    /* Clear EXTI line configuration */
    EXTI->IMR &= ~EXTI_InitStruct->EXTI_Line;
 80021a8:	4b1a      	ldr	r3, [pc, #104]	; (8002214 <EXTI_Init+0x74>)
 80021aa:	6801      	ldr	r1, [r0, #0]
 80021ac:	681c      	ldr	r4, [r3, #0]
 80021ae:	43ca      	mvns	r2, r1
 80021b0:	4014      	ands	r4, r2
 80021b2:	601c      	str	r4, [r3, #0]
    EXTI->EMR &= ~EXTI_InitStruct->EXTI_Line;
 80021b4:	685c      	ldr	r4, [r3, #4]
 80021b6:	4022      	ands	r2, r4
 80021b8:	605a      	str	r2, [r3, #4]
    
    tmp += EXTI_InitStruct->EXTI_Mode;
 80021ba:	7902      	ldrb	r2, [r0, #4]
 80021bc:	f102 4480 	add.w	r4, r2, #1073741824	; 0x40000000
 80021c0:	f504 3282 	add.w	r2, r4, #66560	; 0x10400

    *(__IO uint32_t *) tmp |= EXTI_InitStruct->EXTI_Line;
 80021c4:	6814      	ldr	r4, [r2, #0]
 80021c6:	4321      	orrs	r1, r4
 80021c8:	6011      	str	r1, [r2, #0]

    /* Clear Rising Falling edge configuration */
    EXTI->RTSR &= ~EXTI_InitStruct->EXTI_Line;
 80021ca:	6802      	ldr	r2, [r0, #0]
 80021cc:	689c      	ldr	r4, [r3, #8]
 80021ce:	43d1      	mvns	r1, r2
 80021d0:	400c      	ands	r4, r1
 80021d2:	609c      	str	r4, [r3, #8]
    EXTI->FTSR &= ~EXTI_InitStruct->EXTI_Line;
 80021d4:	68dc      	ldr	r4, [r3, #12]
    
    /* Select the trigger for the selected external interrupts */
    if (EXTI_InitStruct->EXTI_Trigger == EXTI_Trigger_Rising_Falling)
 80021d6:	7940      	ldrb	r0, [r0, #5]

    *(__IO uint32_t *) tmp |= EXTI_InitStruct->EXTI_Line;

    /* Clear Rising Falling edge configuration */
    EXTI->RTSR &= ~EXTI_InitStruct->EXTI_Line;
    EXTI->FTSR &= ~EXTI_InitStruct->EXTI_Line;
 80021d8:	4021      	ands	r1, r4
    
    /* Select the trigger for the selected external interrupts */
    if (EXTI_InitStruct->EXTI_Trigger == EXTI_Trigger_Rising_Falling)
 80021da:	2810      	cmp	r0, #16

    *(__IO uint32_t *) tmp |= EXTI_InitStruct->EXTI_Line;

    /* Clear Rising Falling edge configuration */
    EXTI->RTSR &= ~EXTI_InitStruct->EXTI_Line;
    EXTI->FTSR &= ~EXTI_InitStruct->EXTI_Line;
 80021dc:	60d9      	str	r1, [r3, #12]
    
    /* Select the trigger for the selected external interrupts */
    if (EXTI_InitStruct->EXTI_Trigger == EXTI_Trigger_Rising_Falling)
 80021de:	d106      	bne.n	80021ee <EXTI_Init+0x4e>
    {
      /* Rising Falling edge */
      EXTI->RTSR |= EXTI_InitStruct->EXTI_Line;
 80021e0:	6898      	ldr	r0, [r3, #8]
 80021e2:	4310      	orrs	r0, r2
 80021e4:	6098      	str	r0, [r3, #8]
      EXTI->FTSR |= EXTI_InitStruct->EXTI_Line;
 80021e6:	68d9      	ldr	r1, [r3, #12]
 80021e8:	430a      	orrs	r2, r1
 80021ea:	60da      	str	r2, [r3, #12]
 80021ec:	bd10      	pop	{r4, pc}
    }
    else
    {
      tmp = (uint32_t)EXTI_BASE;
      tmp += EXTI_InitStruct->EXTI_Trigger;
 80021ee:	f100 4380 	add.w	r3, r0, #1073741824	; 0x40000000
 80021f2:	f503 3382 	add.w	r3, r3, #66560	; 0x10400

      *(__IO uint32_t *) tmp |= EXTI_InitStruct->EXTI_Line;
 80021f6:	6819      	ldr	r1, [r3, #0]
 80021f8:	430a      	orrs	r2, r1
 80021fa:	e008      	b.n	800220e <EXTI_Init+0x6e>
    }
  }
  else
  {
    tmp += EXTI_InitStruct->EXTI_Mode;
 80021fc:	7901      	ldrb	r1, [r0, #4]

    /* Disable the selected external lines */
    *(__IO uint32_t *) tmp &= ~EXTI_InitStruct->EXTI_Line;
 80021fe:	6800      	ldr	r0, [r0, #0]
      *(__IO uint32_t *) tmp |= EXTI_InitStruct->EXTI_Line;
    }
  }
  else
  {
    tmp += EXTI_InitStruct->EXTI_Mode;
 8002200:	f101 4280 	add.w	r2, r1, #1073741824	; 0x40000000
 8002204:	f502 3382 	add.w	r3, r2, #66560	; 0x10400

    /* Disable the selected external lines */
    *(__IO uint32_t *) tmp &= ~EXTI_InitStruct->EXTI_Line;
 8002208:	681a      	ldr	r2, [r3, #0]
 800220a:	ea22 0200 	bic.w	r2, r2, r0
 800220e:	601a      	str	r2, [r3, #0]
 8002210:	bd10      	pop	{r4, pc}
 8002212:	bf00      	nop
 8002214:	40010400 	.word	0x40010400

08002218 <EXTI_ClearFlag>:
void EXTI_ClearFlag(uint32_t EXTI_Line)
{
  /* Check the parameters */
  assert_param(IS_EXTI_LINE(EXTI_Line));
  
  EXTI->PR = EXTI_Line;
 8002218:	4b01      	ldr	r3, [pc, #4]	; (8002220 <EXTI_ClearFlag+0x8>)
 800221a:	6158      	str	r0, [r3, #20]
 800221c:	4770      	bx	lr
 800221e:	bf00      	nop
 8002220:	40010400 	.word	0x40010400

08002224 <EXTI_GetITStatus>:
  ITStatus bitstatus = RESET;
  uint32_t enablestatus = 0;
  /* Check the parameters */
  assert_param(IS_GET_EXTI_LINE(EXTI_Line));
  
  enablestatus =  EXTI->IMR & EXTI_Line;
 8002224:	4b06      	ldr	r3, [pc, #24]	; (8002240 <EXTI_GetITStatus+0x1c>)
 8002226:	681a      	ldr	r2, [r3, #0]
  if (((EXTI->PR & EXTI_Line) != (uint32_t)RESET) && (enablestatus != (uint32_t)RESET))
 8002228:	6959      	ldr	r1, [r3, #20]
 800222a:	ea10 0301 	ands.w	r3, r0, r1
 800222e:	d004      	beq.n	800223a <EXTI_GetITStatus+0x16>
 8002230:	4210      	tst	r0, r2
  {
    bitstatus = SET;
 8002232:	bf0c      	ite	eq
 8002234:	2000      	moveq	r0, #0
 8002236:	2001      	movne	r0, #1
 8002238:	4770      	bx	lr
  }
  else
  {
    bitstatus = RESET;
 800223a:	4618      	mov	r0, r3
  }
  return bitstatus;
}
 800223c:	4770      	bx	lr
 800223e:	bf00      	nop
 8002240:	40010400 	.word	0x40010400

08002244 <FLASH_Unlock>:
  * @retval None
  */
void FLASH_Unlock(void)
{
  /* Authorize the FPEC of Bank1 Access */
  FLASH->KEYR = FLASH_KEY1;
 8002244:	4a03      	ldr	r2, [pc, #12]	; (8002254 <FLASH_Unlock+0x10>)
 8002246:	4b04      	ldr	r3, [pc, #16]	; (8002258 <FLASH_Unlock+0x14>)
  FLASH->KEYR = FLASH_KEY2;
 8002248:	f102 3088 	add.w	r0, r2, #2290649224	; 0x88888888
  * @retval None
  */
void FLASH_Unlock(void)
{
  /* Authorize the FPEC of Bank1 Access */
  FLASH->KEYR = FLASH_KEY1;
 800224c:	605a      	str	r2, [r3, #4]
  FLASH->KEYR = FLASH_KEY2;
 800224e:	6058      	str	r0, [r3, #4]
 8002250:	4770      	bx	lr
 8002252:	bf00      	nop
 8002254:	45670123 	.word	0x45670123
 8002258:	40022000 	.word	0x40022000

0800225c <FLASH_GetBank1Status>:
  */
FLASH_Status FLASH_GetBank1Status(void)
{
  FLASH_Status flashstatus = FLASH_COMPLETE;
  
  if((FLASH->SR & FLASH_FLAG_BANK1_BSY) == FLASH_FLAG_BSY) 
 800225c:	4b08      	ldr	r3, [pc, #32]	; (8002280 <FLASH_GetBank1Status+0x24>)
 800225e:	68da      	ldr	r2, [r3, #12]
 8002260:	07d2      	lsls	r2, r2, #31
 8002262:	d409      	bmi.n	8002278 <FLASH_GetBank1Status+0x1c>
  {
    flashstatus = FLASH_BUSY;
  }
  else 
  {  
    if((FLASH->SR & FLASH_FLAG_BANK1_PGERR) != 0)
 8002264:	68d8      	ldr	r0, [r3, #12]
 8002266:	0740      	lsls	r0, r0, #29
 8002268:	d408      	bmi.n	800227c <FLASH_GetBank1Status+0x20>
    { 
      flashstatus = FLASH_ERROR_PG;
    }
    else 
    {
      if((FLASH->SR & FLASH_FLAG_BANK1_WRPRTERR) != 0 )
 800226a:	68d9      	ldr	r1, [r3, #12]
 800226c:	f011 0f10 	tst.w	r1, #16
      {
        flashstatus = FLASH_ERROR_WRP;
 8002270:	bf0c      	ite	eq
 8002272:	2004      	moveq	r0, #4
 8002274:	2003      	movne	r0, #3
 8002276:	4770      	bx	lr
{
  FLASH_Status flashstatus = FLASH_COMPLETE;
  
  if((FLASH->SR & FLASH_FLAG_BANK1_BSY) == FLASH_FLAG_BSY) 
  {
    flashstatus = FLASH_BUSY;
 8002278:	2001      	movs	r0, #1
 800227a:	4770      	bx	lr
  }
  else 
  {  
    if((FLASH->SR & FLASH_FLAG_BANK1_PGERR) != 0)
    { 
      flashstatus = FLASH_ERROR_PG;
 800227c:	2002      	movs	r0, #2
      }
    }
  }
  /* Return the Flash Status */
  return flashstatus;
}
 800227e:	4770      	bx	lr
 8002280:	40022000 	.word	0x40022000

08002284 <FLASH_WaitForLastOperation>:
  * @param  Timeout: FLASH programming Timeout
  * @retval FLASH Status: The returned value can be: FLASH_ERROR_PG,
  *         FLASH_ERROR_WRP, FLASH_COMPLETE or FLASH_TIMEOUT.
  */
FLASH_Status FLASH_WaitForLastOperation(uint32_t Timeout)
{ 
 8002284:	b510      	push	{r4, lr}
 8002286:	4604      	mov	r4, r0
  FLASH_Status status = FLASH_COMPLETE;
   
  /* Check for the Flash Status */
  status = FLASH_GetBank1Status();
 8002288:	f7ff ffe8 	bl	800225c <FLASH_GetBank1Status>
  /* Wait for a Flash operation to complete or a TIMEOUT to occur */
  while((status == FLASH_BUSY) && (Timeout != 0x00))
 800228c:	2801      	cmp	r0, #1
 800228e:	d106      	bne.n	800229e <FLASH_WaitForLastOperation+0x1a>
 8002290:	b11c      	cbz	r4, 800229a <FLASH_WaitForLastOperation+0x16>
  {
    status = FLASH_GetBank1Status();
 8002292:	f7ff ffe3 	bl	800225c <FLASH_GetBank1Status>
    Timeout--;
 8002296:	3c01      	subs	r4, #1
 8002298:	e7f8      	b.n	800228c <FLASH_WaitForLastOperation+0x8>
  }
  if(Timeout == 0x00 )
  {
    status = FLASH_TIMEOUT;
 800229a:	2005      	movs	r0, #5
 800229c:	bd10      	pop	{r4, pc}
 800229e:	2c00      	cmp	r4, #0
 80022a0:	bf08      	it	eq
 80022a2:	2005      	moveq	r0, #5
  }
  /* Return the operation status */
  return status;
}
 80022a4:	bd10      	pop	{r4, pc}
	...

080022a8 <FLASH_ProgramWord>:
  * @param  Data: specifies the data to be programmed.
  * @retval FLASH Status: The returned value can be: FLASH_ERROR_PG,
  *         FLASH_ERROR_WRP, FLASH_COMPLETE or FLASH_TIMEOUT. 
  */
FLASH_Status FLASH_ProgramWord(uint32_t Address, uint32_t Data)
{
 80022a8:	b573      	push	{r0, r1, r4, r5, r6, lr}
  FLASH_Status status = FLASH_COMPLETE;
  __IO uint32_t tmp = 0;
 80022aa:	2300      	movs	r3, #0
  * @param  Data: specifies the data to be programmed.
  * @retval FLASH Status: The returned value can be: FLASH_ERROR_PG,
  *         FLASH_ERROR_WRP, FLASH_COMPLETE or FLASH_TIMEOUT. 
  */
FLASH_Status FLASH_ProgramWord(uint32_t Address, uint32_t Data)
{
 80022ac:	4606      	mov	r6, r0
      }
    }
  }
#else
  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation(ProgramTimeout);
 80022ae:	f44f 5000 	mov.w	r0, #8192	; 0x2000
  * @param  Data: specifies the data to be programmed.
  * @retval FLASH Status: The returned value can be: FLASH_ERROR_PG,
  *         FLASH_ERROR_WRP, FLASH_COMPLETE or FLASH_TIMEOUT. 
  */
FLASH_Status FLASH_ProgramWord(uint32_t Address, uint32_t Data)
{
 80022b2:	460d      	mov	r5, r1
  FLASH_Status status = FLASH_COMPLETE;
  __IO uint32_t tmp = 0;
 80022b4:	9301      	str	r3, [sp, #4]
      }
    }
  }
#else
  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation(ProgramTimeout);
 80022b6:	f7ff ffe5 	bl	8002284 <FLASH_WaitForLastOperation>
  
  if(status == FLASH_COMPLETE)
 80022ba:	2804      	cmp	r0, #4
 80022bc:	d11a      	bne.n	80022f4 <FLASH_ProgramWord+0x4c>
  {
    /* if the previous operation is completed, proceed to program the new first 
    half word */
    FLASH->CR |= CR_PG_Set;
 80022be:	4c0e      	ldr	r4, [pc, #56]	; (80022f8 <FLASH_ProgramWord+0x50>)
  
    *(__IO uint16_t*)Address = (uint16_t)Data;
 80022c0:	b2aa      	uxth	r2, r5
  
  if(status == FLASH_COMPLETE)
  {
    /* if the previous operation is completed, proceed to program the new first 
    half word */
    FLASH->CR |= CR_PG_Set;
 80022c2:	6920      	ldr	r0, [r4, #16]
 80022c4:	f040 0101 	orr.w	r1, r0, #1
 80022c8:	6121      	str	r1, [r4, #16]
  
    *(__IO uint16_t*)Address = (uint16_t)Data;
    /* Wait for last operation to be completed */
    status = FLASH_WaitForLastOperation(ProgramTimeout);
 80022ca:	f44f 5000 	mov.w	r0, #8192	; 0x2000
  {
    /* if the previous operation is completed, proceed to program the new first 
    half word */
    FLASH->CR |= CR_PG_Set;
  
    *(__IO uint16_t*)Address = (uint16_t)Data;
 80022ce:	8032      	strh	r2, [r6, #0]
    /* Wait for last operation to be completed */
    status = FLASH_WaitForLastOperation(ProgramTimeout);
 80022d0:	f7ff ffd8 	bl	8002284 <FLASH_WaitForLastOperation>
 
    if(status == FLASH_COMPLETE)
 80022d4:	2804      	cmp	r0, #4
 80022d6:	d108      	bne.n	80022ea <FLASH_ProgramWord+0x42>
    {
      /* if the previous operation is completed, proceed to program the new second 
      half word */
      tmp = Address + 2;
 80022d8:	3602      	adds	r6, #2
 80022da:	9601      	str	r6, [sp, #4]

      *(__IO uint16_t*) tmp = Data >> 16;
 80022dc:	9b01      	ldr	r3, [sp, #4]
 80022de:	0c2d      	lsrs	r5, r5, #16
 80022e0:	801d      	strh	r5, [r3, #0]
    
      /* Wait for last operation to be completed */
      status = FLASH_WaitForLastOperation(ProgramTimeout);
 80022e2:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 80022e6:	f7ff ffcd 	bl	8002284 <FLASH_WaitForLastOperation>
      FLASH->CR &= CR_PG_Reset;
    }
    else
    {
      /* Disable the PG Bit */
      FLASH->CR &= CR_PG_Reset;
 80022ea:	6921      	ldr	r1, [r4, #16]
 80022ec:	f641 72fe 	movw	r2, #8190	; 0x1ffe
 80022f0:	400a      	ands	r2, r1
 80022f2:	6122      	str	r2, [r4, #16]
  }         
#endif /* STM32F10X_XL */
   
  /* Return the Program Status */
  return status;
}
 80022f4:	bd7c      	pop	{r2, r3, r4, r5, r6, pc}
 80022f6:	bf00      	nop
 80022f8:	40022000 	.word	0x40022000

080022fc <FLASH_ErasePage>:
  * @param  Page_Address: The page address to be erased.
  * @retval FLASH Status: The returned value can be: FLASH_BUSY, FLASH_ERROR_PG,
  *         FLASH_ERROR_WRP, FLASH_COMPLETE or FLASH_TIMEOUT.
  */
FLASH_Status FLASH_ErasePage(uint32_t Page_Address)
{
 80022fc:	b538      	push	{r3, r4, r5, lr}
 80022fe:	4605      	mov	r5, r0
      FLASH->CR2 &= CR_PER_Reset;
    }
  }
#else
  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation(EraseTimeout);
 8002300:	f44f 2030 	mov.w	r0, #720896	; 0xb0000
 8002304:	f7ff ffbe 	bl	8002284 <FLASH_WaitForLastOperation>
  
  if(status == FLASH_COMPLETE)
 8002308:	2804      	cmp	r0, #4
 800230a:	d112      	bne.n	8002332 <FLASH_ErasePage+0x36>
  { 
    /* if the previous operation is completed, proceed to erase the page */
    FLASH->CR|= CR_PER_Set;
 800230c:	4c09      	ldr	r4, [pc, #36]	; (8002334 <FLASH_ErasePage+0x38>)
 800230e:	6923      	ldr	r3, [r4, #16]
 8002310:	f043 0002 	orr.w	r0, r3, #2
 8002314:	6120      	str	r0, [r4, #16]
    FLASH->AR = Page_Address; 
 8002316:	6165      	str	r5, [r4, #20]
    FLASH->CR|= CR_STRT_Set;
 8002318:	6921      	ldr	r1, [r4, #16]
    
    /* Wait for last operation to be completed */
    status = FLASH_WaitForLastOperation(EraseTimeout);
 800231a:	f44f 2030 	mov.w	r0, #720896	; 0xb0000
  if(status == FLASH_COMPLETE)
  { 
    /* if the previous operation is completed, proceed to erase the page */
    FLASH->CR|= CR_PER_Set;
    FLASH->AR = Page_Address; 
    FLASH->CR|= CR_STRT_Set;
 800231e:	f041 0240 	orr.w	r2, r1, #64	; 0x40
 8002322:	6122      	str	r2, [r4, #16]
    
    /* Wait for last operation to be completed */
    status = FLASH_WaitForLastOperation(EraseTimeout);
 8002324:	f7ff ffae 	bl	8002284 <FLASH_WaitForLastOperation>
    
    /* Disable the PER Bit */
    FLASH->CR &= CR_PER_Reset;
 8002328:	6921      	ldr	r1, [r4, #16]
 800232a:	f641 73fd 	movw	r3, #8189	; 0x1ffd
 800232e:	400b      	ands	r3, r1
 8002330:	6123      	str	r3, [r4, #16]
  }
#endif /* STM32F10X_XL */

  /* Return the Erase Status */
  return status;
}
 8002332:	bd38      	pop	{r3, r4, r5, pc}
 8002334:	40022000 	.word	0x40022000

08002338 <GPIO_Init>:
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
  assert_param(IS_GPIO_MODE(GPIO_InitStruct->GPIO_Mode));
  assert_param(IS_GPIO_PIN(GPIO_InitStruct->GPIO_Pin));  
  
/*---------------------------- GPIO Mode Configuration -----------------------*/
  currentmode = ((uint32_t)GPIO_InitStruct->GPIO_Mode) & ((uint32_t)0x0F);
 8002338:	78cb      	ldrb	r3, [r1, #3]
  * @param  GPIO_InitStruct: pointer to a GPIO_InitTypeDef structure that
  *         contains the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void GPIO_Init(GPIO_TypeDef* GPIOx, GPIO_InitTypeDef* GPIO_InitStruct)
{
 800233a:	b5f0      	push	{r4, r5, r6, r7, lr}
  assert_param(IS_GPIO_MODE(GPIO_InitStruct->GPIO_Mode));
  assert_param(IS_GPIO_PIN(GPIO_InitStruct->GPIO_Pin));  
  
/*---------------------------- GPIO Mode Configuration -----------------------*/
  currentmode = ((uint32_t)GPIO_InitStruct->GPIO_Mode) & ((uint32_t)0x0F);
  if ((((uint32_t)GPIO_InitStruct->GPIO_Mode) & ((uint32_t)0x10)) != 0x00)
 800233c:	06da      	lsls	r2, r3, #27
  { 
    /* Check the parameters */
    assert_param(IS_GPIO_SPEED(GPIO_InitStruct->GPIO_Speed));
    /* Output mode */
    currentmode |= (uint32_t)GPIO_InitStruct->GPIO_Speed;
 800233e:	bf48      	it	mi
 8002340:	788a      	ldrbmi	r2, [r1, #2]
  }
/*---------------------------- GPIO CRL Configuration ------------------------*/
  /* Configure the eight low port pins */
  if (((uint32_t)GPIO_InitStruct->GPIO_Pin & ((uint32_t)0x00FF)) != 0x00)
 8002342:	8809      	ldrh	r1, [r1, #0]
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
  assert_param(IS_GPIO_MODE(GPIO_InitStruct->GPIO_Mode));
  assert_param(IS_GPIO_PIN(GPIO_InitStruct->GPIO_Pin));  
  
/*---------------------------- GPIO Mode Configuration -----------------------*/
  currentmode = ((uint32_t)GPIO_InitStruct->GPIO_Mode) & ((uint32_t)0x0F);
 8002344:	f003 050f 	and.w	r5, r3, #15
  if ((((uint32_t)GPIO_InitStruct->GPIO_Mode) & ((uint32_t)0x10)) != 0x00)
  { 
    /* Check the parameters */
    assert_param(IS_GPIO_SPEED(GPIO_InitStruct->GPIO_Speed));
    /* Output mode */
    currentmode |= (uint32_t)GPIO_InitStruct->GPIO_Speed;
 8002348:	bf48      	it	mi
 800234a:	4315      	orrmi	r5, r2
  }
/*---------------------------- GPIO CRL Configuration ------------------------*/
  /* Configure the eight low port pins */
  if (((uint32_t)GPIO_InitStruct->GPIO_Pin & ((uint32_t)0x00FF)) != 0x00)
 800234c:	f011 0fff 	tst.w	r1, #255	; 0xff
 8002350:	d01e      	beq.n	8002390 <GPIO_Init+0x58>
  {
    tmpreg = GPIOx->CRL;
 8002352:	6804      	ldr	r4, [r0, #0]
    for (pinpos = 0x00; pinpos < 0x08; pinpos++)
 8002354:	2200      	movs	r2, #0
    {
      pos = ((uint32_t)0x01) << pinpos;
 8002356:	2701      	movs	r7, #1
 8002358:	fa07 f702 	lsl.w	r7, r7, r2
      /* Get the port pins position */
      currentpin = (GPIO_InitStruct->GPIO_Pin) & pos;
 800235c:	ea07 0601 	and.w	r6, r7, r1
      if (currentpin == pos)
 8002360:	42be      	cmp	r6, r7
 8002362:	d111      	bne.n	8002388 <GPIO_Init+0x50>
      {
        pos = pinpos << 2;
 8002364:	0097      	lsls	r7, r2, #2
        /* Clear the corresponding low control register bits */
        pinmask = ((uint32_t)0x0F) << pos;
 8002366:	f04f 0c0f 	mov.w	ip, #15
 800236a:	fa0c fc07 	lsl.w	ip, ip, r7
        tmpreg &= ~pinmask;
        /* Write the mode configuration in the corresponding bits */
        tmpreg |= (currentmode << pos);
 800236e:	fa05 f707 	lsl.w	r7, r5, r7
      if (currentpin == pos)
      {
        pos = pinpos << 2;
        /* Clear the corresponding low control register bits */
        pinmask = ((uint32_t)0x0F) << pos;
        tmpreg &= ~pinmask;
 8002372:	ea24 040c 	bic.w	r4, r4, ip
        /* Write the mode configuration in the corresponding bits */
        tmpreg |= (currentmode << pos);
        /* Reset the corresponding ODR bit */
        if (GPIO_InitStruct->GPIO_Mode == GPIO_Mode_IPD)
 8002376:	2b28      	cmp	r3, #40	; 0x28
        pos = pinpos << 2;
        /* Clear the corresponding low control register bits */
        pinmask = ((uint32_t)0x0F) << pos;
        tmpreg &= ~pinmask;
        /* Write the mode configuration in the corresponding bits */
        tmpreg |= (currentmode << pos);
 8002378:	ea44 0407 	orr.w	r4, r4, r7
        /* Reset the corresponding ODR bit */
        if (GPIO_InitStruct->GPIO_Mode == GPIO_Mode_IPD)
 800237c:	d101      	bne.n	8002382 <GPIO_Init+0x4a>
        {
          GPIOx->BRR = (((uint32_t)0x01) << pinpos);
 800237e:	6146      	str	r6, [r0, #20]
 8002380:	e002      	b.n	8002388 <GPIO_Init+0x50>
        }
        else
        {
          /* Set the corresponding ODR bit */
          if (GPIO_InitStruct->GPIO_Mode == GPIO_Mode_IPU)
 8002382:	2b48      	cmp	r3, #72	; 0x48
          {
            GPIOx->BSRR = (((uint32_t)0x01) << pinpos);
 8002384:	bf08      	it	eq
 8002386:	6106      	streq	r6, [r0, #16]
/*---------------------------- GPIO CRL Configuration ------------------------*/
  /* Configure the eight low port pins */
  if (((uint32_t)GPIO_InitStruct->GPIO_Pin & ((uint32_t)0x00FF)) != 0x00)
  {
    tmpreg = GPIOx->CRL;
    for (pinpos = 0x00; pinpos < 0x08; pinpos++)
 8002388:	3201      	adds	r2, #1
 800238a:	2a08      	cmp	r2, #8
 800238c:	d1e3      	bne.n	8002356 <GPIO_Init+0x1e>
            GPIOx->BSRR = (((uint32_t)0x01) << pinpos);
          }
        }
      }
    }
    GPIOx->CRL = tmpreg;
 800238e:	6004      	str	r4, [r0, #0]
  }
/*---------------------------- GPIO CRH Configuration ------------------------*/
  /* Configure the eight high port pins */
  if (GPIO_InitStruct->GPIO_Pin > 0x00FF)
 8002390:	29ff      	cmp	r1, #255	; 0xff
 8002392:	d920      	bls.n	80023d6 <GPIO_Init+0x9e>
  {
    tmpreg = GPIOx->CRH;
 8002394:	6844      	ldr	r4, [r0, #4]
    for (pinpos = 0x00; pinpos < 0x08; pinpos++)
 8002396:	2200      	movs	r2, #0
  * @param  GPIOx: where x can be (A..G) to select the GPIO peripheral.
  * @param  GPIO_InitStruct: pointer to a GPIO_InitTypeDef structure that
  *         contains the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void GPIO_Init(GPIO_TypeDef* GPIOx, GPIO_InitTypeDef* GPIO_InitStruct)
 8002398:	f102 0608 	add.w	r6, r2, #8
  if (GPIO_InitStruct->GPIO_Pin > 0x00FF)
  {
    tmpreg = GPIOx->CRH;
    for (pinpos = 0x00; pinpos < 0x08; pinpos++)
    {
      pos = (((uint32_t)0x01) << (pinpos + 0x08));
 800239c:	2701      	movs	r7, #1
 800239e:	fa07 f706 	lsl.w	r7, r7, r6
      /* Get the port pins position */
      currentpin = ((GPIO_InitStruct->GPIO_Pin) & pos);
 80023a2:	ea07 0601 	and.w	r6, r7, r1
      if (currentpin == pos)
 80023a6:	42be      	cmp	r6, r7
 80023a8:	d111      	bne.n	80023ce <GPIO_Init+0x96>
      {
        pos = pinpos << 2;
 80023aa:	0097      	lsls	r7, r2, #2
        /* Clear the corresponding high control register bits */
        pinmask = ((uint32_t)0x0F) << pos;
 80023ac:	f04f 0c0f 	mov.w	ip, #15
 80023b0:	fa0c fc07 	lsl.w	ip, ip, r7
        tmpreg &= ~pinmask;
        /* Write the mode configuration in the corresponding bits */
        tmpreg |= (currentmode << pos);
 80023b4:	fa05 f707 	lsl.w	r7, r5, r7
      if (currentpin == pos)
      {
        pos = pinpos << 2;
        /* Clear the corresponding high control register bits */
        pinmask = ((uint32_t)0x0F) << pos;
        tmpreg &= ~pinmask;
 80023b8:	ea24 040c 	bic.w	r4, r4, ip
        /* Write the mode configuration in the corresponding bits */
        tmpreg |= (currentmode << pos);
        /* Reset the corresponding ODR bit */
        if (GPIO_InitStruct->GPIO_Mode == GPIO_Mode_IPD)
 80023bc:	2b28      	cmp	r3, #40	; 0x28
        pos = pinpos << 2;
        /* Clear the corresponding high control register bits */
        pinmask = ((uint32_t)0x0F) << pos;
        tmpreg &= ~pinmask;
        /* Write the mode configuration in the corresponding bits */
        tmpreg |= (currentmode << pos);
 80023be:	ea44 0407 	orr.w	r4, r4, r7
        /* Reset the corresponding ODR bit */
        if (GPIO_InitStruct->GPIO_Mode == GPIO_Mode_IPD)
 80023c2:	d101      	bne.n	80023c8 <GPIO_Init+0x90>
        {
          GPIOx->BRR = (((uint32_t)0x01) << (pinpos + 0x08));
 80023c4:	6146      	str	r6, [r0, #20]
 80023c6:	e002      	b.n	80023ce <GPIO_Init+0x96>
        }
        /* Set the corresponding ODR bit */
        if (GPIO_InitStruct->GPIO_Mode == GPIO_Mode_IPU)
 80023c8:	2b48      	cmp	r3, #72	; 0x48
        {
          GPIOx->BSRR = (((uint32_t)0x01) << (pinpos + 0x08));
 80023ca:	bf08      	it	eq
 80023cc:	6106      	streq	r6, [r0, #16]
/*---------------------------- GPIO CRH Configuration ------------------------*/
  /* Configure the eight high port pins */
  if (GPIO_InitStruct->GPIO_Pin > 0x00FF)
  {
    tmpreg = GPIOx->CRH;
    for (pinpos = 0x00; pinpos < 0x08; pinpos++)
 80023ce:	3201      	adds	r2, #1
 80023d0:	2a08      	cmp	r2, #8
 80023d2:	d1e1      	bne.n	8002398 <GPIO_Init+0x60>
        {
          GPIOx->BSRR = (((uint32_t)0x01) << (pinpos + 0x08));
        }
      }
    }
    GPIOx->CRH = tmpreg;
 80023d4:	6044      	str	r4, [r0, #4]
 80023d6:	bdf0      	pop	{r4, r5, r6, r7, pc}

080023d8 <GPIO_ReadInputDataBit>:
  
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
  assert_param(IS_GET_GPIO_PIN(GPIO_Pin)); 
  
  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)Bit_RESET)
 80023d8:	6883      	ldr	r3, [r0, #8]
 80023da:	4219      	tst	r1, r3
  else
  {
    bitstatus = (uint8_t)Bit_RESET;
  }
  return bitstatus;
}
 80023dc:	bf0c      	ite	eq
 80023de:	2000      	moveq	r0, #0
 80023e0:	2001      	movne	r0, #1
 80023e2:	4770      	bx	lr

080023e4 <GPIO_SetBits>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  
  GPIOx->BSRR = GPIO_Pin;
 80023e4:	6101      	str	r1, [r0, #16]
 80023e6:	4770      	bx	lr

080023e8 <GPIO_ResetBits>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  
  GPIOx->BRR = GPIO_Pin;
 80023e8:	6141      	str	r1, [r0, #20]
 80023ea:	4770      	bx	lr

080023ec <GPIO_EXTILineConfig>:
  uint32_t tmp = 0x00;
  /* Check the parameters */
  assert_param(IS_GPIO_EXTI_PORT_SOURCE(GPIO_PortSource));
  assert_param(IS_GPIO_PIN_SOURCE(GPIO_PinSource));
  
  tmp = ((uint32_t)0x0F) << (0x04 * (GPIO_PinSource & (uint8_t)0x03));
 80023ec:	f001 0203 	and.w	r2, r1, #3
  * @param  GPIO_PinSource: specifies the EXTI line to be configured.
  *   This parameter can be GPIO_PinSourcex where x can be (0..15).
  * @retval None
  */
void GPIO_EXTILineConfig(uint8_t GPIO_PortSource, uint8_t GPIO_PinSource)
{
 80023f0:	b530      	push	{r4, r5, lr}
  uint32_t tmp = 0x00;
  /* Check the parameters */
  assert_param(IS_GPIO_EXTI_PORT_SOURCE(GPIO_PortSource));
  assert_param(IS_GPIO_PIN_SOURCE(GPIO_PinSource));
  
  tmp = ((uint32_t)0x0F) << (0x04 * (GPIO_PinSource & (uint8_t)0x03));
 80023f2:	0092      	lsls	r2, r2, #2
 80023f4:	240f      	movs	r4, #15
 80023f6:	fa04 f402 	lsl.w	r4, r4, r2
  AFIO->EXTICR[GPIO_PinSource >> 0x02] &= ~tmp;
  AFIO->EXTICR[GPIO_PinSource >> 0x02] |= (((uint32_t)GPIO_PortSource) << (0x04 * (GPIO_PinSource & (uint8_t)0x03)));
 80023fa:	fa00 f002 	lsl.w	r0, r0, r2
  /* Check the parameters */
  assert_param(IS_GPIO_EXTI_PORT_SOURCE(GPIO_PortSource));
  assert_param(IS_GPIO_PIN_SOURCE(GPIO_PinSource));
  
  tmp = ((uint32_t)0x0F) << (0x04 * (GPIO_PinSource & (uint8_t)0x03));
  AFIO->EXTICR[GPIO_PinSource >> 0x02] &= ~tmp;
 80023fe:	4b07      	ldr	r3, [pc, #28]	; (800241c <GPIO_EXTILineConfig+0x30>)
 8002400:	0889      	lsrs	r1, r1, #2
 8002402:	3102      	adds	r1, #2
 8002404:	f853 5021 	ldr.w	r5, [r3, r1, lsl #2]
 8002408:	ea25 0404 	bic.w	r4, r5, r4
 800240c:	f843 4021 	str.w	r4, [r3, r1, lsl #2]
  AFIO->EXTICR[GPIO_PinSource >> 0x02] |= (((uint32_t)GPIO_PortSource) << (0x04 * (GPIO_PinSource & (uint8_t)0x03)));
 8002410:	f853 4021 	ldr.w	r4, [r3, r1, lsl #2]
 8002414:	4304      	orrs	r4, r0
 8002416:	f843 4021 	str.w	r4, [r3, r1, lsl #2]
 800241a:	bd30      	pop	{r4, r5, pc}
 800241c:	40010000 	.word	0x40010000

08002420 <PWR_BackupAccessCmd>:
  */
void PWR_BackupAccessCmd(FunctionalState NewState)
{
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  *(__IO uint32_t *) CR_DBP_BB = (uint32_t)NewState;
 8002420:	4b01      	ldr	r3, [pc, #4]	; (8002428 <PWR_BackupAccessCmd+0x8>)
 8002422:	6018      	str	r0, [r3, #0]
 8002424:	4770      	bx	lr
 8002426:	bf00      	nop
 8002428:	420e0020 	.word	0x420e0020

0800242c <RCC_USBCLKConfig>:
void RCC_USBCLKConfig(uint32_t RCC_USBCLKSource)
{
  /* Check the parameters */
  assert_param(IS_RCC_USBCLK_SOURCE(RCC_USBCLKSource));

  *(__IO uint32_t *) CFGR_USBPRE_BB = RCC_USBCLKSource;
 800242c:	4b01      	ldr	r3, [pc, #4]	; (8002434 <RCC_USBCLKConfig+0x8>)
 800242e:	6018      	str	r0, [r3, #0]
 8002430:	4770      	bx	lr
 8002432:	bf00      	nop
 8002434:	424200d8 	.word	0x424200d8

08002438 <RCC_APB2PeriphClockCmd>:
  * @param  NewState: new state of the specified peripheral clock.
  *   This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_APB2PeriphClockCmd(uint32_t RCC_APB2Periph, FunctionalState NewState)
{
 8002438:	4b04      	ldr	r3, [pc, #16]	; (800244c <RCC_APB2PeriphClockCmd+0x14>)
  /* Check the parameters */
  assert_param(IS_RCC_APB2_PERIPH(RCC_APB2Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
  {
    RCC->APB2ENR |= RCC_APB2Periph;
 800243a:	699a      	ldr	r2, [r3, #24]
void RCC_APB2PeriphClockCmd(uint32_t RCC_APB2Periph, FunctionalState NewState)
{
  /* Check the parameters */
  assert_param(IS_RCC_APB2_PERIPH(RCC_APB2Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 800243c:	b109      	cbz	r1, 8002442 <RCC_APB2PeriphClockCmd+0xa>
  {
    RCC->APB2ENR |= RCC_APB2Periph;
 800243e:	4310      	orrs	r0, r2
 8002440:	e001      	b.n	8002446 <RCC_APB2PeriphClockCmd+0xe>
  }
  else
  {
    RCC->APB2ENR &= ~RCC_APB2Periph;
 8002442:	ea22 0000 	bic.w	r0, r2, r0
 8002446:	6198      	str	r0, [r3, #24]
 8002448:	4770      	bx	lr
 800244a:	bf00      	nop
 800244c:	40021000 	.word	0x40021000

08002450 <RCC_APB1PeriphClockCmd>:
  * @param  NewState: new state of the specified peripheral clock.
  *   This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_APB1PeriphClockCmd(uint32_t RCC_APB1Periph, FunctionalState NewState)
{
 8002450:	4b04      	ldr	r3, [pc, #16]	; (8002464 <RCC_APB1PeriphClockCmd+0x14>)
  /* Check the parameters */
  assert_param(IS_RCC_APB1_PERIPH(RCC_APB1Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
  {
    RCC->APB1ENR |= RCC_APB1Periph;
 8002452:	69da      	ldr	r2, [r3, #28]
void RCC_APB1PeriphClockCmd(uint32_t RCC_APB1Periph, FunctionalState NewState)
{
  /* Check the parameters */
  assert_param(IS_RCC_APB1_PERIPH(RCC_APB1Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 8002454:	b109      	cbz	r1, 800245a <RCC_APB1PeriphClockCmd+0xa>
  {
    RCC->APB1ENR |= RCC_APB1Periph;
 8002456:	4310      	orrs	r0, r2
 8002458:	e001      	b.n	800245e <RCC_APB1PeriphClockCmd+0xe>
  }
  else
  {
    RCC->APB1ENR &= ~RCC_APB1Periph;
 800245a:	ea22 0000 	bic.w	r0, r2, r0
 800245e:	61d8      	str	r0, [r3, #28]
 8002460:	4770      	bx	lr
 8002462:	bf00      	nop
 8002464:	40021000 	.word	0x40021000

08002468 <SPI_Init>:
  /* Set SSM, SSI and MSTR bits according to SPI_Mode and SPI_NSS values */
  /* Set LSBFirst bit according to SPI_FirstBit value */
  /* Set BR bits according to SPI_BaudRatePrescaler value */
  /* Set CPOL bit according to SPI_CPOL value */
  /* Set CPHA bit according to SPI_CPHA value */
  tmpreg |= (uint16_t)((uint32_t)SPI_InitStruct->SPI_Direction | SPI_InitStruct->SPI_Mode |
 8002468:	880b      	ldrh	r3, [r1, #0]
  * @param  SPI_InitStruct: pointer to a SPI_InitTypeDef structure that
  *         contains the configuration information for the specified SPI peripheral.
  * @retval None
  */
void SPI_Init(SPI_TypeDef* SPIx, SPI_InitTypeDef* SPI_InitStruct)
{
 800246a:	b510      	push	{r4, lr}
  /* Set SSM, SSI and MSTR bits according to SPI_Mode and SPI_NSS values */
  /* Set LSBFirst bit according to SPI_FirstBit value */
  /* Set BR bits according to SPI_BaudRatePrescaler value */
  /* Set CPOL bit according to SPI_CPOL value */
  /* Set CPHA bit according to SPI_CPHA value */
  tmpreg |= (uint16_t)((uint32_t)SPI_InitStruct->SPI_Direction | SPI_InitStruct->SPI_Mode |
 800246c:	884c      	ldrh	r4, [r1, #2]
  assert_param(IS_SPI_FIRST_BIT(SPI_InitStruct->SPI_FirstBit));
  assert_param(IS_SPI_CRC_POLYNOMIAL(SPI_InitStruct->SPI_CRCPolynomial));

/*---------------------------- SPIx CR1 Configuration ------------------------*/
  /* Get the SPIx CR1 value */
  tmpreg = SPIx->CR1;
 800246e:	8802      	ldrh	r2, [r0, #0]
  /* Set SSM, SSI and MSTR bits according to SPI_Mode and SPI_NSS values */
  /* Set LSBFirst bit according to SPI_FirstBit value */
  /* Set BR bits according to SPI_BaudRatePrescaler value */
  /* Set CPOL bit according to SPI_CPOL value */
  /* Set CPHA bit according to SPI_CPHA value */
  tmpreg |= (uint16_t)((uint32_t)SPI_InitStruct->SPI_Direction | SPI_InitStruct->SPI_Mode |
 8002470:	4323      	orrs	r3, r4
 8002472:	888c      	ldrh	r4, [r1, #4]

/*---------------------------- SPIx CR1 Configuration ------------------------*/
  /* Get the SPIx CR1 value */
  tmpreg = SPIx->CR1;
  /* Clear BIDIMode, BIDIOE, RxONLY, SSM, SSI, LSBFirst, BR, MSTR, CPOL and CPHA bits */
  tmpreg &= CR1_CLEAR_Mask;
 8002474:	f402 5241 	and.w	r2, r2, #12352	; 0x3040
  /* Set SSM, SSI and MSTR bits according to SPI_Mode and SPI_NSS values */
  /* Set LSBFirst bit according to SPI_FirstBit value */
  /* Set BR bits according to SPI_BaudRatePrescaler value */
  /* Set CPOL bit according to SPI_CPOL value */
  /* Set CPHA bit according to SPI_CPHA value */
  tmpreg |= (uint16_t)((uint32_t)SPI_InitStruct->SPI_Direction | SPI_InitStruct->SPI_Mode |
 8002478:	4323      	orrs	r3, r4
 800247a:	88cc      	ldrh	r4, [r1, #6]
 800247c:	4323      	orrs	r3, r4
 800247e:	890c      	ldrh	r4, [r1, #8]
 8002480:	4323      	orrs	r3, r4
 8002482:	894c      	ldrh	r4, [r1, #10]
 8002484:	4323      	orrs	r3, r4
 8002486:	898c      	ldrh	r4, [r1, #12]
 8002488:	4323      	orrs	r3, r4
 800248a:	89cc      	ldrh	r4, [r1, #14]
  /* Activate the SPI mode (Reset I2SMOD bit in I2SCFGR register) */
  SPIx->I2SCFGR &= SPI_Mode_Select;		

/*---------------------------- SPIx CRCPOLY Configuration --------------------*/
  /* Write to SPIx CRCPOLY */
  SPIx->CRCPR = SPI_InitStruct->SPI_CRCPolynomial;
 800248c:	8a09      	ldrh	r1, [r1, #16]
  /* Set SSM, SSI and MSTR bits according to SPI_Mode and SPI_NSS values */
  /* Set LSBFirst bit according to SPI_FirstBit value */
  /* Set BR bits according to SPI_BaudRatePrescaler value */
  /* Set CPOL bit according to SPI_CPOL value */
  /* Set CPHA bit according to SPI_CPHA value */
  tmpreg |= (uint16_t)((uint32_t)SPI_InitStruct->SPI_Direction | SPI_InitStruct->SPI_Mode |
 800248e:	4323      	orrs	r3, r4
 8002490:	431a      	orrs	r2, r3
 8002492:	b293      	uxth	r3, r2
                  SPI_InitStruct->SPI_DataSize | SPI_InitStruct->SPI_CPOL |  
                  SPI_InitStruct->SPI_CPHA | SPI_InitStruct->SPI_NSS |  
                  SPI_InitStruct->SPI_BaudRatePrescaler | SPI_InitStruct->SPI_FirstBit);
  /* Write to SPIx CR1 */
  SPIx->CR1 = tmpreg;
 8002494:	8003      	strh	r3, [r0, #0]
  
  /* Activate the SPI mode (Reset I2SMOD bit in I2SCFGR register) */
  SPIx->I2SCFGR &= SPI_Mode_Select;		
 8002496:	8b82      	ldrh	r2, [r0, #28]
 8002498:	f422 6300 	bic.w	r3, r2, #2048	; 0x800
 800249c:	041a      	lsls	r2, r3, #16
 800249e:	0c13      	lsrs	r3, r2, #16
 80024a0:	8383      	strh	r3, [r0, #28]

/*---------------------------- SPIx CRCPOLY Configuration --------------------*/
  /* Write to SPIx CRCPOLY */
  SPIx->CRCPR = SPI_InitStruct->SPI_CRCPolynomial;
 80024a2:	8201      	strh	r1, [r0, #16]
 80024a4:	bd10      	pop	{r4, pc}

080024a6 <SPI_Cmd>:
  assert_param(IS_SPI_ALL_PERIPH(SPIx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
  {
    /* Enable the selected SPI peripheral */
    SPIx->CR1 |= CR1_SPE_Set;
 80024a6:	8803      	ldrh	r3, [r0, #0]
void SPI_Cmd(SPI_TypeDef* SPIx, FunctionalState NewState)
{
  /* Check the parameters */
  assert_param(IS_SPI_ALL_PERIPH(SPIx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 80024a8:	b119      	cbz	r1, 80024b2 <SPI_Cmd+0xc>
  {
    /* Enable the selected SPI peripheral */
    SPIx->CR1 |= CR1_SPE_Set;
 80024aa:	b299      	uxth	r1, r3
 80024ac:	f041 0340 	orr.w	r3, r1, #64	; 0x40
 80024b0:	e003      	b.n	80024ba <SPI_Cmd+0x14>
  }
  else
  {
    /* Disable the selected SPI peripheral */
    SPIx->CR1 &= CR1_SPE_Reset;
 80024b2:	f023 0140 	bic.w	r1, r3, #64	; 0x40
 80024b6:	040a      	lsls	r2, r1, #16
 80024b8:	0c13      	lsrs	r3, r2, #16
 80024ba:	8003      	strh	r3, [r0, #0]
 80024bc:	4770      	bx	lr

080024be <SPI_I2S_SendData>:
{
  /* Check the parameters */
  assert_param(IS_SPI_ALL_PERIPH(SPIx));
  
  /* Write in the DR register the data to be sent */
  SPIx->DR = Data;
 80024be:	8181      	strh	r1, [r0, #12]
 80024c0:	4770      	bx	lr

080024c2 <SPI_I2S_ReceiveData>:
{
  /* Check the parameters */
  assert_param(IS_SPI_ALL_PERIPH(SPIx));
  
  /* Return the data in the DR register */
  return SPIx->DR;
 80024c2:	8980      	ldrh	r0, [r0, #12]
}
 80024c4:	b280      	uxth	r0, r0
 80024c6:	4770      	bx	lr

080024c8 <SPI_I2S_GetFlagStatus>:
  FlagStatus bitstatus = RESET;
  /* Check the parameters */
  assert_param(IS_SPI_ALL_PERIPH(SPIx));
  assert_param(IS_SPI_I2S_GET_FLAG(SPI_I2S_FLAG));
  /* Check the status of the specified SPI/I2S flag */
  if ((SPIx->SR & SPI_I2S_FLAG) != (uint16_t)RESET)
 80024c8:	8903      	ldrh	r3, [r0, #8]
 80024ca:	4219      	tst	r1, r3
    /* SPI_I2S_FLAG is reset */
    bitstatus = RESET;
  }
  /* Return the SPI_I2S_FLAG status */
  return  bitstatus;
}
 80024cc:	bf0c      	ite	eq
 80024ce:	2000      	moveq	r0, #0
 80024d0:	2001      	movne	r0, #1
 80024d2:	4770      	bx	lr

080024d4 <TIM_TimeBaseInit>:
  assert_param(IS_TIM_COUNTER_MODE(TIM_TimeBaseInitStruct->TIM_CounterMode));
  assert_param(IS_TIM_CKD_DIV(TIM_TimeBaseInitStruct->TIM_ClockDivision));

  tmpcr1 = TIMx->CR1;  

  if((TIMx == TIM1) || (TIMx == TIM8)|| (TIMx == TIM2) || (TIMx == TIM3)||
 80024d4:	4a22      	ldr	r2, [pc, #136]	; (8002560 <TIM_TimeBaseInit+0x8c>)
  /* Check the parameters */
  assert_param(IS_TIM_ALL_PERIPH(TIMx)); 
  assert_param(IS_TIM_COUNTER_MODE(TIM_TimeBaseInitStruct->TIM_CounterMode));
  assert_param(IS_TIM_CKD_DIV(TIM_TimeBaseInitStruct->TIM_ClockDivision));

  tmpcr1 = TIMx->CR1;  
 80024d6:	8803      	ldrh	r3, [r0, #0]

  if((TIMx == TIM1) || (TIMx == TIM8)|| (TIMx == TIM2) || (TIMx == TIM3)||
 80024d8:	4290      	cmp	r0, r2
  /* Check the parameters */
  assert_param(IS_TIM_ALL_PERIPH(TIMx)); 
  assert_param(IS_TIM_COUNTER_MODE(TIM_TimeBaseInitStruct->TIM_CounterMode));
  assert_param(IS_TIM_CKD_DIV(TIM_TimeBaseInitStruct->TIM_ClockDivision));

  tmpcr1 = TIMx->CR1;  
 80024da:	b29b      	uxth	r3, r3

  if((TIMx == TIM1) || (TIMx == TIM8)|| (TIMx == TIM2) || (TIMx == TIM3)||
 80024dc:	d012      	beq.n	8002504 <TIM_TimeBaseInit+0x30>
 80024de:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80024e2:	4290      	cmp	r0, r2
 80024e4:	d00e      	beq.n	8002504 <TIM_TimeBaseInit+0x30>
 80024e6:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 80024ea:	d00b      	beq.n	8002504 <TIM_TimeBaseInit+0x30>
 80024ec:	f5a2 3298 	sub.w	r2, r2, #77824	; 0x13000
 80024f0:	4290      	cmp	r0, r2
 80024f2:	d007      	beq.n	8002504 <TIM_TimeBaseInit+0x30>
 80024f4:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80024f8:	4290      	cmp	r0, r2
 80024fa:	d003      	beq.n	8002504 <TIM_TimeBaseInit+0x30>
     (TIMx == TIM4) || (TIMx == TIM5)) 
 80024fc:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8002500:	4290      	cmp	r0, r2
 8002502:	d103      	bne.n	800250c <TIM_TimeBaseInit+0x38>
  {
    /* Select the Counter Mode */
    tmpcr1 &= (uint16_t)(~((uint16_t)(TIM_CR1_DIR | TIM_CR1_CMS)));
    tmpcr1 |= (uint32_t)TIM_TimeBaseInitStruct->TIM_CounterMode;
 8002504:	884a      	ldrh	r2, [r1, #2]

  if((TIMx == TIM1) || (TIMx == TIM8)|| (TIMx == TIM2) || (TIMx == TIM3)||
     (TIMx == TIM4) || (TIMx == TIM5)) 
  {
    /* Select the Counter Mode */
    tmpcr1 &= (uint16_t)(~((uint16_t)(TIM_CR1_DIR | TIM_CR1_CMS)));
 8002506:	f023 0370 	bic.w	r3, r3, #112	; 0x70
    tmpcr1 |= (uint32_t)TIM_TimeBaseInitStruct->TIM_CounterMode;
 800250a:	4313      	orrs	r3, r2
  }
 
  if((TIMx != TIM6) && (TIMx != TIM7))
 800250c:	4a15      	ldr	r2, [pc, #84]	; (8002564 <TIM_TimeBaseInit+0x90>)
 800250e:	4290      	cmp	r0, r2
 8002510:	d008      	beq.n	8002524 <TIM_TimeBaseInit+0x50>
 8002512:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8002516:	4290      	cmp	r0, r2
 8002518:	d004      	beq.n	8002524 <TIM_TimeBaseInit+0x50>
  {
    /* Set the clock division */
    tmpcr1 &= (uint16_t)(~((uint16_t)TIM_CR1_CKD));
 800251a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
    tmpcr1 |= (uint32_t)TIM_TimeBaseInitStruct->TIM_ClockDivision;
 800251e:	88ca      	ldrh	r2, [r1, #6]
  }
 
  if((TIMx != TIM6) && (TIMx != TIM7))
  {
    /* Set the clock division */
    tmpcr1 &= (uint16_t)(~((uint16_t)TIM_CR1_CKD));
 8002520:	b29b      	uxth	r3, r3
    tmpcr1 |= (uint32_t)TIM_TimeBaseInitStruct->TIM_ClockDivision;
 8002522:	4313      	orrs	r3, r2
  }

  TIMx->CR1 = tmpcr1;
 8002524:	8003      	strh	r3, [r0, #0]

  /* Set the Autoreload value */
  TIMx->ARR = TIM_TimeBaseInitStruct->TIM_Period ;
 8002526:	888b      	ldrh	r3, [r1, #4]
 
  /* Set the Prescaler value */
  TIMx->PSC = TIM_TimeBaseInitStruct->TIM_Prescaler;
 8002528:	880a      	ldrh	r2, [r1, #0]
  }

  TIMx->CR1 = tmpcr1;

  /* Set the Autoreload value */
  TIMx->ARR = TIM_TimeBaseInitStruct->TIM_Period ;
 800252a:	8583      	strh	r3, [r0, #44]	; 0x2c
 
  /* Set the Prescaler value */
  TIMx->PSC = TIM_TimeBaseInitStruct->TIM_Prescaler;
    
  if ((TIMx == TIM1) || (TIMx == TIM8)|| (TIMx == TIM15)|| (TIMx == TIM16) || (TIMx == TIM17))  
 800252c:	4b0c      	ldr	r3, [pc, #48]	; (8002560 <TIM_TimeBaseInit+0x8c>)

  /* Set the Autoreload value */
  TIMx->ARR = TIM_TimeBaseInitStruct->TIM_Period ;
 
  /* Set the Prescaler value */
  TIMx->PSC = TIM_TimeBaseInitStruct->TIM_Prescaler;
 800252e:	8502      	strh	r2, [r0, #40]	; 0x28
    
  if ((TIMx == TIM1) || (TIMx == TIM8)|| (TIMx == TIM15)|| (TIMx == TIM16) || (TIMx == TIM17))  
 8002530:	4298      	cmp	r0, r3
 8002532:	d00f      	beq.n	8002554 <TIM_TimeBaseInit+0x80>
 8002534:	f503 6200 	add.w	r2, r3, #2048	; 0x800
 8002538:	4290      	cmp	r0, r2
 800253a:	d00b      	beq.n	8002554 <TIM_TimeBaseInit+0x80>
 800253c:	f502 6340 	add.w	r3, r2, #3072	; 0xc00
 8002540:	4298      	cmp	r0, r3
 8002542:	d007      	beq.n	8002554 <TIM_TimeBaseInit+0x80>
 8002544:	f503 6280 	add.w	r2, r3, #1024	; 0x400
 8002548:	4290      	cmp	r0, r2
 800254a:	d003      	beq.n	8002554 <TIM_TimeBaseInit+0x80>
 800254c:	f502 6380 	add.w	r3, r2, #1024	; 0x400
 8002550:	4298      	cmp	r0, r3
 8002552:	d101      	bne.n	8002558 <TIM_TimeBaseInit+0x84>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = TIM_TimeBaseInitStruct->TIM_RepetitionCounter;
 8002554:	7a09      	ldrb	r1, [r1, #8]
 8002556:	8601      	strh	r1, [r0, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler and the Repetition counter
     values immediately */
  TIMx->EGR = TIM_PSCReloadMode_Immediate;           
 8002558:	2201      	movs	r2, #1
 800255a:	8282      	strh	r2, [r0, #20]
 800255c:	4770      	bx	lr
 800255e:	bf00      	nop
 8002560:	40012c00 	.word	0x40012c00
 8002564:	40001000 	.word	0x40001000

08002568 <TIM_TimeBaseStructInit>:
  */
void TIM_TimeBaseStructInit(TIM_TimeBaseInitTypeDef* TIM_TimeBaseInitStruct)
{
  /* Set the default configuration */
  TIM_TimeBaseInitStruct->TIM_Period = 0xFFFF;
  TIM_TimeBaseInitStruct->TIM_Prescaler = 0x0000;
 8002568:	2100      	movs	r1, #0
  * @retval None
  */
void TIM_TimeBaseStructInit(TIM_TimeBaseInitTypeDef* TIM_TimeBaseInitStruct)
{
  /* Set the default configuration */
  TIM_TimeBaseInitStruct->TIM_Period = 0xFFFF;
 800256a:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800256e:	8083      	strh	r3, [r0, #4]
  TIM_TimeBaseInitStruct->TIM_Prescaler = 0x0000;
 8002570:	8001      	strh	r1, [r0, #0]
  TIM_TimeBaseInitStruct->TIM_ClockDivision = TIM_CKD_DIV1;
 8002572:	80c1      	strh	r1, [r0, #6]
  TIM_TimeBaseInitStruct->TIM_CounterMode = TIM_CounterMode_Up;
 8002574:	8041      	strh	r1, [r0, #2]
  TIM_TimeBaseInitStruct->TIM_RepetitionCounter = 0x0000;
 8002576:	7201      	strb	r1, [r0, #8]
 8002578:	4770      	bx	lr

0800257a <TIM_Cmd>:
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
  {
    /* Enable the TIM Counter */
    TIMx->CR1 |= TIM_CR1_CEN;
 800257a:	8803      	ldrh	r3, [r0, #0]
{
  /* Check the parameters */
  assert_param(IS_TIM_ALL_PERIPH(TIMx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
 800257c:	b119      	cbz	r1, 8002586 <TIM_Cmd+0xc>
  {
    /* Enable the TIM Counter */
    TIMx->CR1 |= TIM_CR1_CEN;
 800257e:	b299      	uxth	r1, r3
 8002580:	f041 0301 	orr.w	r3, r1, #1
 8002584:	e003      	b.n	800258e <TIM_Cmd+0x14>
  }
  else
  {
    /* Disable the TIM Counter */
    TIMx->CR1 &= (uint16_t)(~((uint16_t)TIM_CR1_CEN));
 8002586:	f023 0101 	bic.w	r1, r3, #1
 800258a:	040a      	lsls	r2, r1, #16
 800258c:	0c13      	lsrs	r3, r2, #16
 800258e:	8003      	strh	r3, [r0, #0]
 8002590:	4770      	bx	lr

08002592 <TIM_ITConfig>:
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
  {
    /* Enable the Interrupt sources */
    TIMx->DIER |= TIM_IT;
 8002592:	8983      	ldrh	r3, [r0, #12]
 8002594:	b29b      	uxth	r3, r3
  /* Check the parameters */
  assert_param(IS_TIM_ALL_PERIPH(TIMx));
  assert_param(IS_TIM_IT(TIM_IT));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
 8002596:	b10a      	cbz	r2, 800259c <TIM_ITConfig+0xa>
  {
    /* Enable the Interrupt sources */
    TIMx->DIER |= TIM_IT;
 8002598:	4319      	orrs	r1, r3
 800259a:	e001      	b.n	80025a0 <TIM_ITConfig+0xe>
  }
  else
  {
    /* Disable the Interrupt sources */
    TIMx->DIER &= (uint16_t)~TIM_IT;
 800259c:	ea23 0101 	bic.w	r1, r3, r1
 80025a0:	8181      	strh	r1, [r0, #12]
 80025a2:	4770      	bx	lr

080025a4 <TIM_SelectOnePulseMode>:
{
  /* Check the parameters */
  assert_param(IS_TIM_ALL_PERIPH(TIMx));
  assert_param(IS_TIM_OPM_MODE(TIM_OPMode));
  /* Reset the OPM Bit */
  TIMx->CR1 &= (uint16_t)~((uint16_t)TIM_CR1_OPM);
 80025a4:	8803      	ldrh	r3, [r0, #0]
 80025a6:	f023 0208 	bic.w	r2, r3, #8
 80025aa:	0413      	lsls	r3, r2, #16
 80025ac:	0c1a      	lsrs	r2, r3, #16
 80025ae:	8002      	strh	r2, [r0, #0]
  /* Configure the OPM Mode */
  TIMx->CR1 |= TIM_OPMode;
 80025b0:	8803      	ldrh	r3, [r0, #0]
 80025b2:	b29a      	uxth	r2, r3
 80025b4:	4311      	orrs	r1, r2
 80025b6:	8001      	strh	r1, [r0, #0]
 80025b8:	4770      	bx	lr

080025ba <TIM_GetITStatus>:
  uint16_t itstatus = 0x0, itenable = 0x0;
  /* Check the parameters */
  assert_param(IS_TIM_ALL_PERIPH(TIMx));
  assert_param(IS_TIM_GET_IT(TIM_IT));
   
  itstatus = TIMx->SR & TIM_IT;
 80025ba:	8a03      	ldrh	r3, [r0, #16]
  
  itenable = TIMx->DIER & TIM_IT;
 80025bc:	8982      	ldrh	r2, [r0, #12]
  if ((itstatus != (uint16_t)RESET) && (itenable != (uint16_t)RESET))
 80025be:	ea11 0003 	ands.w	r0, r1, r3
  assert_param(IS_TIM_ALL_PERIPH(TIMx));
  assert_param(IS_TIM_GET_IT(TIM_IT));
   
  itstatus = TIMx->SR & TIM_IT;
  
  itenable = TIMx->DIER & TIM_IT;
 80025c2:	b292      	uxth	r2, r2
  if ((itstatus != (uint16_t)RESET) && (itenable != (uint16_t)RESET))
 80025c4:	d003      	beq.n	80025ce <TIM_GetITStatus+0x14>
 80025c6:	4211      	tst	r1, r2
  {
    bitstatus = SET;
 80025c8:	bf0c      	ite	eq
 80025ca:	2000      	moveq	r0, #0
 80025cc:	2001      	movne	r0, #1
  else
  {
    bitstatus = RESET;
  }
  return bitstatus;
}
 80025ce:	4770      	bx	lr

080025d0 <TIM_ClearITPendingBit>:
{
  /* Check the parameters */
  assert_param(IS_TIM_ALL_PERIPH(TIMx));
  assert_param(IS_TIM_IT(TIM_IT));
  /* Clear the IT pending Bit */
  TIMx->SR = (uint16_t)~TIM_IT;
 80025d0:	43c9      	mvns	r1, r1
 80025d2:	b28a      	uxth	r2, r1
 80025d4:	8202      	strh	r2, [r0, #16]
 80025d6:	4770      	bx	lr

080025d8 <TimingTable>:
 80025d8:	0032 0032 0014 001e                         2.2.....

080025e0 <LED_CLK>:
 80025e0:	0004 0000 0004 0000                         ........

080025e8 <LED_PIN>:
 80025e8:	0100 0200                                   ....

080025ec <BUTTON_PORT_SOURCE>:
 80025ec:	0000 0000                                   ....

080025f0 <BUTTON_PIN_SOURCE>:
 80025f0:	000a 0000                                   ....

080025f4 <BUTTON_EXTI_LINE>:
 80025f4:	0400 0000                                   ....

080025f8 <BUTTON_CLK>:
 80025f8:	0004 0000 0000 0000                         ........

08002600 <BUTTON_PIN>:
 8002600:	0400 0000                                   ....

08002604 <BUTTON_IRQn>:
 8002604:	0028 0000                                   (...
